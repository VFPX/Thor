*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thor_foxresource.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS parameterx AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: this_access
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Name = "parameterx"
		_memberdata = <VFPData>
			<memberdata name="this_access" display="This_Access"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Init
		Lparameters loDefaults
		
		This.oDefaults = loDefaults
	ENDPROC

	PROCEDURE this_access
		Lparameters tcMember
		
		If Pemstatus (This, tcMember, 5)					;
				and (Pemstatus (This, tcMember, 4))			;
				And (Isnull( Getpem (This, tcMember)))		;
				And (Not Upper(tcMember) == 'ODEFAULTS')	;
				and (Not Pemstatus (This, tcMember, 6))
			Removeproperty(This, tcMember)
		Endif
		 
		If Not Pemstatus (This, tcMember, 5)
			If 'O' = Vartype (This.oDefaults) And Pemstatus (This.oDefaults, tcMember, 5)
				This.AddProperty (tcMember, Getpem (This.oDefaults, tcMember))
			Else
				This.AddProperty (tcMember, Null)
			Endif
		Endif
		
		Return This
		
	ENDPROC

ENDDEFINE

DEFINE CLASS thor_form_settings AS thor_resource OF "thor_foxresource.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: aligntocursor
		*m: restore
		*m: save
	*</DefinedPropArrayMethod>

	*<PropValue>
		Name = "thor_form_settings"
		_memberdata = <VFPData>
			<memberdata name="restore" display="Restore"/>
			<memberdata name="save" display="Save"/>
			<memberdata name="aligntocursor" display="AlignToCursor"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE aligntocursor
		Lparameters toThisForm, llAlignToMouse, tnVerticalAdjustment, tnHorizontalAdjustment
		
		Local lnHorizontalAdjustment, lnLeft, lnTop, loCoordinates
		
		Execscript (_Screen.cThorDispatcher, 'PEMEditor_StartIDETools')
		loCoordinates = _oPEMEditor.oUtils.oEditorWin.GetPopupCoordinates (.F., llAlignToMouse)
		
		If loCoordinates.Source = 'Center'
			lnTop  = loCoordinates.Top + toThisForm.Height / 2
			lnLeft = loCoordinates.Left + toThisForm.Width / 2
		Else
			lnTop  = loCoordinates.Top - Iif ('N' = Vartype (tnVerticalAdjustment), Sysmetric(9) + tnVerticalAdjustment, 0)
			lnLeft = loCoordinates.Left - Iif ('N' = Vartype (tnHorizontalAdjustment), tnHorizontalAdjustment, 0)
		Endif
		
		toThisForm.Top	= Max(6, Min (_Screen.Height - Sysmetric(9) - toThisForm.Height - 6, lnTop))
		toThisForm.Left	= Max(6, Min (_Screen.Width - toThisForm.Width - 6, lnLeft))
		
	ENDPROC

	PROCEDURE Init
		Lparameters txThisForm
		
		Local lcFileName, lcHome7, lcNew, lcOld, lcSettingsFileName, lcToolFolder, lnI, loThisForm
		
		If Pcount() = 0
			Return
		EndIf
		
		lcToolFolder = Execscript(_Screen.cThorDispatcher, 'Tool Folder=')
		
		If 'O' = Vartype(m.txThisForm)
			loThisForm = m.txThisForm
			If Upper(m.loThisForm.BaseClass) = Upper('form')
				lcFileName = Sys(1271, m.loThisForm)
			Else
				lcFileName = m.loThisForm.FileName
				If Not(':' $ m.lcFileName Or '\' $ m.lcFileName)
					lcFileName = Forcepath(m.lcFileName, Home(7))
				Endif
			Endif
			lcFileName = Addbs(Justpath(m.lcFileName)) + Juststem(m.lcFileName) + '.Settings.dbf'
		Else
			If not Empty(txThisForm)
				lcFileName = Forcepath(m.txThisForm, m.lcToolFolder + ccMyTools)
			Else
				Return
			EndIf 
		Endif
		
		lcFileName = Forceext(m.lcFileName, 'DBF')
		* -----------------------------------------------------------
		* hullabaloo moving old style settings files to Settings folder
		lcSettingsFileName = Forcepath(m.lcFileName, m.lcToolFolder + ccMySettings)
		lcSettingsFileName = Strtran(m.lcSettingsFileName, '.Settings', '-Settings')
		If File(m.lcFileName) And Not File(m.lcSettingsFileName)
			For lnI = 1 To Adir(laFiles, Forceext(m.lcFileName, '.???'), '', 1)
				lcOld = Forcepath(laFiles[m.lnI, 1], Justpath(m.lcFileName))
				lcNew = Forcepath(Strtran(laFiles[m.lnI, 1], '.Settings', '-Settings', 1, 1, 1), m.lcToolFolder + ccMySettings)
				Rename [&lcOld] To [&lcNew]
			Endfor
		Endif
		
		If Execscript(_Screen.cThorDispatcher, 'Get Option=', 'Settings in Home(7)', 'Thor')
			lcHome7 = Addbs(Home(7)) + 'Thor Settings'
			If Not Directory(m.lcHome7)
				Mkdir (m.lcHome7)
			Endif
			lcSettingsFileName = Forcepath(m.lcSettingsFileName, m.lcHome7)
		Endif
		
		* -----------------------------------------------------------
		This.SetResourceFile(m.lcSettingsFileName, .T.)
		This.LoadValues('PREFW', 'FORM')
		
		This.PropertiesList = '|'
		
	ENDPROC

	PROCEDURE restore
		Lparameters toThisForm, tcPropertylist
		
		Local laProperties[1], lcName, lnCount, lnI
		lnCount = Alines (laProperties, Evl (tcPropertylist, 'top,left,height,width'), 5, ',')
		For lnI = 1 To lnCount
			lcName = Lower (laProperties (lnI))
			If Pemstatus (toThisForm, lcName, 5)
				This.PropertiesList = '|' + lcName + Strtran (This.PropertiesList, '|' + lcName + '|', '|') 
				If Pemstatus (This, '_' + lcName, 5)
					AddProperty (toThisForm, lcName, GetPem(This, '_' + lcName)) 
				Endif
			Endif
		EndFor
		
	ENDPROC

	PROCEDURE save
		Lparameters toThisForm
		
		Local laProperties[1], lcName, lnCount, lnI
		lnCount = Alines (laProperties, This.PropertiesList, 5, '|')
		For lnI = 1 To lnCount
			lcName = Lower (laProperties (lnI))
			If Pemstatus (toThisForm, lcName, 5)
				AddProperty (This, '_' + lcName, Getpem (toThisForm, lcName))
			Endif
		Endfor
		
		This.SaveValues()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS thor_resource AS parameterx OF "thor_foxresource.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: closeresource
		*m: copysettings
		*m: createresourcefile
		*m: loadvalues		&& Occurs just before an object is created.
		*m: openresource
		*m: readme
		*m: release		&& Releases a FormSet or Form from memory.
		*m: resetdefaults
		*m: restorecopiedsettings
		*m: savevalues
		*m: setresourcefile
		*m: usedefaults
		*p: cxid
		*p: cxname
		*p: cxresourcefile
		*p: cxresourcetype
		*p: ocopiedsettings
		*p: oprefs
	*</DefinedPropArrayMethod>

	*<PropValue>
		cxid = 
		cxname = 
		cxresourcefile = 
		cxresourcetype = PREFW
		Name = "thor_resource"
		ocopiedsettings = .NULL.
		_memberdata = <VFPData>
			<memberdata name="oprefs" display="oPrefs"/>
			<memberdata name="setresourcefile" display="SetResourceFile"/>
			<memberdata name="odefaults" display="oDefaults"/>
			<memberdata name="cxid" display="cxID"/>
			<memberdata name="cxname" display="cxName"/>
			<memberdata name="cxresourcefile" display="cxResourceFile"/>
			<memberdata name="cxresourcetype" display="cxResourceType"/>
			<memberdata name="createresourcefile" display="CreateResourceFile"/>
			<memberdata name="loadvalues" display="LoadValues"/>
			<memberdata name="savevalues" display="SaveValues"/>
			<memberdata name="usedefaults" display="UseDefaults"/>
			<memberdata name="readme" display="Readme"/>
			<memberdata name="release" display="Release"/>
			<memberdata name="ocopiedsettings" display="oCopiedSettings"/>
			<memberdata name="closeresource" display="CloseResource"/>
			<memberdata name="copysettings" display="CopySettings"/>
			<memberdata name="openresource" display="OpenResource"/>
			<memberdata name="resetdefaults" display="ResetDefaults"/>
			<memberdata name="restorecopiedsettings" display="RestoreCopiedSettings"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE closeresource
		Lparameters llPack
		
		Local lnSelect
		
		If Used("FoxResource")
			lnSelect = Select()
			If llPack
				Select FoxResource
				Try	
					Use (Dbf()) Exclusive Alias FoxResource
					Pack
				Catch
		
				Endtry
			Endif
			If Used("FoxResource")
				Use In FoxResource
			EndIf
			
			Select(lnSelect)
		Endif
		
	ENDPROC

	PROCEDURE copysettings
		Local laMembers(1), lcMember, lxValue, lnI
		
		With This
			.oCopiedSettings = Createobject('Empty')
		
			Amembers (laMembers, This, 3, 'PHG#')
			For m.lnI = 1 To Alen (laMembers, 1)
				If laMembers (lnI, 2) = 'P' And Not 'I' $ laMembers (lnI, 5)
					lcMember = laMembers (lnI, 1)
					lxValue	 = Getpem (This, lcMember)
					AddProperty(.oCopiedSettings, lcMember, lxValue)
				Endif
			Endfor
		Endwith
		
		
		
	ENDPROC

	PROCEDURE createresourcefile
		Lparameters tcFileName
		
		This.CloseResource()
		
		Create Table (tcFileName) Free (  ;
			  Type          C (12),       ;
			  Id            C (12),       ;
			  Name          M,            ;
			  ReadOnly      L,            ;
			  ckval         N (6),        ;
			  Data          M,            ;
			  Updated       D             ;
			  )
		Use
		
		This.cxResourceFile	 = Fullpath (tcFileName)
		
	ENDPROC

	PROCEDURE Destroy
		Local lcTalk
		lcTalk = Set('Talk')
		Set Talk Off
		
		This.Release()
		
		Set Talk &lcTalk
		
	ENDPROC

	PROCEDURE Init
		If Set ('RESOURCE') == 'ON'
			This.SetResourceFile (Sys(2005))
		Else
			This.SetResourceFile ('')
		Endif
		
		
	ENDPROC

	PROCEDURE loadvalues		&& Occurs just before an object is created.
		Lparameters cxID, cxName
		
		Local lcType, lnCnt, lnI, lnSelect
		
		If This.OpenResource()
		
			m.cxID	 = Evl (m.cxID, '')
			m.cxName = Evl (m.cxName, '')
		
			With This
				.cxID	= cxID
				.cxName	= cxName
			Endwith
		
			m.lnSelect = Select()
		
			m.lcType = Padr (This.cxResourceType, Len (FoxResource.Type))
			m.cxID	 = Padr (m.cxID, Len (FoxResource.Id))
		
			Select FoxResource
			Locate For ;
				Upper(Type) == Upper(m.lcType) 		;
				And Upper(Id) == Upper(m.cxID)		;
				And Upper(Name) == Upper(m.cxName)
			If Found() And Not Empty (Data) And ckval == Val (Sys(2007, Data))
				Restore From Memo Data Additive
				If Vartype (aOptions[1, 1]) == 'C'
					m.lnCnt = Alen (aOptions, 1)
					For m.lnI = 1 To m.lnCnt
						Try
							This.AddProperty (aOptions[m.lnI, 1], aOptions[m.lnI, 2])
						Catch
		
						Endtry
					Endfor
				Endif
			Endif
		
			This.CloseResource()
		
			Select (m.lnSelect)
		Endif
	ENDPROC

	PROCEDURE openresource
		If Not Used ('FoxResource')
			If File (This.cxResourceFile)
				Try
					Use (This.cxResourceFile) Alias FoxResource In 0 Shared Again
				Catch
				Endtry
			Endif
		Endif
		Return Used ('FoxResource')
		
	ENDPROC

	PROCEDURE readme
		#If .F.
		
		(1) Setup (and possibly create) Resource file:
		        This.SetResourceFile (lcFileName, CreateIfMissingFlag)
		        
		(2) Set up default values (optional step):
		        This.UseDefaults()
		
		        This.oDefaults.Property1 = SomeValue
		        This.oDefaults.Property2 = SomeValue
		            etc
		         
		(3) Read current settings from the resource file
		        This.LoadValues(cKey1, cKey2)
		           cKey1 and cKey2 allow for multiple resource settings on the same file. Records found
		           will match both keys.  If either is not supplied, '' is used.
		
		(4) Read Values:
		        ? This.Property1
		    Returns:                          
		        the value of the property, if it has been set
		        else, the value of the saved property
		        else, the default value for the property
		        else, .null.
		        
		(5) Assign Values:
		        This.SomeProperty = SomeValue           
		       
		(6) Save results back to Resource File
		        This.SaveValues()
		        
		        
		Notes:
		(A)  Assign .Null. to a value resets it to default
		(B)  If step 2 is not used, any properties created (step (5)) will be saved
		(C)  If default values are used, only properties that have defaults will be saved.
		
		#Endif
	ENDPROC

	PROCEDURE release		&& Releases a FormSet or Form from memory.
		Local laMembers(1), lcMember
		Amembers (laMembers, This, 0)
		For Each lcMember In laMembers
			lcMember = Upper (lcMember)
			If lcMember = 'O' And Pemstatus(This, lcMember, 4) And 'O' = Vartype (Getpem (This, lcMember))
				This.&lcMember. = .Null.
			Endif
		Endfor
		
	ENDPROC

	PROCEDURE resetdefaults
		Lparameters llRemoveAll
		
		Local laMembers(1), lcMember, lxDefault, lxValue, lnI
		
		If 'O' # Vartype (This.oDefaults)
			Return
		Endif
		
		Amembers (laMembers, This, 3, 'PHG#')
		
		For m.lnI = 1 To Alen (laMembers, 1)
			If laMembers (lnI, 2) = 'P' And Not 'I' $ laMembers (lnI, 5)
				lcMember = laMembers (lnI, 1)
				If llRemoveAll
					Removeproperty(This, lcMember)
				Else
					lxValue	 = Getpem (This, lcMember)
					If Pemstatus (This.oDefaults, lcMember, 5) And Upper(lcMember) # 'ODEFAULTS'
						lxDefault = Getpem (This.oDefaults, lcMember)
						This.AddProperty(lcMember, lxDefault)
					Endif
				Endif
			Endif
		Endfor
		
	ENDPROC

	PROCEDURE restorecopiedsettings
		Local laMembers(1), lcMember, lxValue, lnI
		
		With This
			Amembers (laMembers, This, 3, 'PHG#')
			For m.lnI = 1 To Alen (laMembers, 1)
				If laMembers (lnI, 2) = 'P' And Not 'I' $ laMembers (lnI, 5)
					lcMember = laMembers (lnI, 1)
					If Pemstatus(.oCopiedSettings, lcMember, 5)
						lxValue	 = Getpem (.oCopiedSettings, lcMember)
						This.AddProperty(lcMember, lxValue)
					Else
						Removeproperty(This, lcMember)
					Endif
				Endif
			Endfor
		Endwith
		
	ENDPROC

	PROCEDURE savevalues
		Lparameters cxID, cxName
		
		Local laMembers[1], lcMember, lcType, llAddIt, lnI, lnRow, lnSelect, lxDefault, lxValue
		Local aOptions[1]
		
		If This.OpenResource()
		
			m.cxID	 = Evl (m.cxID, This.cxID)
			m.cxName = Evl (m.cxName, This.cxName)
		
			m.lnSelect = Select()
		
			m.lcType = Padr (This.cxResourceType, Len (FoxResource.Type))
			m.cxID	 = Padr (m.cxID, Len (FoxResource.Id))
		
			Select FoxResource
			Locate For ;
				Upper(Type) == Upper(m.lcType) 		;
				And Upper(Id) == Upper(m.cxID)		;
				And Upper(Name) == Upper(m.cxName)
			If Not Found()
				Append Blank In FoxResource
				Replace								;
					Type	  With	m.lcType,		;
					Name	  With	m.cxName,		;
					Id		  With	m.cxID,			;
					ReadOnly  With	.F.				;
					In FoxResource
			Endif
		
			Amembers (laMembers, This, 3, 'PHG#')
			lnRow = 0
			Dimension aOptions[1, 2]
			aOptions(1, 1) = 'A'
		
			For m.lnI = 1 To Alen (laMembers, 1)
				If laMembers (lnI, 2) = 'P' And Not 'I' $ laMembers (lnI, 5) 
					lcMember = laMembers (lnI, 1)
					lxValue	 = Getpem (This, lcMember)
					Do Case
						Case Upper(lcMember) = 'ODEFAULTS'
							llAddIt = .F.
						Case 'O' = Vartype (lxValue)
							llAddIt = .F.
						Case Isnull (lxValue)
							llAddIt = .F.
						Case 'O' = Vartype (This.oDefaults)
							If Pemstatus (This.oDefaults, lcMember, 5)
								lxDefault = Getpem (This.oDefaults, lcMember)
								llAddIt = (Vartype(lxValue) # Vartype(lxDefault)) Or Not lxValue == lxDefault
							Else
								llAddIt = .F.
							Endif
						Otherwise
							llAddIt = .T.
					Endcase
		
					If llAddIt
						lnRow = lnRow + 1
						Dimension aOptions[lnRow, 2]
						aOptions[m.lnRow, 1] = lcMember
						aOptions[m.lnRow, 2] = lxValue
					Endif
		
				Endif
			Endfor
			Save To Memo Data All Like aOptions
		
			Replace															;
				Updated	 With  Date(),									;
				ckval	 With  Val (Sys(2007, FoxResource.Data))		;
				In FoxResource
		
			This.CloseResource (.T.)
		
			Select (m.lnSelect)
		Endif
		
	ENDPROC

	PROCEDURE setresourcefile
		Lparameters lcResourceFile, llCreateIfMissing
		
		If llCreateIfMissing And Not File (lcResourceFile)
			This.CreateResourceFile (lcResourceFile)
		Else
			This.cxResourceFile = lcResourceFile
		Endif
	ENDPROC

	PROCEDURE usedefaults
		This.oDefaults = Newobject ('ParameterX', 'PEME_FoxResource.VCX')
		
	ENDPROC

ENDDEFINE
