*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thor_ui.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS edittoolbutton AS basecommandbutton OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*p: cprgname		&& The PRGname of the tool
	*</DefinedPropArrayMethod>

	*<PropValue>
		Caption = "\<Documentation and Settings"
		cprgname = 
		Name = "edittoolbutton"
		Width = 180
	*</PropValue>
	
	PROCEDURE Click
		Thisform.EditTool(This.cPRGName)
		
	ENDPROC

	PROCEDURE Init
		This.Caption = ccEDIT_TOOL
		dodefault()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS filtercontrols AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFilter" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*p: ctarget		&& The object containing cToolFilter
	*</DefinedPropArrayMethod>

	*<PropValue>
		ctarget = 
		Height = 23
		Name = "filtercontrols"
		Width = 228
		_memberdata = <VFPData>
			<memberdata name="ctarget" display="cTarget"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'lblFilter' AS baselabel WITH ;
		Caption = "Tool filter", ;
		Left = 0, ;
		Name = "lblFilter", ;
		Top = 4
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'txtFilter' AS basetextbox WITH ;
		Height = 24, ;
		Left = 60, ;
		Name = "txtFilter", ;
		Top = 0, ;
		Width = 167
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE lblFilter.Init
		This.Caption = ccFILTER
		dodefault()
		
	ENDPROC

	PROCEDURE txtFilter.LostFocus
		local loObject
		loObject = evaluate(This.Parent.cTarget)
		with loObject
			.cToolFilter = trim(This.Value)
			Thisform.lRefreshTools = .T.
			.Refresh()
			Thisform.lRefreshTools = .F.
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS formruntool AS baseform OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1.cntFrame" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1.cntFrame.Frame" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1.cntFrame.Frame.basepage1.Selecttoolforlauncher1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1.cntFrame.Frame.basepage1.Selecttoolforlauncher1.Basecheckbox2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1.cntFrame.Frame.Basepage2.edtNoneFound" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1.cntFrame.Frame.Basepage2.oTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1.cntFrame.Frame.Basepage3.Selecttoolforlauncher1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1.cntFrame.Frame.Basepage3.Selecttoolforlauncher1.Basecheckbox2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1.cntFrame.cmdRight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1.cntFrame.cmdLeft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oImageList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Basecheckbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRefresh" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: addpemeditortools
		*m: assignallhotkeys
		*m: createtoolbar
		*m: edittool		&& Edits the specified tool
		*m: gethotkeydescription
		*m: help
		*m: loadtree		&& Loads the TreeView
		*m: notthorinternalmenu
		*m: refreshtools		&& Refreshes the tools
		*m: runthor		&& Runs Thor to update the hotkeys and menus
		*m: runtool
		*m: setfontsize
		*m: setpage
		*p: cthorfolder
		*p: lfavoritesonly
		*p: lopeningform
		*p: lrefreshcustomtooltreeview
		*p: lrefreshselecttooltreeview
		*p: lrefreshtools		&& Flags that we're refreshing tools
		*p: lreopen
		*p: lsearchtoolnamesonly
		*p: nfontsize
		*p: noptionssplitterleft
		*p: nsplitterposition
		*p: oselecttool
		*p: othor		&& A reference to a Thor_Engine object
		*p: otools		&& A reference to a collection of tools
	*</DefinedPropArrayMethod>

	*<PropValue>
		AutoCenter = .F.
		BindControls = .F.
		Caption = "Run Tool"
		cfoxuserid = ThorRunTool
		cfoxusername = ThorRunTool
		cthorfolder = 
		DataSession = 2
		DoCreate = .T.
		Height = 300
		Icon = thor16.ico
		ldockable = .T.
		Left = 0
		lfavoritesonly = .F.
		lopeningform = .T.
		lrefreshcustomtooltreeview = .F.
		lrefreshselecttooltreeview = .F.
		lrefreshtools = .F.
		lreopen = .F.
		lsearchtoolnamesonly = .F.
		MinHeight = 100
		MinWidth = 100
		Name = "formruntool"
		nfontsize = 9
		noptionssplitterleft = 0
		nsplitterposition = -1
		oselecttool = .NULL.
		othor = .NULL.
		otools = .NULL.
		Top = 1
		Visible = .T.
		Width = 644
		_memberdata = <VFPData>
			<memberdata name="otools" display="oTools"/>
			<memberdata name="opentables" display="OpenTables"/>
			<memberdata name="ctablesfolder" display="cTablesFolder"/>
			<memberdata name="othor" display="oThor"/>
			<memberdata name="refreshtools" display="RefreshTools"/>
			<memberdata name="lrefreshtools" display="lRefreshTools"/>
			<memberdata name="cthorfolder" display="cThorFolder"/>
			<memberdata name="runthor" display="RunThor"/>
			<memberdata name="edittool" display="EditTool"/>
			<memberdata name="setfontsize" display="SetFontSize"/>
			<memberdata name="lrefreshselecttooltreeview" display="lRefreshSelectToolTreeView"/>
			<memberdata name="help" display="Help"/>
			<memberdata name="oselecttool" display="oSelectTool"/>
			<memberdata name="gethotkeydescription" display="GetHotKeyDescription"/>
			<memberdata name="addpemeditortools" display="AddPEMEditorTools"/>
			<memberdata name="loadtree" display="LoadTree"/>
			<memberdata name="nfontsize" display="nFontSize"/>
			<memberdata name="notthorinternalmenu" display="NotThorInternalMenu"/>
			<memberdata name="noptionssplitterleft" display="nOptionsSplitterLeft"/>
			<memberdata name="runtool" display="RunTool"/>
			<memberdata name="lreopen" display="lReOpen"/>
			<memberdata name="nsplitterposition" display="nSplitterPosition"/>
			<memberdata name="lopeningform" display="lOpeningForm"/>
			<memberdata name="lrefreshcustomtooltreeview" display="lRefreshCustomToolTreeView"/>
			<memberdata name="setpage" display="SetPage"/>
			<memberdata name="lsearchtoolnamesonly" display="lSearchToolNamesOnly"/>
			<memberdata name="lfavoritesonly" display="lFavoritesOnly"/>
			<memberdata name="createtoolbar" display="CreateToolBar"/>
			<memberdata name="assignallhotkeys" display="AssignAllHotKeys"/>
		</VFPData>
		cmdEscape.Name = "cmdEscape"
	*</PropValue>

	ADD OBJECT 'Basecheckbox1' AS basecheckbox WITH ;
		Alignment = 0, ;
		Anchor = 4, ;
		Caption = "Re-open form after executing tool", ;
		ControlSource = "Thisform.lReOpen", ;
		Left = 42, ;
		Name = "Basecheckbox1", ;
		TabIndex = 4, ;
		Top = 278
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdRefresh' AS basecommandbutton WITH ;
		Anchor = 4, ;
		Caption = "", ;
		Left = 12, ;
		Name = "cmdRefresh", ;
		Picture = refresh2.bmp, ;
		TabIndex = 2, ;
		Top = 275, ;
		Width = 23
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblVersion' AS baselabel WITH ;
		Alignment = 1, ;
		Anchor = 12, ;
		Caption = "Version", ;
		Left = 587, ;
		Name = "lblVersion", ;
		TabIndex = 3, ;
		Top = 278
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'oImageList' AS olecontrol WITH ;
		Height = 26, ;
		Left = 488, ;
		Name = "oImageList", ;
		Top = 92, ;
		Width = 36
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFCZNPy21dkBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////vjfyQskYXREbFqAMDwKDYoIUM0EggAAADtAwAA7QMAAIB+4eYAAAYAIAAAAAAAAADAwMAA//9MAAHvzasAAAUAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAUAD/////BQAAgIzpGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	ADD OBJECT 'Toolkeys1' AS toolkeysbase WITH ;
		BackColor = 255,255,255, ;
		BackStyle = 1, ;
		Height = 261, ;
		Left = 6, ;
		Name = "Toolkeys1", ;
		TabIndex = 1, ;
		Top = 6, ;
		cmdCreateTool.Left = 331, ;
		cmdCreateTool.Name = "cmdCreateTool", ;
		cmdCreateTool.Top = 273, ;
		cmdCreateTool.Visible = .F., ;
		cmdCreateTool.ZOrderSet = 1, ;
		cmdOpenToolFolder.Left = 464, ;
		cmdOpenToolFolder.Name = "cmdOpenToolFolder", ;
		cmdOpenToolFolder.Top = 273, ;
		cmdOpenToolFolder.Visible = .F., ;
		cmdOpenToolFolder.ZOrderSet = 2, ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT1.Name = "GRIPPERDOT1", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT1.SHAPEDARK.Name = "SHAPEDARK", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT1.SHAPELIGHT.Name = "SHAPELIGHT", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT1.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT2.Name = "GRIPPERDOT2", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT2.SHAPEDARK.Name = "SHAPEDARK", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT2.SHAPELIGHT.Name = "SHAPELIGHT", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT2.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT3.Name = "GRIPPERDOT3", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT3.SHAPEDARK.Name = "SHAPEDARK", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT3.SHAPELIGHT.Name = "SHAPELIGHT", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT3.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT4.Name = "GRIPPERDOT4", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT4.SHAPEDARK.Name = "SHAPEDARK", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT4.SHAPELIGHT.Name = "SHAPELIGHT", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT4.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT5.Name = "GRIPPERDOT5", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT5.SHAPEDARK.Name = "SHAPEDARK", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT5.SHAPELIGHT.Name = "SHAPELIGHT", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT5.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		THOR_SFSPLITTERH1.GRIPPER.Name = "GRIPPER", ;
		THOR_SFSPLITTERH1.Name = "THOR_SFSPLITTERH1", ;
		THOR_SFSPLITTERH1.nobject1minsize = 100, ;
		THOR_SFSPLITTERH1.nobject2minsize = 100, ;
		THOR_SFSPLITTERH1.ZOrderSet = 3, ;
		cntToolInfo.chkFavorite.Alignment = 0, ;
		cntToolInfo.chkFavorite.Name = "chkFavorite", ;
		cntToolInfo.chkStartup.Alignment = 0, ;
		cntToolInfo.chkStartup.Name = "chkStartup", ;
		cntToolInfo.chkToolBar.Alignment = 0, ;
		cntToolInfo.chkToolBar.Name = "chkToolBar", ;
		cntToolInfo.cmdEditTool.Name = "cmdEditTool", ;
		cntToolInfo.cmdRemoveTool.Name = "cmdRemoveTool", ;
		cntToolInfo.cmdToolBarIcon.Name = "cmdToolBarIcon", ;
		cntToolInfo.Edittoolbutton1.Name = "Edittoolbutton1", ;
		cntToolInfo.Height = 260, ;
		cntToolInfo.Name = "cntToolInfo", ;
		cntToolInfo.oHotKeyControls.CMDCLEAR.Name = "CMDCLEAR", ;
		cntToolInfo.oHotKeyControls.cmdGetHotKey.Name = "cmdGetHotKey", ;
		cntToolInfo.oHotKeyControls.LBLHOTKEY.Name = "LBLHOTKEY", ;
		cntToolInfo.oHotKeyControls.Name = "oHotKeyControls", ;
		cntToolInfo.oHotKeyControls.txtHotKey.Name = "txtHotKey", ;
		cntToolInfo.oToolInfo.edtToolInfo.Height = 159, ;
		cntToolInfo.oToolInfo.edtToolInfo.Name = "edtToolInfo", ;
		cntToolInfo.oToolInfo.edtToolInfo.Width = 339, ;
		cntToolInfo.oToolInfo.Height = 177, ;
		cntToolInfo.oToolInfo.lblLink.Name = "lblLink", ;
		cntToolInfo.oToolInfo.lblOptions.Name = "lblOptions", ;
		cntToolInfo.oToolInfo.lblPlugIns.Name = "lblPlugIns", ;
		cntToolInfo.oToolInfo.lblVideo.Name = "lblVideo", ;
		cntToolInfo.oToolInfo.Name = "oToolInfo", ;
		cntToolInfo.oToolInfo.Width = 340, ;
		cntToolInfo.Top = 0, ;
		cntToolInfo.ZOrderSet = 0
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'Toolkeys1.cntFrame' AS basecontainer WITH ;
		Anchor = 15, ;
		Height = 261, ;
		Left = 0, ;
		Name = "cntFrame", ;
		Top = 0, ;
		Width = 268
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Toolkeys1.cntFrame.cmdLeft' AS basecommandbutton WITH ;
		Anchor = 8, ;
		Caption = "", ;
		Height = 21, ;
		Left = 237, ;
		Name = "cmdLeft", ;
		Picture = thor_left_arrow.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 3, ;
		Top = 2, ;
		Width = 23
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Toolkeys1.cntFrame.cmdRight' AS basecommandbutton WITH ;
		Anchor = 8, ;
		Caption = "", ;
		Height = 21, ;
		Left = 237, ;
		Name = "cmdRight", ;
		Picture = thor_right_arrow.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 2, ;
		Top = 2, ;
		Width = 23
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Toolkeys1.cntFrame.Frame' AS basepageframe WITH ;
		Anchor = 15, ;
		ErasePage = .T., ;
		Height = 261, ;
		Left = 0, ;
		Name = "Frame", ;
		PageCount = 3, ;
		TabIndex = 1, ;
		Top = 0, ;
		Visible = .T., ;
		Width = 268, ;
		basepage1.Caption = "System List", ;
		basepage1.Name = "basepage1", ;
		basepage1.PageOrder = 1, ;
		Basepage2.Caption = "Custom List", ;
		Basepage2.Name = "Basepage2", ;
		Basepage2.PageOrder = 3, ;
		Basepage3.Caption = "Favorites", ;
		Basepage3.Name = "Basepage3", ;
		Basepage3.PageOrder = 2
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="pageframe" />

	ADD OBJECT 'Toolkeys1.cntFrame.Frame.basepage1.Selecttoolforlauncher1' AS selecttoolforlauncher WITH ;
		Height = 230, ;
		Left = 0, ;
		Name = "Selecttoolforlauncher1", ;
		Top = 0, ;
		Visible = .T., ;
		Width = 265, ;
		txtcNewFilter.Name = "txtcNewFilter", ;
		txtcNewFilter.TabIndex = 1, ;
		txtcNewFilter.Width = 193, ;
		Baselabel1.Left = 7, ;
		Baselabel1.Name = "Baselabel1", ;
		Baselabel1.TabIndex = 3, ;
		Baselabel1.Top = 5, ;
		oTree.Height = 182, ;
		oTree.Left = 1, ;
		oTree.Name = "oTree", ;
		oTree.TabIndex = 2, ;
		oTree.Top = 48, ;
		oTree.Width = 261
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'Toolkeys1.cntFrame.Frame.basepage1.Selecttoolforlauncher1.Basecheckbox2' AS basecheckbox WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		Caption = "Search tool names only", ;
		ControlSource = "Thisform.lSearchToolNamesOnly", ;
		Left = 47, ;
		Name = "Basecheckbox2", ;
		TabIndex = 4, ;
		Top = 28
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Toolkeys1.cntFrame.Frame.Basepage2.edtNoneFound' AS baseeditbox WITH ;
		Anchor = 15, ;
		Height = 232, ;
		Left = 0, ;
		Name = "edtNoneFound", ;
		ReadOnly = .T., ;
		Top = 0, ;
		Visible = .F., ;
		Width = 264
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'Toolkeys1.cntFrame.Frame.Basepage2.oTree' AS basetree WITH ;
		Anchor = 15, ;
		Height = 229, ;
		Left = 0, ;
		Name = "oTree", ;
		Top = 0, ;
		Visible = .T., ;
		Width = 264, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAwLvy21dkBAwAAAIABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwkEHHiYXREbFqAMDwKDYoIUM0EggAAABJGwAAqxcAALE8wWoBAAYAIgAAAJ0AAAAJAQAACAAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAEAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAABAACADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAkQAoAAABMaW5lU3R5bGUACQAAAEkKAAAAAAAFAFDjGQAGAAAAAAAAAAUAAIAU4xkAAQAAAFwAH97svQEABQBc4xkAAAAGAAAAAAAAAAAAAADbIQrrAAAAAAEAAAABAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQABANSV0AAAAAAAKwAwAXUACADQAhUA0AIVAAAAkgW+MIF8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE8ARQBcAFQATQBBAFMAXwBPAEUASABvAA==" />

	ADD OBJECT 'Toolkeys1.cntFrame.Frame.Basepage3.Selecttoolforlauncher1' AS selecttoolforlauncher WITH ;
		Height = 230, ;
		Left = 0, ;
		Name = "Selecttoolforlauncher1", ;
		Top = 0, ;
		Visible = .T., ;
		Width = 265, ;
		txtcNewFilter.Name = "txtcNewFilter", ;
		txtcNewFilter.TabIndex = 1, ;
		txtcNewFilter.Width = 193, ;
		Baselabel1.Left = 7, ;
		Baselabel1.Name = "Baselabel1", ;
		Baselabel1.TabIndex = 3, ;
		Baselabel1.Top = 5, ;
		oTree.Height = 182, ;
		oTree.Left = 1, ;
		oTree.Name = "oTree", ;
		oTree.TabIndex = 2, ;
		oTree.Top = 48, ;
		oTree.Width = 261
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'Toolkeys1.cntFrame.Frame.Basepage3.Selecttoolforlauncher1.Basecheckbox2' AS basecheckbox WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		Caption = "Search tool names only", ;
		ControlSource = "Thisform.lSearchToolNamesOnly", ;
		Left = 47, ;
		Name = "Basecheckbox2", ;
		TabIndex = 4, ;
		Top = 28
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />
	
	PROCEDURE addpemeditortools
		Lparameters toTree, lcParentKey, lnMenuID, raTools, lcFilter
		
		Local laMenuTools[1], lcHotKey, lcKey, lcKeystroke, lcMenuStatusBar, lcPRGName, lcPrompt
		Local lcStatusBar, llSeparator, lnHotKeyID, lnI, lnID, lnIndex, lnSubMenuID, loNode
		
		Select  MenuTools.Prompt					   ;
			  , Separator							   ;
			  , SubMenuID							   ;
			  , PRGName								   ;
			  , MenuTools.Id						   ;
			  , MenuDefinitions.HotKeyID			   ;
			From MenuTools							   ;
				Left Join MenuDefinitions			   ;
					On SubMenuID = MenuDefinitions.Id  ;
			Where MenuID = lnMenuID					   ;
			Order By MenuTools.sortorder			   ;
			Into Array laMenuTools
		
		For lnI = 1 To _Tally
			lcPrompt	= Alltrim (laMenuTools (lnI, 1))
			llSeparator	= laMenuTools (lnI, 2)
			lnSubMenuID	= laMenuTools (lnI, 3)
			lcPRGName	= Alltrim (laMenuTools (lnI, 4))
			lnID		= laMenuTools (lnI, 5)
			lnHotKeyID	= laMenuTools (lnI, 6)
		
			Do Case
				Case llSeparator
					*	loNode	   = toTree.Nodes.Add (lcParentKey, 4, lcParentKey + '\' + Str (lnID), Replicate('-', 30))
				Case lnSubMenuID # 0
					lcKey	 = lcParentKey + '\' + Chrtran (lcPrompt, '/\', '__')
					lcHotKey = Thisform.GetHotKeyDescription (lnHotKeyID)
					loNode	 = toTree.Nodes.Add (lcParentKey, 4, lcKey,	 ;
						  lcPrompt  + Iif (Empty (lcHotKey), '', ' (' + lcHotKey + ')'), ccIMAGE_MENU)
					This.AddPEMEditorTools (toTree, lcKey, lnSubMenuID, @raTools, lcFilter)
					loNode.Expanded = Not Empty (lcFilter)
				Otherwise
					If Empty (lcFilter) Or 0 # Ascan (raTools, lcPRGName, 6, -1, -1, 15)
						lcKey	= lcParentKey + '\' + Str (lnID)
						= Seek (Upper (lcPRGName), 'ToolHotKeyAssignments', 'PRGName')
						lcHotKey = Thisform.GetHotKeyDescription (ToolHotKeyAssignments.HotKeyID)
						loNode	= toTree.Nodes.Add (lcParentKey, 4, lcKey,	;
							  lcPrompt + Iif (Empty (lcHotKey), '', ' (' + lcHotKey + ')'), ccIMAGE_TOOL)
						lnIndex	= Thisform.oTools.GetKey (Upper (lcPRGName))
						If lnIndex > 0
							loNode.Tag = Thisform.oTools (lnIndex)
						Endif
					Endif
			Endcase
		Endfor
		
		If  toTree.Nodes (lcParentKey).Children = 0
			toTree.Nodes.Remove (lcParentKey)
		Endif
		
	ENDPROC

	PROCEDURE assignallhotkeys
		*==============================================================================
		* Method:			RunThor
		* Purpose:			Runs Thor to update the hotkeys and menus
		* Author:			Doug Hennig
		* Last revision:	04/09/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	This.cThorFolder contains the Thor folder
		* Environment out:	Thor_Run has been instantiated and its Run method called
		*==============================================================================
		
		local lcApp, ;
			lcFolder, ;
			loRunThor
		lcApp	  = This.cThorFolder + 'Thor.App'
		lcFolder  = This.cThorFolder + 'Thor\'
		loRunThor = newobject ('Thor_Run', 'thor_run.vcx', '', lcApp, lcFolder)
		loRunThor.AddProperty('cApplication', lcApp)
		loRunThor.AssignAllHotKeys()
		
	ENDPROC

	PROCEDURE createtoolbar
		*==============================================================================
		* Method:			RunThor
		* Purpose:			Runs Thor to update the hotkeys and menus
		* Author:			Doug Hennig
		* Last revision:	04/09/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	This.cThorFolder contains the Thor folder
		* Environment out:	Thor_Run has been instantiated and its Run method called
		*==============================================================================
		
		local lcApp, ;
			lcFolder, ;
			loRunThor
		lcApp	  = This.cThorFolder + 'Thor.App'
		lcFolder  = This.cThorFolder + 'Thor\'
		loRunThor = newobject ('Thor_Run', 'thor_run.vcx', '', lcApp, lcFolder)
		loRunThor.AddProperty('cApplication', lcApp)
		loRunThor.CreateToolBar()
		
	ENDPROC

	PROCEDURE Destroy
		* Run Thor to update all hotkeys and menus.
		
		_Screen.oThorRunTool = .Null.
		This.oSelectTool	 = .Null.
		
		* Close all tables.
		
		Close Tables All
		DoDefault()
		
	ENDPROC

	PROCEDURE edittool		&& Edits the specified tool
		*==============================================================================
		* Method:			EditTool
		* Purpose:			Edits the specified tool
		* Author:			Doug Hennig
		* Last revision:	04/23/2011
		* Parameters:		tcPRGName - the name of the PRG to edit
		* Returns:			none
		* Environment in:	This.oThor contains a reference to a ThorEngine object
		* Environment out:	if the PRG is found, it's opened in an editor window
		*==============================================================================
		
		Lparameters tcPRGName
		Local lcFile, loPEME_Tools
		lcFile = This.oThor.FindFile (tcPRGName)
		If Empty (lcFile)
			Messagebox (Strtran (ccCANT_FIND, '%1', tcPRGName), MB_OK + MB_ICONSTOP,  ;
				  ccTHOR_CAPTION)
		Else
			Execscript (_Screen.cThorDispatcher, 'Thor_Proc_EditProc', lcFile)
		Endif Empty (lcFile)
		
	ENDPROC

	PROCEDURE gethotkeydescription
		Lparameters tnHotKeyID
		
		If Seek (tnHotKeyID, 'HotKeyDefinitions', 'ID')
			Return Trim (HotKeyDefinitions.Descript)
		Else
			Return ''
		Endif
		
	ENDPROC

	PROCEDURE help
		Local loLink
		loLink = Newobject('_ShellExecute', Home() + 'FFC\_Environ.vcx')
		loLink.ShellExecute(ThorHelpURL)
		
	ENDPROC

	PROCEDURE Init
		Lparameters tcThorFolder
		With This
		
			With This.oImageList
				.ListImages.Add(1, ccIMAGE_MENU,  LoadPicture ('Menus.ico'))
				.ListImages.Add(2, ccIMAGE_TOOL,  LoadPicture ('Programs.ico'))
				.ListImages.Add(3, ccIMAGE_POPUP, LoadPicture ('Popup.ico'))
			Endwith
		
			* Create a Thor_Engine object and open its tables.
		
			.oThor = Newobject ('Thor_Engine', 'Thor.vcx', '', tcThorFolder + 'Thor\')
			.oThor.OpenTables()
		
			* Set the caption.
		
			.lblVersion.Caption	= ccTHORVERSION
			*!* * Removed 6/10/2012 / JRN
			*!* .lblFolder.Caption	= Lower (tcThorFolder)
		
			* Save the passed parameters.
		
			.oTools		 = .oThor.GetToolsCollection (tcThorFolder + 'Thor\Tools\')
			.cThorFolder = tcThorFolder
		
			* Don't allow the form to be sized smaller than the default.
		
			*!* * Removed 6/11/2012 / JRN
			*!* .MinHeight = .Height
			*!* .MinWidth  = .Width
		
			* Activate the first page so the TreeView loads.
			.nFontSize = .oThor.GetOption ('LauncherFontSize')
			.SetFontSize (.nFontSize)
		
			.BindControls = .T.
		
		Endwith
		DoDefault()
		
		This.Refresh()
		
	ENDPROC

	PROCEDURE loadtree		&& Loads the TreeView
		Lparameters toTree, tcFilter
		
		Local laPrev[1], laThis[1], laTools[1], lcCategory, lcFilter, lcHotKey, lcKey, lcPRGName
		Local lcParentKey, lcPrev, lcPreviousCategory, lcPrompt, lcSortKey, lcSource, lcSubCategory, lcThis
		Local lnI, lnJ, lnK, lnMax1, lnMax2, lnPersonalBackColor, lnPersonalForeColor, lnPrivateBackColor
		Local lnPrivateForeColor, lnSort, lnStart, lnToolCount, loNode, loTool, loTools
		
		lcFilter = Chrtran(tcFilter, ',.;:', '    ')
		toTree.Nodes.Clear()
		loTools		= Thisform.oTools
		lnToolCount	= 0
		
		lnPrivateBackColor = Nvl(This.oThor.GetOption ('PrivateBackColor'), cnDefaultPrivateBackColor)
		lnPrivateForeColor = Nvl(This.oThor.GetOption ('PrivateForeColor'), cnDefaultPrivateForeColor)
		
		lnPersonalBackColor	= Nvl(This.oThor.GetOption ('PersonalBackColor'), cnDefaultPersonalBackColor)
		lnPersonalForeColor	= Nvl(This.oThor.GetOption ('PersonalForeColor'), cnDefaultPersonalForeColor)
		
		For lnI = 1 To loTools.Count
			loTool		  = loTools.Item(lnI)
			lcSource	  = Evl(Trim(loTool.Source), '(No Source)')
			lcCategory	  = Evl(Trim(loTool.Category), lcSource)
			lcSubCategory = Trim(loTool.SubCategory)
			lnSort		  = Evl(loTool.Sort, 9999)
			lcSortKey	  = loTool.InternalSort
			lcPRGName	  = loTool.PRGName
		
			If FilterTool (lcFilter, loTool)
				If (Thisform.lFavoritesOnly = .F.) Or		;
						(Seek (Upper (lcPRGName), 'Favorites', 'PRGName') And Favorites.startup)
					lnToolCount = lnToolCount + 1
					Dimension laTools(lnToolCount, 6)
					laTools(lnToolCount, 1)	= lnI
					laTools(lnToolCount, 2)	= lcSource
					laTools(lnToolCount, 3)	= lcCategory
					laTools(lnToolCount, 4)	= lcSubCategory
					laTools(lnToolCount, 5)	= lcSortKey
					laTools(lnToolCount, 6)	= lcPRGName
				Endif
			Endif
		Endfor
		
		If lnToolCount > 0
			Asort(laTools, 5)
			lcPreviousCategory = ''
		
			For lnI = 1 To lnToolCount
		
				loTool	   = loTools.Item(laTools(lnI, 1))
				lcSource   = laTools(lnI, 2)
				lcCategory = laTools(lnI, 3)
		
				*!* * Removed 2/3/2012
				*!* If lcSource == 'Thor'
				*!* 	Loop
				*!* Endif
		
				If Not lcCategory == lcPreviousCategory
					lnMax1 = Alines(laPrev, lcPreviousCategory, 5, '|')
					lnMax2 = Alines(laThis, lcCategory, 5, '|')
					If lnI = 1
						lnJ = 1
					Else
						lnStart	= 1 + Min(lnMax1, lnMax2)
						lcKey	= ''
						For lnJ = 1 To Min(lnMax1, lnMax2)
							lcPrev = laPrev[lnJ]
							lcThis = laThis[lnJ]
							If Not Upper(lcPrev) == Upper(lcThis)
								lnStart = lnJ
								Exit
							Endif
							lcKey = Upper(lcKey + Iif(lnJ > 1, '\', '') + lcThis)
						Endfor
					Endif
					For lnK = lnJ To lnMax2
						If lnK = 1
							lcKey			= Upper(laThis[1])
							loNode			= toTree.Nodes.Add(, 1, lcKey, laThis[1], ccIMAGE_MENU)
							loNode.Expanded	= .T.
							loNode.Bold		= .T.
						Else
							lcParentKey		= Upper(lcKey)
							lcKey			= Upper(lcParentKey + '\' + Chrtran(laThis[lnK], '.,;\/', '-----'))
							loNode			= toTree.Nodes.Add(lcParentKey, 4, lcKey, laThis[lnK], ccIMAGE_MENU)
							loNode.Expanded	= Thisform.lFavoritesOnly Or Not Empty(lcFilter)
						Endif
					Endfor
				Endif
		
				lcPrompt  = loTool.Prompt
				lcPRGName = loTool.PRGName
				= Seek(Upper(lcPRGName), 'ToolHotKeyAssignments', 'PRGName')
				lcHotKey = Thisform.GetHotKeyDescription(ToolHotKeyAssignments.HotKeyID)
				loNode	   = toTree.Nodes.Add(lcKey, 4, lcKey + '\' + lcPRGName			;
					  , lcPrompt + Iif(Empty(lcHotKey), '', ' (' + lcHotKey + ')'),  ccIMAGE_TOOL)
				Do Case
					Case loTool.PrivateCopy = 1
						loNode.ForeColor = m.lnPersonalForeColor
						loNode.BackColor = m.lnPersonalBackColor
					Case loTool.PrivateCopy = -1
						loNode.ForeColor = m.lnPrivateForeColor
						loNode.BackColor = m.lnPrivateBackColor
				Endcase
				loNode.Tag		 = loTool
		
				lcPreviousCategory = lcCategory
		
			Endfor && lnI = 1 To lnToolCount
		
		Else
		
			lcKey			 = 'No matches found'
			loNode			 = toTree.Nodes.Add(, 1, lcKey, lcKey, ccIMAGE_MENU)
			loNode.Bold		 = .T.
			loNode.ForeColor = Rgb(255, 0, 0)
		
		Endif
		
	ENDPROC

	PROCEDURE notthorinternalmenu
		Do Case
			Case Trim (MenuDefinitions.PopupName) == 'Thor_Internal'
				Return .F.
			Case Trim (MenuDefinitions.PopupName) == ccRunAllTools
				Return .F.
			Otherwise
				Return .T.
		Endcase
	ENDPROC

	PROCEDURE refreshtools		&& Refreshes the tools
		*==============================================================================
		* Method:			RefreshTools
		* Purpose:			Refreshes the tools
		* Author:			Doug Hennig
		* Last revision:	03/31/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	This.oTools.Tag contains the tools folder
		* Environment out:	the tools collection has been recreated and controls on the
		*						form refreshed
		*==============================================================================
		
		with This
			.oTools = .oThor.GetToolsCollection(.oTools.Tag)
			.lRefreshTools = .T.
		
			.lRefreshSelectToolTreeView = .T.
			.lRefreshCustomToolTreeView = .T.
		
			.Refresh()
			.lRefreshTools = .F.
			*!* * Removed 6/22/2012 / JRN
			*!* messagebox(ccTOOLS_REFRESHED, MB_OK, ccTHOR_CAPTION)
		endwith
		
	ENDPROC

	PROCEDURE restoresettings
		DoDefault()
		
		* Restore saved settings from FOXUSER.
		
		With This
			.lReopen							 = Nvl(.oPersist.Get('ReopenAfterExecuting'), .F.)
			.lSearchToolNamesOnly				 = Nvl(.oPersist.Get('ToolNamesOnly'), .F.)
			.nSplitterPosition					 = Nvl(.oPersist.Get('SplitterPosition'), -1)
			.Toolkeys1.cntFrame.Frame.ActivePage = Nvl(.oPersist.Get('StartPage'), 1)
		Endwith
		
	ENDPROC

	PROCEDURE runthor		&& Runs Thor to update the hotkeys and menus
		*==============================================================================
		* Method:			RunThor
		* Purpose:			Runs Thor to update the hotkeys and menus
		* Author:			Doug Hennig
		* Last revision:	04/09/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	This.cThorFolder contains the Thor folder
		* Environment out:	Thor_Run has been instantiated and its Run method called
		*==============================================================================
		
		local lcApp, ;
			lcFolder, ;
			loRunThor
		lcApp	  = This.cThorFolder + 'Thor.App'
		lcFolder  = This.cThorFolder + 'Thor\'
		loRunThor = newobject ('Thor_Run', 'thor_run.vcx', '', lcApp, lcFolder)
		loRunThor.AddProperty('cApplication', lcApp)
		loRunThor.Run(.T.) && but no startups
		
		*!* * Removed 9/12/2012 / JRN
		*!* * Display a message if we're supposed to.
		
		*!* if This.oThor.GetOption('UpdateMessage')
		*!* 	messagebox (ccRUN_THOR_DONE, MB_OK, ccTHOR_CAPTION, 3000)
		*!* endif This.oThor.GetOption('UpdateMessage')
		
	ENDPROC

	PROCEDURE runtool
		Lparameters lcPRGName
		
		Local lnDataSession, lnDockPosition, lnHeight, lnLeft, lnTop, lnWidth
		lnDataSession = Set('Datasession')
		Set DataSession To 1
		
		lnDockPosition = Thisform.DockPosition
		
		lnTop	 = Thisform.Top
		lnLeft	 = Thisform.Left
		lnHeight = Thisform.Height
		lnWidth	 = Thisform.Width
		
		Thisform.Hide()
		Do(m.lcPRGName)
		Set DataSession To(m.lnDataSession)
		
		If Thisform.lReOpen
			Thisform.LockScreen = .T.
		
			Thisform.Show()
			If m.lnDockPosition # Thisform.DockPosition
				Thisform.Dock(m.lnDockPosition)
			Endif
		
			Thisform.Top	= m.lnTop
			Thisform.Left	= m.lnLeft
			Thisform.Height	= m.lnHeight
			Thisform.Width	= m.lnWidth
		
			Thisform.LockScreen = .F.
		Else
		
			* following is necessary if form is dockable; the values for Top and Left get hosed
			* so we persist the real values now and not these bad values
			Thisform.oPersist.Set('Dockable',    Thisform.Dockable)
			Thisform.oPersist.Set('Top',    m.lnTop)
			Thisform.oPersist.Set('Left',   m.lnLeft)
			Thisform.oPersist.Set('Height', m.lnHeight)
			Thisform.oPersist.Set('Width',  m.lnWidth)
			Thisform.lPersistSizePosition = .F.
		
			Thisform.Release()
		Endif
		
		
	ENDPROC

	PROCEDURE savesettings
		With This
		
			.oPersist.Set ('ReopenAfterExecuting', .lReopen)
			.oPersist.Set ('ToolNamesOnly', .lSearchToolNamesOnly)
			.oPersist.Set ('SplitterPosition', .toolkeys1.thor_sfsplitterh1.Left) 
			.oPersist.Set ('StartPage', .Toolkeys1.cntFrame.Frame.ActivePage) 
		
		Endwith
		
		DoDefault()
		
	ENDPROC

	PROCEDURE setfontsize
		Lparameters tnFontSize
		
		Local lnFontsize
		lnFontsize = Nvl (tnFontSize, 8)
		With This
			.FontSize = lnFontsize
			.SetAll ('FontSize', lnFontsize)
			This.Toolkeys1.cntFrame.Frame.basepage1.Selecttoolforlauncher1.oTree.Font.Size  = lnFontsize
		Endwith
		
	ENDPROC

	PROCEDURE setpage
		Lparameters lnPage
		This.Toolkeys1.cntFrame.Frame.Activepage = lnPage
	ENDPROC

	PROCEDURE cmdRefresh.Click
		Thisform.RefreshTools()
		Thisform.RunThor()
		
		
	ENDPROC

	PROCEDURE cmdRefresh.Init
		This.ToolTipText = ccTOOL_TOOLTIP
		DoDefault()
		
	ENDPROC

	PROCEDURE lblVersion.Move
		LPARAMETERS nLeft, nTop, nWidth, nHeight
		
		This.Visible = This.Left > 450
		
		
		
	ENDPROC

	PROCEDURE lblVersion.Refresh
		This.Visible = This.Left > 350
		
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.cmdLeft.Click
		Thisform.ResizeForm(.T.)
		Thisform.Refresh()
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.cmdLeft.Init
		This.ToolTipText = 'Shrink form, hiding all the controls on the right'
		DoDefault()
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.cmdLeft.Refresh
		This.Visible = Not Thisform.lHideRightSide
		
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.cmdRight.Click
		Thisform.ResizeForm(.F.)
		Thisform.Refresh()
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.cmdRight.Init
		This.ToolTipText = 'Expand form, revealing all the controls on the right'
		DoDefault()
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.cmdRight.Refresh
		This.Visible = Thisform.lHideRightSide
		
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.basepage1.Activate
		Thisform.lFavoritesOnly = .F.
		This.Parent.Parent.Parent.cntToolInfo.Visible = .F.
		
		DoDefault()
		If Thisform.lOpeningForm
			Thisform.lOpeningForm  = .F.
			With This.selecttoolforlauncher1.txtcNewFilter
				.SetFocus()
				Keyboard '{CTRL+A}' 
			Endwith
		Endif
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.basepage1.Selecttoolforlauncher1.Basecheckbox2.Valid
		This.Parent.ReLoadTree()
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.basepage1.Selecttoolforlauncher1.selectitem
		*==============================================================================
		* Method:			SelectItem
		* Purpose:			Selects the specified item in the ListView
		* Author:			Doug Hennig
		* Last revision:	03/31/2011
		* Parameters:		tuItem - a node or a node key
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		Lparameters tuItem
		
		Local lcPRGName, loItem
		loItem = tuItem.Tag
		With This.Parent.Parent.Parent.Parent
			.SelectItem (loItem)
		Endwith
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage2.Activate
		This.Parent.Parent.Parent.cntToolInfo.Visible = .F.
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage2.edtNoneFound.Init
		TEXT to This.Value Noshow
		Use this custom list as a single place for all the tools you have found useful.
		
		Your list is now empty.
		
		To add tools to this list, open the Thor Configuration form and create one or more popup menus (or use existing menus).
		
		Mark the checkbox "Show in Launcher" for each of these popup menus.
		
		Then add the tools that you find of interest to the popup menus. You can add sub-menus, if you like, and order the tools in whatever way makes sense to you.
		
		NOTE: You can also access these popup menus by using hot keys. Assign a hot key to them in the right hand panel of the configuration form, below the checkbox.
		ENDTEXT
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage2.oTree.DblClick
		* If the selected item is a tool, run it on a double-click.
		
		If (Not Empty (This.Parent.Parent.Parent.Parent.cPRGName)) and not Thisform.lHideRightSide
			Thisform.RunTool (This.Parent.Parent.Parent.Parent.oTool.FullFileName)
		Endif
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage2.oTree.getitemkey
		*==============================================================================
		* Method:			GetItemKey
		* Purpose:			Gets the item key from the specified node key
		* Author:			Doug Hennig
		* Last revision:	03/19/2011
		* Parameters:		toNode - the node to get the item key from
		* Returns:			the item key
		* Environment in:	none
		* Environment out:	none
		* Note:				Keys are stored as a path. For example, for the Display UI
		*						item (tool ID 4) in the Thor submenu (menu ID 8) of the
		*						Tools menu (menu ID 6), the key is VFP\M6\M8\T4. This
		*						method returns T4 in that case
		*==============================================================================
		
		lparameters toNode
		
		If 'O' # Vartype(toNode)
			Return ''
		EndIf
		
		lcKey = toNode.Key
		lnPos = rat(ccKEY_SEPARATOR, lcKey)
		if lnPos > 0
			lcKey = substr(lcKey, lnPos + 1)
		endif lnPos > 0
		return lcKey
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage2.oTree.loadchildnodes
		*==============================================================================
		* Method:			LoadChildNodes
		* Purpose:			Loads the submenus of the specified menu
		* Author:			Doug Hennig
		* Last revision:	03/24/2011
		* Parameters:		tnID - the ID for the menu item to load submenus for
		* Returns:			none
		* Environment in:	MenuTools is open and is ordered by SortOrder
		* Environment out:	nodes for the submenus and tools have been loaded into the
		*						TreeView
		*==============================================================================
		
		lparameters tnID, ;
			tcParentKey
		Local  ;
			loNode AS Object	,;
			loTag AS Object
		Local lcPrompt, lnRecno, lnSelect 
		lnSelect = select()
		select MenuTools
		scan for MenuID = tnID
			do case
				case SubMenuID = 0
		
		* This is a tool or separator, so add it under the menu.
		
					if Separator
						lcPrompt = ccSEPARATOR_PROMPT
					else
						If not Empty(PRGName)
							lcPrompt = trim(Prompt)
							Try
								loTag = Thisform.oTools(Upper(Alltrim(PRGName)))
							Catch
								loTag = ''
							EndTry 
						Else
							lcPrompt = ccNoToolSelected
							loTag = ''
						EndIf
						= seek(upper(PRGName), 'ToolHotKeyAssignments', 'PRGName')
						if seek(ToolHotKeyAssignments.HotKeyID, 'HotKeyDefinitions', 'ID')
							lcPrompt = lcPrompt + ' (' + ;
								trim(HotKeyDefinitions.Descript) + ')'
						EndIf 
					endif Separator
					loNode = This.LoadNode(tcParentKey, lcPrompt, ccIMAGE_TOOL, ID)
					loNode.Tag = loTag
		
		* If this is a submenu, find the menu's record, add a node under the menu we're
		* we're working on, and process all child nodes.
		
				case seek(MenuTools.SubMenuID, 'MenuDefinitions', 'ID')
					= seek(MenuTools.SubMenuID, 'MenuDefinitions', 'ID')
					lcPrompt = trim(MenuDefinitions.Prompt)
					if seek(MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
						lcPrompt = lcPrompt + ' (' + ;
							trim(HotKeyDefinitions.Descript) + ')'
					endif seek(MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
					loNode  = This.LoadNode(tcParentKey, lcPrompt, ;
						ccIMAGE_MENU, SubMenuID)
					loNode.Expanded = .T.
					lnRecno = recno()
					This.LoadChildNodes(SubMenuID, loNode.Key)
					go lnRecno
			endcase
		endscan for MenuID = tnID
		select (lnSelect)
		return
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage2.oTree.loadnode
		*==============================================================================
		* Method:			LoadNode
		* Purpose:			Loads a node in the TreeView
		* Author:			Doug Hennig
		* Last revision:	03/19/2011
		* Parameters:		tcParentKey - the key of the parent node to add this under
		*					tcPrompt    - the text for the node
		*					tcIcon      - the icon for the node
		*					tnID        - the ID of the record the node represents
		* Returns:			a reference to the node
		* Environment in:	none
		* Environment out:	a node was added to the TreeView
		*==============================================================================
		
		lparameters tcParentKey, ;
			tcPrompt, ;
			tcIcon, ;
			tnID
		local lcKey, ;
			loNode
		lcKey  = tcParentKey + ccKEY_SEPARATOR + left(tcIcon, 1) + transform(tnID)
		loNode = This.Nodes.Add(tcParentKey, cnCHILD_NODE, lcKey, Strtran(tcPrompt, '\<', ''), ;
			tcIcon)
		return loNode
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage2.oTree.loadtree
		*==============================================================================
		* Method:			LoadTree
		* Purpose:			Loads the TreeView control with menus and the tools in them
		* Author:			Doug Hennig
		* Last revision:	03/20/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	MenuDefinitions and MenuTools are open
		* Environment out:	MenuDefinitions and MenuTools are both ordered on SortOrder
		*					the TreeView is loaded with menu and tool nodes
		*==============================================================================
		
		Lparameters tlReload
		Local lcPrompt, lnRecno, lnRecno1, lnRecno2, lnSortOrder, loNode, loTree
		With This
			loTree = This
			loTree.Nodes.Clear()
		
			* If we're reloading the TreeView, preserve the expanded status of nodes and
			* the selected node, then clear the TreeView.
		
			If tlReload
				loTree.SaveExpandedNodes()
				lnRecno1 = Recno ('MenuDefinitions')
				lnRecno2 = Recno ('MenuTools')
			Endif tlReload
		
			* Go through the defined menus and add them and their tools to the TreeView.
		
			Set Order To SortOrder In MenuTools
			* First, correct existing SortOrder in MenuDefinitions
			* (there may be holes, or duplicates)
			Select MenuDefinitions
			Set Order To
			Replace All SortOrder With SortOrder + 1000 For TopLevel
			Set Order To SortOrder
			lnSortOrder = 0
			Scan For TopLevel
				lnSortOrder = lnSortOrder + 1
				Replace SortOrder With lnSortOrder
			Endscan
		
			Select * From MenuDefinitions;
				where Launcher And Not Internal;
				order By Prompt;
				into Cursor cursor_MenuDefinitions
		
			Scan
				lcPrompt = Trim (Prompt)
				If Seek (MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
					lcPrompt = lcPrompt + ' (' +		;
						Trim (HotKeyDefinitions.Descript) + ')'
				Endif Seek (MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
		
				loNode = loTree.Nodes.Add (, 0, 'M' + Transform (Recno()), lcPrompt,		;
					ccIMAGE_MENU)
				loNode.Expanded = .T.
				loNode.Bold = .T.
				lnRecno = Recno()
				.LoadChildNodes (Id, loNode.Key)
			Endscan
		
			Use In cursor_MenuDefinitions
		
			* If we reloaded the TreeView, reexpanded formerly expanded nodes, reselect the
			* former node, and restore the saved record pointers. Otherwise, select the
			* first node.
		
			If tlReload
				loNode = loTree.RestoreExpandedNodes()
				If Vartype (loNode) = 'O'
					.Selectitem (loNode)
				Endif
				If Between (lnRecno1, 1, Reccount ('MenuDefinitions'))
					Go lnRecno1 In MenuDefinitions
				Endif Between (lnRecno1 ...
				If Between (lnRecno2, 1, Reccount ('MenuTools'))
					Go lnRecno2 In MenuTools
				Endif Between (lnRecno2...
			Else
				*!* * Removed 6/21/2012 / JRN
				*!* .SelectItem(loTree.Nodes(1))
			Endif tlReload
		Endwith
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage2.oTree.NodeClick
		Lparameters Node
		
		Local loItem
		
		loItem = Node.Tag
		With This.Parent.Parent.Parent.Parent
			.SelectItem (loItem)
		Endwith
		
		If (Not Empty (This.Parent.Parent.Parent.Parent.cPRGName)) And Thisform.lHideRightSide
			Thisform.RunTool (This.Parent.Parent.Parent.Parent.oTool.FullFileName)
		Endif
		
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage2.oTree.Refresh
		Local llShowTreeView
		If Thisform.oTools.Count # 0 And Thisform.lRefreshCustomToolTreeView
			This.LoadTree()
			Thisform.lRefreshCustomToolTreeView = .F.
		
			llShowTreeView					 = This.Nodes.Count # 0
			This.Visible					 = Not llShowTreeView
			This.Visible					 = llShowTreeView
			This.Parent.edtNoneFound.Visible = Not llShowTreeView
		Endif
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage2.oTree.UIEnable
		Lparameters tlEnable
		If tlEnable And This.Nodes.Count = 0
			This.Object.ImageList = Thisform.oImageList
			This.LoadTree()
		Endif tlEnable ...
		
		This.Font.Size = Thisform.FontSize
		
		If This.Nodes.Count # 0
			This.Visible					 = Not tlEnable
			This.Visible					 = tlEnable
			This.Parent.edtNoneFound.Visible = .F.
		Else
			This.Visible					 = .T.
			This.Visible					 = .F.
			This.Parent.edtNoneFound.Visible = .T.
		Endif
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage3.Activate
		Thisform.lFavoritesOnly = .T.
		This.Parent.Parent.Parent.cntToolInfo.Visible = .F.
		
		DoDefault()
		If Thisform.lOpeningForm
			Thisform.lOpeningForm  = .F.
			With This.selecttoolforlauncher1.txtcNewFilter
				.SetFocus()
				Keyboard '{CTRL+A}' 
			Endwith
		Endif
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage3.Selecttoolforlauncher1.Basecheckbox2.Valid
		This.Parent.ReLoadTree()
		
	ENDPROC

	PROCEDURE Toolkeys1.cntFrame.Frame.Basepage3.Selecttoolforlauncher1.selectitem
		*==============================================================================
		* Method:			SelectItem
		* Purpose:			Selects the specified item in the ListView
		* Author:			Doug Hennig
		* Last revision:	03/31/2011
		* Parameters:		tuItem - a node or a node key
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		Lparameters tuItem
		
		Local lcPRGName, loItem
		loItem = tuItem.Tag
		With This.Parent.Parent.Parent.Parent
			.SelectItem (loItem)
		Endwith
		
	ENDPROC

	PROCEDURE Toolkeys1.cntToolInfo.cmdToolBarIcon.Click
		DoDefault()
		ThisForm.CreateToolBar()
		
	ENDPROC

	PROCEDURE Toolkeys1.cntToolInfo.cmdToolBarIcon.RightClick
		DoDefault()
		ThisForm.CreateToolBar()
		
	ENDPROC

	PROCEDURE Toolkeys1.cntToolInfo.oHotKeyControls.CMDCLEAR.Click
		DoDefault()
		Thisform.AssignAllHotKeys()
		
	ENDPROC

	PROCEDURE Toolkeys1.cntToolInfo.oHotKeyControls.cmdGetHotKey.Click
		DoDefault()
		Thisform.AssignAllHotKeys()
		
	ENDPROC

	PROCEDURE Toolkeys1.THOR_SFSPLITTERH1.movesplittertoposition
		Lparameters tnPosition
		
		DoDefault (tnPosition)
		Thisform.nSplitterPosition = tnPosition
	ENDPROC

	PROCEDURE Toolkeys1.THOR_SFSPLITTERH1.Refresh
		*!* * Removed 6/26/2012 / JRN
		*!* If Thisform.nSplitterPosition # This.Left And Thisform.nSplitterPosition >= 0
		*!* 	This.MoveSplitterToPosition (Thisform.nSplitterPosition)
		*!* Endif
		
	ENDPROC

ENDDEFINE

DEFINE CLASS hotkeycontrols AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdGetHotKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHotKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtHotKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClear" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: cancelhotkey		&& Cancels the hotkey waiting
		*m: clearhotkey		&& Clears the current hotkey
		*m: keypressed		&& Called when the user presses a hotkey
		*m: onclearhotkey		&& Called when the hotkey is cleared
		*m: onkeypressed		&& Called from KeyPressed so an instance can do the appropriate thing
		*m: onpreupdate		&& Called from KeyPressed before updating the HotKeyID field
		*m: starthotkey		&& Starts the process of getting a hot key
		*p: calias		&& The alias HotKeyID is in
		*p: chotkeydescription		&& The description for the selected hot key
		*p: csavedmacrosfile
		*p: lonkeylabelonly
		*p: lrefreshform
		*p: ninkey
		*p: oeventhandler		&& A reference to a IDEWindowsEvents object
		*p: oform		&& A reference to the PressKeyPrompt form
	*</DefinedPropArrayMethod>

	*<PropValue>
		calias = 
		chotkeydescription = 
		csavedmacrosfile = 
		Height = 25
		lonkeylabelonly = .F.
		lrefreshform = .F.
		Name = "hotkeycontrols"
		ninkey = 0
		oeventhandler = .NULL.
		oform = .NULL.
		Width = 236
		_memberdata = <VFPData>
			<memberdata name="ninkey" display="nInKey"/>
			<memberdata name="lonkeylabelonly" display="lOnKeyLabelOnly"/>
			<memberdata name="lrefreshform" display="lRefreshForm"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdClear' AS basecommandbutton WITH ;
		Caption = "Clear", ;
		Height = 24, ;
		Left = 191, ;
		Name = "cmdClear", ;
		TabIndex = 7, ;
		Top = 0, ;
		Width = 43
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGetHotKey' AS basecommandbutton WITH ;
		Caption = "...", ;
		Height = 24, ;
		Left = 165, ;
		Name = "cmdGetHotKey", ;
		TabIndex = 7, ;
		Top = 0, ;
		Width = 24
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblHotKey' AS baselabel WITH ;
		Caption = "\<Hot key", ;
		Left = 0, ;
		Name = "lblHotKey", ;
		TabIndex = 5, ;
		Top = 5
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'txtHotKey' AS basetextbox WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Height = 22, ;
		Left = 65, ;
		Name = "txtHotKey", ;
		TabIndex = 6, ;
		Top = 1, ;
		Width = 98
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE cancelhotkey		&& Cancels the hotkey waiting
		*!* * Removed 06/17/2011 
		*!* *==============================================================================
		*!* * Method:			CancelHotKey
		*!* * Purpose:			Cancels the hotkey waiting
		*!* * Author:			Doug Hennig
		*!* * Last revision:	04/12/2011
		*!* * Parameters:		none
		*!* * Returns:			none
		*!* * Environment in:	none
		*!* * Environment out:	event binding is turned off
		*!* *					This.oEventHandler is nulled
		*!* *					if This.oForm references a form, it's released and nulled
		*!* *					hot keys are restored
		*!* *==============================================================================
		
		*!* unbindevents(0)
		 with This
		 	.oEventHandler = .NULL.
		 	if vartype(.oForm) = 'O'
		 		.oForm.Release()
		 	endif vartype(.oForm) = 'O'
		 	.oForm = .NULL.
		 endwith
		*!* pop key
		*!* restore macros from (This.cSavedMacrosFile)
		
	ENDPROC

	PROCEDURE clearhotkey		&& Clears the current hotkey
		*==============================================================================
		* Method:			ClearHotKey
		* Purpose:			Clears the current hotkey
		* Author:			Doug Hennig
		* Last revision:	05/20/2011
		* Parameters:		llNoForm
		* Returns:			none
		* Environment in:	This.cAlias contains the desired alias
		*					that table is positioned to the desired record
		* Environment out:	HotKeyID in the table specified in This.cAlias is zeroed
		*					This.cHotKeyDescription is blanked
		*					controls are refreshed
		*					see This.CancelHotKey for other changes
		*==============================================================================
		Lparameters llNoForm
		with This
			*!* * Removed 06/17/2011 
			*!* If not llNoForm
			*!* 	.CancelHotKey()
			*!* EndIf 
			replace HotKeyID with 0 in (.cAlias)
			.OnClearHotKey()
			.cHotKeyDescription = ''
			.Refresh()
		endwith
		
	ENDPROC

	PROCEDURE Init
		*!* * Removed 06/17/2011 
		*!* * Define a location to temporarily save macros.
		
		*!* This.cSavedMacrosFile = addbs(sys(2023)) + 'Macros.fky'
		
	ENDPROC

	PROCEDURE keypressed		&& Called when the user presses a hotkey
		*==============================================================================
		* Method:			KeyPressed
		* Purpose:			Called when the user presses a hotkey
		* Author:			Doug Hennig
		* Last revision:	06/17/2011 JRN
		* Parameters:		hWnd   - the hWnd of the form
		*					Msg    - the ID of the Windows message
		*					wParam - the scancode of the key pressed
		*					lParam - modifiers for the keypress (see WM_KEYDOWN in MSDN
		*						for details)
		* Returns:			none
		* Environment in:	HotKeyDefinitions is open
		* Environment out:	if the user pressed a valid hotkey and it isn't already
		*						used by another record, a record for it is added to
		*						HotKeyDefinitions (if there isn't already one), the
		*						HotKeyID field in the tables specified in This.cAlias
		*						is updated, OnKeyPressed is called so an instance can
		*						do the appropriate thing, and controls are refreshed
		*					see This.CancelHotKey for other changes
		*==============================================================================
		
		* Create a HotKey object, set nScanCode to the scan code for the key the user
		* pressed, get the current state of the modifier keys, and see if we have a
		* valid hotkey.
		
		Local loKey As 'HotKey' Of 'Thor_Utils.vcx'
		Local lcAlias, lcDescrip, lcFkyValue, lcHotKeyDescription, lcThorKey, llFound, lnHotKeyID, lnID
		Local lnRecno, lnScanCode, lnSelect, lnShift, lnShifts
		
		loKey = Newobject ('HotKey', 'Thor_Utils.vcx')
		loKey.GetKeyState()
		lnScanCode		= loKey.GetScanCode (This.nInKey)
		loKey.nScanCode	= lnScanCode
		If loKey.IsValid(This.lOnKeyLabelOnly)
			lcDescrip = loKey.GetHotKeyDescription()
			lnShift	  = loKey.GetModifiersValue()
			
			Local lcMessage, lnResponse	
			If Indexseek(Upper(Trim(lcDescrip)) + ' ', .T., 'VFPHotKeys', 'HotKey') 
				lcMessage = 'That key conflicts with default VFP shortcut:'									;
					+ Chr[13] + Chr[13] + Trim(VFPHotKeys.HotKey) + ' - ' + Trim(VFPHotKeys.Descript)		;
					+ Chr[13] + Chr[13] + 'Assign it anyway?'
				lnResponse = Messagebox (m.lcMessage, MB_YESNOCANCEL + MB_ICONSTOP, ccTHOR_CAPTION)
				If m.lnResponse # 6
					Return
				Endif
			Endif
			
			* Find the HotKeyDefinitions record for the hotkey; add one if necessary.
		
			lnSelect = Select()
			Select HotKeyDefinitions
		
			lnShifts = loKey.GetShifts()
			Locate For nKeyCode = lnScanCode And nShifts = lnShifts
			lcFkyValue = loKey.GetKeyCode()
			If Found()
				Replace FkyValue With lcFkyValue
			Else
				lcFkyValue = loKey.GetKeyCode()
				Insert Into HotKeyDefinitions (nKeyCode, nShifts, Descript, FkyValue)		;
					Values (lnScanCode, lnShifts, lcDescrip, lcFkyValue)
			Endif Not Found()
			lnHotKeyID = Id
		
			* See if the hotkey is already in use by another record.
		
			lcAlias	= Upper (This.cAlias)
			lnID	= Evaluate (lcAlias + '.ID')
			lnRecno	= Recno (lcAlias)
			llFound = Seek (lnHotKeyID, 'MenuDefinitions', 'HotKeyID') And		;
				(lcAlias # 'MENUDEFINITIONS' Or MenuDefinitions.Id # lnID)
			llFound = llFound Or													;
				(Seek (lnHotKeyID, 'ToolHotKeyAssignments', 'HotKeyID') And			;
				  (lcAlias # 'TOOLHOTKEYASSIGNMENTS' Or								;
					ToolHotKeyAssignments.Id # lnID))
			If Between (lnRecno, 1, Reccount (lcAlias))
				Go lnRecno In (lcAlias)
			Endif Between (lnRecno, 1, Reccount (lcAlias))
			Select (lnSelect)
		
			* Make sure it's not being used by Thor itself.
		
			lcThorKey = Thisform.oThor.GetOption ('ThorHotKey')
			llFound	  = llFound Or lcThorKey = lcDescrip
			If llFound
				Messagebox (ccHOTKEY_ALREADY_USED, MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
				= Seek(0, 'HotKeyDefinitions', 'ID')
				&& find a non-existent record on purpose
		
				* Call the OnPreUpdate hook method, update the HotKeyID in the desired table,
				* refresh the controls, and call the OnKeyPressed hook method.
		
			Else
				This.OnPreUpdate()
				Replace HotKeyID With lnHotKeyID In (lcAlias)
				lcHotKeyDescription = Trim (HotKeyDefinitions.Descript)
				This.cHotKeyDescription = lcHotKeyDescription
				This.Refresh()
				This.OnKeyPressed()
			Endif llFound
		Else
		
			* Tell the user that we don't have a valid hotkey.
		
			If Not Inlist(This.nInKey, 0, 13, 27)
				Messagebox (ccINVALID_HOT_KEY, MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
			Endif
		Endif loKey.IsValid()
		
	ENDPROC

	PROCEDURE onclearhotkey		&& Called when the hotkey is cleared
		*==============================================================================
		* Method:			OnClearHotKey
		* Purpose:			Called when the hotkey is cleared
		* Author:			Doug Hennig
		* Last revision:	03/25/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		* Abstract method
		
	ENDPROC

	PROCEDURE onkeypressed		&& Called from KeyPressed so an instance can do the appropriate thing
		*==============================================================================
		* Method:			OnKeyPressed
		* Purpose:			Called from KeyPressed so an instance can do the
		*						appropriate thing
		* Author:			Doug Hennig
		* Copyright:		(c) 2011 Stonefield Systems Group Inc.
		* Last revision:	03/20/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		* Abstract method
		
	ENDPROC

	PROCEDURE onpreupdate		&& Called from KeyPressed before updating the HotKeyID field
		*==============================================================================
		* Method:			OnPreUpdate
		* Purpose:			Called from KeyPressed before updating the HotKeyID field
		* Author:			Doug Hennig
		* Last revision:	03/25/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		* Abstract method
		
	ENDPROC

	PROCEDURE Refresh
		This.txtHotKey.Value = This.cHotKeyDescription
		
	ENDPROC

	PROCEDURE starthotkey		&& Starts the process of getting a hot key
		*==============================================================================
		* Method:			StartHotKey
		* Purpose:			Starts the process of getting a hot key
		* Author:			Doug Hennig
		* Last revision:	06/19/2011 JRN
		* Parameters:		none
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		*!* * Removed 06/17/2011 
		*!* push key clear
		*!* save macros to (This.cSavedMacrosFile)
		*!* clear macros
		with This
			.nInKey = 0
			If This.lOnKeyLabelOnly 
				.oForm         = newobject('PressKeyPromptOKL',   'Thor_UI.vcx', '', ThisForm.FontSize)
			Else
				.oForm         = newobject('PressKeyPrompt',   'Thor_UI.vcx', '', ThisForm.FontSize)
			EndIf
		*!* 	.oEventHandler = newobject('IDEWindowsEvents', 'Thor_Utils.vcx')
		*!* 	bindevent(.oForm.HWnd, WM_KEYUP,    .oEventHandler, 'EventHandler')
		*!* 	bindevent(.oForm.HWnd, WM_SYSKEYUP, .oEventHandler, 'EventHandler')
		*!* 	bindevent(.oEventHandler, 'EventHandler', This, 'KeyPressed')
			.oForm.Show()
		endwith
		
		This.nInkey = Inkey(10)
		This.oForm.Release()
		If not InList(This.nInKey, 0, 13, 27)
			This.KeyPressed()
		EndIf 
		
		
	ENDPROC

	PROCEDURE cmdClear.Click
		This.Parent.ClearHotKey(.T.)
		
	ENDPROC

	PROCEDURE cmdClear.Init
		This.Caption = ccCLEAR
		dodefault()
		
	ENDPROC

	PROCEDURE cmdGetHotKey.Click
		This.Parent.StartHotKey()
		
	ENDPROC

	PROCEDURE lblHotKey.Init
		This.Caption = ccHOTKEY
		dodefault()
		
	ENDPROC

	PROCEDURE txtHotKey.Refresh
		This.Enabled = .F.
	ENDPROC

ENDDEFINE

DEFINE CLASS hotkeylist AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="gridKeys" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColHotKey.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColHotKey.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColSource.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColSource.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColDescription.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColDescription.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColVFPConflict.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColVFPConflict.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdToClipboard" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: createcursor
		*m: griddoubleclick
		*m: loadlist
		*m: setdescriptionwidth
		*m: setgridorder
		*p: ignorenextloadlist
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 15
		Height = 212
		ignorenextloadlist = .F.
		Name = "hotkeylist"
		Width = 332
		_memberdata = <VFPData>
			<memberdata name="createcursor" display="CreateCursor"/>
			<memberdata name="ignorenextloadlist" display="IgnoreNextLoadList"/>
			<memberdata name="loadlist" display="LoadList"/>
			<memberdata name="griddoubleclick" display="GridDoubleClick"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdToClipboard' AS basecommandbutton WITH ;
		Anchor = 4, ;
		AutoSize = .T., ;
		Caption = "To Clipboard", ;
		Left = 89, ;
		Name = "cmdToClipboard", ;
		TabIndex = 5, ;
		Top = 180
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'gridKeys' AS basegrid WITH ;
		Anchor = 15, ;
		ColumnCount = 4, ;
		DeleteMark = .F., ;
		GridLineColor = 192,192,192, ;
		Height = 167, ;
		Left = 6, ;
		Name = "gridKeys", ;
		ReadOnly = .T., ;
		RecordMark = .F., ;
		RecordSource = "crsr_GridKeys", ;
		Top = 6, ;
		Width = 320, ;
		Column1.ControlSource = "", ;
		Column1.DynamicFontBold = "crsr_GridKeys.Bold", ;
		Column1.DynamicForeColor = "IIF(crsr_GridKeys.Red, 255, 0)", ;
		Column1.Name = "ColHotKey", ;
		Column1.ReadOnly = .T., ;
		Column1.Width = 120, ;
		Column2.ControlSource = "", ;
		Column2.DynamicFontBold = "crsr_GridKeys.Bold", ;
		Column2.DynamicForeColor = "IIF(crsr_GridKeys.Red, 255, 0)", ;
		Column2.Name = "ColSource", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 100, ;
		Column3.ControlSource = "", ;
		Column3.DynamicBackColor = "IIF(Abs(PrivateCop) = 1, RGB(255,255,0), RGB(255,255,255))", ;
		Column3.DynamicFontBold = "crsr_GridKeys.Bold", ;
		Column3.DynamicForeColor = "IIF(crsr_GridKeys.Red or PrivateCop = -1, 255, 0)", ;
		Column3.Name = "ColDescription", ;
		Column3.ReadOnly = .T., ;
		Column4.Name = "ColVFPConflict", ;
		Column4.ReadOnly = .T.
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="grid" />

	ADD OBJECT 'gridKeys.ColDescription.Header1' AS header WITH ;
		Caption = "Description", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'gridKeys.ColDescription.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'gridKeys.ColHotKey.Header1' AS header WITH ;
		Caption = "Hot Key", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'gridKeys.ColHotKey.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'gridKeys.ColSource.Header1' AS header WITH ;
		Caption = "Source", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'gridKeys.ColSource.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'gridKeys.ColVFPConflict.Header1' AS header WITH ;
		Caption = "VFP Conflict?", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'gridKeys.ColVFPConflict.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE createcursor
		Lparameters lcCursorName
		
		Create Cursor (lcCursorName) (	;
			  HotKey 	   C (20),		;
			  Source 	   C (15),		;
			  Descript     C (200),		;
			  VFPDesc	   C(200),  	;	
			  Type         N (2),		;
			  ID		   I ,			;
			  Bold         L,			;
			  Red          L,			;
			  PrivateCop   N(4),        ;
			  nShifts      N(4),		;
			  Recno        N(4)			;
			  )
			  
		
	ENDPROC

	PROCEDURE griddoubleclick
		Local loForm As 'SetHotKeyForm' Of    'Thor_UI.vcx'
		Local lcAction, lcAlias, lnID, lnType
		
		lnType = crsr_GridKeys.Type
		lnID   = crsr_GridKeys.Id
		
		Do Case
			Case lnType = 1
				lcAlias = 'MenuDefinitions'
			Case lnType = 2
				lcAlias = 'ToolHotKeyAssignments'
			Otherwise
				Return
		Endcase
		
		If Seek (lnID, lcAlias, 'ID')
			This.IgnoreNextLoadList	= .T.
			lcAction				= 'Set'
		
			loForm		 = Newobject ('SetHotKeyForm',   'Thor_UI.vcx', '')
			loForm.oThor = Thisform.oThor
			loForm.ExecuteCommand (lcAlias, lcAction)
			loForm.Release()
			loForm = .Null.
		
			This.IgnoreNextLoadList = .F.
			This.LoadList()
		Endif
		
	ENDPROC

	PROCEDURE loadlist
		Local lcDescription, lcHotKeyDescript, lcHotKeyName, lcThorKey, llRed, lnID, lnKey, lnPrivateCopy, loItem, loKey
		Local loMacro, loMacros, loOnKeyLabels
		
		If This.IgnoreNextLoadList 
			This.IgnoreNextLoadList = .F.
			Return
		EndIf 
		
		This.CreateCursor ('crsr_Keys')
		
		* On Key Label Definitions
		loOnKeyLabels = Thisform.oThor.GetOnKeyLabelDefinitions()
		lcThorKey	  = Thisform.oThor.GetOption ('ThorHotKey')
		For Each loKey In loOnKeyLabels FoxObject
			If Upper (Trim (loKey.Key)) == Upper (Trim (lcThorKey))
				lcDescription = '<' + ccTHOR_HOT_KEY + '>'
			Else
				lcDescription  = loKey.Definition
			EndIf
			
			If lcDescription = ccOnKeyLabelPrefix
				Loop
			EndIf
			
			Insert Into crsr_Keys					 ;
				(HotKey, Source, Descript, Type)	 ;
				Values								 ;
				(loKey.Key, 'On Key Label', lcDescription, 4)
		Endfor
		
		* Pop-up Menus
		Insert Into crsr_Keys									;
			(HotKey, Source, Descript, Type, Id, Bold)		;
			Select  HotKeyDefinitions.Descript					;
				  , 'Pop-up Menu'								;
				  , Strtran (MenuDefinitions.Prompt, '\<', '')	;
				  , 1											;
				  , MenuDefinitions.Id							;
				  , .T.											;
				From MenuDefinitions							;
					Join HotKeyDefinitions						;
						On MenuDefinitions.hotkeyid  = HotKeyDefinitions.Id
		
		* HotKeys for Tools
		Select  HotKeyDefinitions.Descript	  As  HotKeyName				   ;
			  , ToolHotKeyAssignments.PrgName								   ;
			  , ToolHotKeyAssignments.Id									   ;
			From ToolHotKeyAssignments										   ;
				Join HotKeyDefinitions										   ;
					On ToolHotKeyAssignments.hotkeyid  = HotKeyDefinitions.Id  ;
			Into Cursor crsr_HotKeys
		
		Scan
			lcHotKeyName = HotKeyName
			lnKey		 = Thisform.oTools.GetKey (Upper(ForceExt(Trim (PrgName), 'PRG')))
			lnID		 = Id
			If 0 # lnKey
				lcHotKeyDescript = Thisform.oTools (lnKey).Prompt
				llRed			 = .F.
				lnPrivateCopy    = Thisform.oTools (lnKey).PrivateCopy
				Do Case
					Case lnPrivateCopy = 1
						lcHotKeyDescript = Trim(lcHotKeyDescript) + ' (private)'
					Case lnPrivateCopy = -1
						lcHotKeyDescript = Trim(lcHotKeyDescript) + ' (private, over-rides default)'
				Endcase
			Else
				lcHotKeyDescript = Trim (PrgName) + ' (not found)'
				llRed			 = .T.
				lnPrivateCopy    = -99
			Endif
		
			Insert Into crsr_Keys									;
				(HotKey, Source, Descript, Type, Id, Bold, Red, PrivateCop)	;
				Values												;
				(lcHotKeyName, 'Thor Tool', lcHotKeyDescript, 2, lnID, .T., llRed, lnPrivateCopy)
		Endscan
		
		* Macros
		loMacros = Thisform.oThor.GetMacroDefinitions()
		For Each loMacro In loMacros FoxObject
			If Lower (loMacro.Name) # 'thor:'
				Insert Into crsr_Keys					 ;
					(HotKey, Source, Descript, Type)	 ;
					Values								 ;
					(loMacro.Definition, 'Macro', loMacro.Keystrokes, 3)
			Endif
		Endfor
		
		* Sort 'em
		Select crsr_Keys
		Replace All nShifts With IIf (ccSHIFT $ HotKey, 1, 0) + IIf (ccCTRL $ HotKey, 2, 0) + IIf (ccALT $ HotKey, 4, 0)
		Update  crsr_Keys											 ;
			Set crsr_Keys.Recno = xHotKeys.Recno					 ;
			From crsr_Keys											 ;
				Join (												 ;
					  Select Key, Recno()	 As	 Recno From HotKeys	 ;
					  )						 As	 xHotKeys			 ;
					On xHotKeys.Key =								 ;
					Upper (Left (Substr (HotKey, 1 + Rat ('-', HotKey)), 10))
		
		*** JRN 2023-10-25 : Add field for possible conflicts with VFP hotkeys
		Select  crsr_Keys
		Replace all nShifts with Icase (nShifts = 4, 3, nShifts = 3, 4, nShifts) && just to get a nicer sort order
		
		Update  crsr_Keys							;
			Set VFPDesc = VFPHotKeys.Descript		;
			From crsr_Keys							;
				Join VFPHotKeys						;
					On Upper(crsr_Keys.HotKey) = Upper(VFPHotKeys.HotKey)
					
		Select crsr_GridKeys
		Delete All
		Append From Dbf ('crsr_Keys')
		Goto Top
		
		This.gridKeys.SetFocus()
		
		This.SetDescriptionWidth()
		
	ENDPROC

	PROCEDURE Resize
		This.SetDescriptionWidth()
		
	ENDPROC

	PROCEDURE setdescriptionwidth
		Local lnWidth
		
		With This.gridKeys
			lnWidth = .Width - .ColHotKey.Width - .ColSource.Width - Sysmetric(14) - 12
			
			.ColDescription.Width = m.lnWidth * 2 / 3
			.ColVFPConflict.Width = m.lnWidth * 1 / 3
		Endwith
		
		
	ENDPROC

	PROCEDURE setgridorder
		Lparameters lcOrder
		
		If Upper(lcOrder) = 'RECNO' and Order() = 'RECNO'
			Set Order to nShifts
		Else
			Set Order to &lcOrder)
		EndIf
		
		Goto top 
		This.Refresh()
	ENDPROC

	PROCEDURE cmdToClipboard.Click
		Local lnRecno, lnSelect
		lnSelect			= Select()
		
		Select  HotKey,				;
				Source,				;
				Descript			;
			From crsr_GridKeys		;
			Order By Recno			;
			Into Cursor crsr_ExportGridKeys
		
		_vfp.DataToClip('crsr_ExportGridKeys', Reccount(), 3)
		
		Select (lnSelect)
		Messagebox('Contents of grid pasted into the clipboard')
		
	ENDPROC

	PROCEDURE gridKeys.ColDescription.Header1.Click
		This.Parent.Parent.Parent.SetGridOrder('Descript')
		
	ENDPROC

	PROCEDURE gridKeys.ColHotKey.Header1.Click
		This.Parent.Parent.Parent.SetGridOrder('Recno')
		
	ENDPROC

	PROCEDURE gridKeys.ColSource.Header1.Click
		This.Parent.Parent.Parent.SetGridOrder('Source')
		
	ENDPROC

	PROCEDURE gridKeys.ColVFPConflict.Header1.Click
		This.Parent.Parent.Parent.SetGridOrder('Conflict')
	ENDPROC

	PROCEDURE gridKeys.Init
		Local lnI
		With This
		
			* Set the font.
			For lnI = 1 To .ColumnCount
				Bindevent (This.Columns (lnI).Text1, 'RightClick', This, 'RightClick')
				Bindevent (This.Columns (lnI).Text1, 'DblClick', This.Parent, 'GridDoubleClick')
			Endfor
		
			.Parent.CreateCursor ('crsr_GridKeys')
			.FontName = Thisform.FontName
			.FontSize = 8
		
			Index On (1000 * Recno) + nShifts 					Tag Recno
			Index On (1000 * nShifts) + Recno 					Tag nShifts
			Index On IIf (Bold, 'A', 'B') + Source + Descript	Tag Source
			Index On Upper (Descript)		  					Tag Descript
			Index On IIF(Empty(VFPDesc), 'B', 'A') + VFPDesc	Tag Conflict
		
			This.Parent.SetGridOrder ('Recno')
		
		Endwith
		
	ENDPROC

	PROCEDURE gridKeys.RightClick
		Local loContextMenu As 'contextmenu' Of  'Thor_menu'
		Local loForm As 'SetHotKeyForm' Of    'Thor_UI.vcx'
		Local lcAction, lcAlias, lnID, lnType
		
		lnType = crsr_GridKeys.Type
		lnID   = crsr_GridKeys.Id
		Do Case
			Case lnType = 1
				lcAlias = 'MenuDefinitions'
			Case lnType = 2
				lcAlias = 'ToolHotKeyAssignments'
			Otherwise
				Return
		Endcase
		
		If Seek (lnID, lcAlias, 'ID')
			This.Parent.IgnoreNextLoadList = .T.
			loContextMenu				   = Newobject ('contextmenu', 'Thor_menu', Thisform.cThorFolder + 'Thor.App')
		
			With loContextMenu
				.AddMenuItem ('Set hot key', , , , , 'Set')
				.AddMenuItem()
				.AddMenuItem ('Clear hot key', , , , , 'Clear')
				If .Activate()
					lcAction = .Parameters
		
					loForm		 = Newobject ('SetHotKeyForm',   'Thor_UI.vcx', '')
					loForm.oThor = Thisform.oThor
					loForm.ExecuteCommand (lcAlias, lcAction)
					loForm.Release()
					loForm = .Null.
				Endif
			Endwith
			This.Parent.IgnoreNextLoadList = .F.
			This.Parent.LoadList()
		Endif
		
	ENDPROC

ENDDEFINE

DEFINE CLASS menus AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.lblPrompt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.txtPrompt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.lblOrder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.cmdAddTopLevel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.cmdAddPopup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.lblStatusBarText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.edtStatusBarText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.oHotKeyControls" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.cmdMoveUp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.cmdMoveDown" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.cmdCopyMenu" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.cmdAddCopiedMenu" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.cmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage1.Basecheckbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.Selecttool1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.lblOrder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.lblStatusBarText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.edtStatusBarText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.cmdEditTool" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.oToolInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.cmdMoveUp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.cmdMoveDown" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.oFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.cmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.oHotKeyControls" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.Baseeditbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage2.Baselabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage3.cmdMoveUp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage3.lblOrder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage3.cmdMoveDown" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage3.oFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Basepage3.cmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAddMenu" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAddTool" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAddSubMenu" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oImageList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAddSeparator" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: addmenu		&& Adds a menu
		*m: addsubmenu		&& Adds a submenu to the selected menu
		*m: addtool		&& Adds a tool to the selected item
		*m: createtool		&& Creates a template PRG for a tool
		*m: getitemkey		&& Gets the item key from the specified node key
		*m: loadchildnodes		&& Loads the submenus of the specified menu
		*m: loadnode		&& Loads a node in the TreeView
		*m: loadtree		&& Loads the TreeView control with defined menus
		*m: moveitem		&& Moves the selected item
		*m: removemenuoritem		&& Removes the selected menu or item
		*m: selectitem		&& Called when the user selects an item in the TreeView
		*p: ctoolfilter		&& A filter for the tools list
		*p: ncopymenuid		&& The ID of a copied menu
		*p: olasttoolselected
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 15
		ctoolfilter = 
		Height = 259
		Name = "menus"
		ncopymenuid = 0
		olasttoolselected = .NULL.
		Width = 622
		_memberdata = <VFPData>
			<memberdata name="olasttoolselected" display="oLastToolSelected"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdAddMenu' AS basecommandbutton WITH ;
		Anchor = 4, ;
		AutoSize = .F., ;
		Caption = "\<Add Menu", ;
		Height = 24, ;
		Left = 0, ;
		Name = "cmdAddMenu", ;
		TabIndex = 4, ;
		Top = 235
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdAddSeparator' AS basecommandbutton WITH ;
		Anchor = 4, ;
		AutoSize = .F., ;
		Caption = "Add S\<eparator", ;
		Height = 24, ;
		Left = 281, ;
		Name = "cmdAddSeparator", ;
		TabIndex = 7, ;
		Top = 235, ;
		Width = 103
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdAddSubMenu' AS basecommandbutton WITH ;
		Anchor = 4, ;
		AutoSize = .F., ;
		Caption = "Add SubMenu", ;
		Height = 24, ;
		Left = 82, ;
		Name = "cmdAddSubMenu", ;
		TabIndex = 5, ;
		Top = 235, ;
		Width = 97
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdAddTool' AS basecommandbutton WITH ;
		Anchor = 4, ;
		AutoSize = .F., ;
		Caption = "A\<dd Tool", ;
		Height = 24, ;
		Left = 205, ;
		Name = "cmdAddTool", ;
		TabIndex = 6, ;
		Top = 235
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'oImageList' AS olecontrol WITH ;
		Height = 26, ;
		Left = 150, ;
		Name = "oImageList", ;
		Top = 0, ;
		Width = 36
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGA4zmW51dkBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////vjfyQskYXREbFqAMDwKDYoIUM0EggAAADtAwAA7QMAAIB+4eYAAAYAIAAAAAAAAADAwMAA//9MAAHvzasAAAUAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAUAD/////BQAAgIzpGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	ADD OBJECT 'oTree' AS basetree WITH ;
		Anchor = 15, ;
		Height = 230, ;
		Left = 0, ;
		Name = "oTree", ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 185
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPB1LmW51dkBAwAAAIACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAEQBAAAAAAAACAAAAAIAAAD+////BAAAAAUAAAAGAAAABwAAAAkAAAD+/////vkEHHiYXREbFqAMDwKDYoIUM0EggAAAAfEwAAxRcAALE8wWoBAAYAIgAAAD0AAAAJAQAADAAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAkQAoAAABMYWJlbEVkaXQACQAAAEkKAAAAAQAAAAoAAABMaW5lU3R5bGUACQAAAEkKAAAAAQAAAA0AAABNb3VzZVBvaW50ZXIACQAAAEkKAAAAAAAAAA4AAABQYXRoU2VwYXJhdG9yAAoAAABIAAAAAAEAAABcDAAAAE9MRURyYWdNb2RlAAkAAABJCgAAAAAAAAAMAAAAT0xFRHJvcE1vZGUACQAAAEkKAAAAAAAAAAsAAABBcHBlYXJhbmNlAAkAAABJCgAAAAAAAAAMAAAAQm9yZGVyU3R5bGUACQAAAEkKAAAAAQAAAAwAAABIb3RUcmFja2luZwAFAAAATAAABQDA1g0DAwAAAAAAAAAFAACAROkZAAEAAABcAB/e7L0BAAUAjOk

	ADD OBJECT 'pgfProperties' AS basepageframe WITH ;
		Anchor = 13, ;
		BorderWidth = 0, ;
		ErasePage = .T., ;
		Height = 232, ;
		Left = 190, ;
		Name = "pgfProperties", ;
		PageCount = 3, ;
		TabIndex = 3, ;
		Tabs = .F., ;
		Top = 0, ;
		Width = 430, ;
		Basepage1.Caption = "Menus", ;
		Basepage1.Name = "Basepage1", ;
		Basepage2.Caption = "Tools", ;
		Basepage2.Name = "Basepage2", ;
		Basepage3.Caption = "Separators", ;
		Basepage3.Name = "Basepage3"
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="pageframe" />

	ADD OBJECT 'pgfProperties.Basepage1.Basecheckbox1' AS basecheckbox WITH ;
		Alignment = 1, ;
		Caption = "Show in Launcher", ;
		Left = 5, ;
		Name = "Basecheckbox1", ;
		Top = 73, ;
		Visible = .T.
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfProperties.Basepage1.cmdAddCopiedMenu' AS basecommandbutton WITH ;
		AutoSize = .F., ;
		Caption = "Add Copied Menu", ;
		Height = 24, ;
		Left = 236, ;
		Name = "cmdAddCopiedMenu", ;
		TabIndex = 9, ;
		Top = 187, ;
		Width = 120
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage1.cmdAddPopup' AS basecommandbutton WITH ;
		AutoSize = .F., ;
		Caption = "Add as Pop\<up", ;
		Height = 24, ;
		Left = 86, ;
		Name = "cmdAddPopup", ;
		TabIndex = 10, ;
		Top = 187, ;
		Width = 120
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage1.cmdAddTopLevel' AS basecommandbutton WITH ;
		AutoSize = .F., ;
		Caption = "Add as Top Le\<vel", ;
		Height = 24, ;
		Left = 86, ;
		Name = "cmdAddTopLevel", ;
		TabIndex = 9, ;
		Top = 162, ;
		Width = 120
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage1.cmdCopyMenu' AS basecommandbutton WITH ;
		AutoSize = .F., ;
		Caption = "Copy Menu", ;
		Height = 24, ;
		Left = 236, ;
		Name = "cmdCopyMenu", ;
		TabIndex = 9, ;
		Top = 162, ;
		Width = 120
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage1.cmdMoveDown' AS basecommandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 288, ;
		Name = "cmdMoveDown", ;
		Picture = down.bmp, ;
		TabIndex = 8, ;
		Top = 109, ;
		Width = 22
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage1.cmdMoveUp' AS basecommandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 288, ;
		Name = "cmdMoveUp", ;
		Picture = up.bmp, ;
		TabIndex = 7, ;
		Top = 89, ;
		Width = 22
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage1.cmdRemove' AS basecommandbutton WITH ;
		Anchor = 0, ;
		AutoSize = .F., ;
		Caption = "\<Remove Menu", ;
		Height = 24, ;
		Left = 323, ;
		Name = "cmdRemove", ;
		TabIndex = 8, ;
		Top = 98, ;
		Width = 101
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage1.edtStatusBarText' AS baseeditbox WITH ;
		Height = 40, ;
		IntegralHeight = .F., ;
		Left = 70, ;
		Name = "edtStatusBarText", ;
		TabIndex = 4, ;
		Top = 25, ;
		Width = 355
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'pgfProperties.Basepage1.lblOrder' AS baselabel WITH ;
		Caption = "Order", ;
		Left = 248, ;
		Name = "lblOrder", ;
		TabIndex = 6, ;
		Top = 102
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Basepage1.lblPrompt' AS baselabel WITH ;
		Caption = "\<Prompt", ;
		Left = 5, ;
		Name = "lblPrompt", ;
		TabIndex = 1, ;
		Top = 3
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Basepage1.lblStatusBarText' AS baselabel WITH ;
		Caption = "\<Status bar", ;
		Left = 5, ;
		Name = "lblStatusBarText", ;
		TabIndex = 3, ;
		Top = 28
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Basepage1.oHotKeyControls' AS hotkeycontrols WITH ;
		calias = MenuDefinitions, ;
		Left = 5, ;
		Name = "oHotKeyControls", ;
		TabIndex = 5, ;
		Top = 98, ;
		cmdGetHotKey.Name = "cmdGetHotKey", ;
		lblHotKey.Name = "lblHotKey", ;
		txtHotKey.Name = "txtHotKey", ;
		cmdClear.Name = "cmdClear"
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.Basepage1.txtPrompt' AS basetextbox WITH ;
		Height = 22, ;
		Left = 70, ;
		Name = "txtPrompt", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 355
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Basepage2.Baseeditbox1' AS baseeditbox WITH ;
		Height = 40, ;
		IntegralHeight = .F., ;
		Left = 70, ;
		Name = "Baseeditbox1", ;
		TabIndex = 5, ;
		Top = 68, ;
		Width = 355, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'pgfProperties.Basepage2.Baselabel1' AS baselabel WITH ;
		Caption = "Status bar", ;
		Left = 5, ;
		Name = "Baselabel1", ;
		TabIndex = 4, ;
		Top = 71, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Basepage2.cmdEditTool' AS edittoolbutton WITH ;
		Left = 247, ;
		Name = "cmdEditTool", ;
		TabIndex = 10, ;
		Top = 114, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage2.cmdMoveDown' AS basecommandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 70, ;
		Name = "cmdMoveDown", ;
		Picture = down.bmp, ;
		TabIndex = 8, ;
		Top = 134, ;
		Width = 22, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage2.cmdMoveUp' AS basecommandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 70, ;
		Name = "cmdMoveUp", ;
		Picture = up.bmp, ;
		TabIndex = 7, ;
		Top = 113, ;
		Width = 22, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage2.cmdRemove' AS basecommandbutton WITH ;
		Anchor = 0, ;
		Caption = "\<Remove from Menu", ;
		Height = 23, ;
		Left = 102, ;
		Name = "cmdRemove", ;
		TabIndex = 8, ;
		Top = 114, ;
		Width = 132, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage2.edtStatusBarText' AS baseeditbox WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Height = 40, ;
		IntegralHeight = .F., ;
		Left = 70, ;
		Name = "edtStatusBarText", ;
		TabIndex = 5, ;
		Top = 26, ;
		Width = 355, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'pgfProperties.Basepage2.lblOrder' AS baselabel WITH ;
		Caption = "Order", ;
		Left = 5, ;
		Name = "lblOrder", ;
		TabIndex = 6, ;
		Top = 123, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Basepage2.lblStatusBarText' AS baselabel WITH ;
		Caption = "Summary", ;
		Left = 5, ;
		Name = "lblStatusBarText", ;
		TabIndex = 4, ;
		Top = 29, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Basepage2.oFilter' AS filtercontrols WITH ;
		ctarget = This.Parent.Parent.Parent.Parent, ;
		Left = 200, ;
		Name = "oFilter", ;
		TabIndex = 9, ;
		Top = -42, ;
		ZOrderSet = 9, ;
		lblFilter.Name = "lblFilter", ;
		txtFilter.Name = "txtFilter"
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.Basepage2.oHotKeyControls' AS hotkeycontrols WITH ;
		calias = ToolHotKeyAssignments, ;
		Left = 128, ;
		Name = "oHotKeyControls", ;
		TabIndex = 5, ;
		Top = 138, ;
		ZOrderSet = 11, ;
		cmdGetHotKey.Name = "cmdGetHotKey", ;
		lblHotKey.Name = "lblHotKey", ;
		txtHotKey.Name = "txtHotKey", ;
		cmdClear.Name = "cmdClear"
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.Basepage2.oToolInfo' AS toolinfo WITH ;
		calias = MenuTools, ;
		Height = 57, ;
		Left = 1, ;
		Name = "oToolInfo", ;
		TabIndex = 11, ;
		Top = 170, ;
		Width = 421, ;
		ZOrderSet = 6, ;
		edtToolInfo.BackStyle = 0, ;
		edtToolInfo.Height = 64, ;
		edtToolInfo.Left = 1, ;
		edtToolInfo.Name = "edtToolInfo", ;
		edtToolInfo.Top = -2, ;
		edtToolInfo.Width = 418, ;
		lblLink.Height = 18, ;
		lblLink.Left = 1, ;
		lblLink.Name = "lblLink", ;
		lblLink.Top = 38, ;
		lblLink.Width = 96, ;
		lblVideo.Name = "lblVideo", ;
		lblOptions.Name = "lblOptions", ;
		lblPlugIns.Name = "lblPlugIns"
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.Basepage2.Selecttool1' AS selecttoolformenus WITH ;
		BackStyle = 1, ;
		Height = 24, ;
		Left = 1, ;
		Name = "Selecttool1", ;
		nspaceabovetreeview = 30, ;
		Top = 0, ;
		Width = 424, ;
		ZOrderSet = 0, ;
		cboCombo.Left = 69, ;
		cboCombo.Name = "cboCombo", ;
		cboCombo.Top = 0, ;
		cboCombo.Width = 355, ;
		cboCombo.ZOrderSet = 0, ;
		Baselabel1.Name = "Baselabel1", ;
		lblPrompt1.Left = 3, ;
		lblPrompt1.Name = "lblPrompt1", ;
		oTree.Height = 174, ;
		oTree.Left = 5, ;
		oTree.Name = "oTree", ;
		oTree.Top = 29, ;
		oTree.Width = 166, ;
		shpTreeView.Name = "shpTreeView", ;
		shpTreeView.ZOrderSet = 2, ;
		oImageList.Height = 100, ;
		oImageList.Left = 120, ;
		oImageList.Name = "oImageList", ;
		oImageList.Top = 40, ;
		oImageList.Width = 100, ;
		oImageList.ZOrderSet = 3, ;
		cmdApply.Left = 325, ;
		cmdApply.Name = "cmdApply", ;
		cmdClear.Left = 380, ;
		cmdClear.Name = "cmdClear", ;
		txtcNewFilter.Name = "txtcNewFilter", ;
		txtcNewFilter.Width = 246
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.Basepage3.cmdMoveDown' AS basecommandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 70, ;
		Name = "cmdMoveDown", ;
		Picture = down.bmp, ;
		TabIndex = 8, ;
		Top = 134, ;
		Width = 22, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage3.cmdMoveUp' AS basecommandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 70, ;
		Name = "cmdMoveUp", ;
		Picture = up.bmp, ;
		TabIndex = 7, ;
		Top = 113, ;
		Width = 22, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage3.cmdRemove' AS basecommandbutton WITH ;
		Anchor = 0, ;
		Caption = "\<Remove Separator from Menu", ;
		Height = 23, ;
		Left = 128, ;
		Name = "cmdRemove", ;
		TabIndex = 8, ;
		Top = 114, ;
		Width = 193, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.Basepage3.lblOrder' AS baselabel WITH ;
		Caption = "Order", ;
		Left = 5, ;
		Name = "lblOrder", ;
		TabIndex = 6, ;
		Top = 123, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Basepage3.oFilter' AS filtercontrols WITH ;
		ctarget = This.Parent.Parent.Parent.Parent, ;
		Left = 200, ;
		Name = "oFilter", ;
		TabIndex = 9, ;
		Top = -42, ;
		ZOrderSet = 9, ;
		lblFilter.Name = "lblFilter", ;
		txtFilter.Name = "txtFilter"
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />
	
	PROCEDURE addmenu		&& Adds a menu
		*==============================================================================
		* Method:			AddMenu
		* Purpose:			Adds a menu
		* Author:			Doug Hennig
		* Last revision:	03/22/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	Thisform.oThor is a reference to a Thor_Engine object
		*					see Thor_Engine.AddMenu for other requirements
		* Environment out:	a menu was added (see Thor_Engine.AddMenu to changes)
		*					the new menu is added to the TreeView, selected, and
		*						focus set to the prompt text box
		*==============================================================================
		
		local loNode, ;
			llPopup, ;
			lcPrompt, ;
			lnID
		
		* See if we're in the Popup Menus section or the VFP System Menu section to
		* decide what type of menu to create.
		
		loNode   = This.oTree.SelectedItem
		do while vartype(loNode.Parent) = 'O'
			loNode = loNode.Parent
		enddo while vartype(loNode.Parent) = 'O'
		llPopup  = loNode.Key == ccKEY_ROOT_POPUP_MENU
		
		* Add the menu, load it into the TreeView, select it, and set focus to the
		* prompt textbox.
		
		lcPrompt = 'New Menu'
		lnID     = Thisform.oThor.AddMenu(lcPrompt, not llPopup, llPopup)
		loNode   = This.LoadNode(loNode.Key, lcPrompt, ccIMAGE_MENU, lnID)
		This.SelectItem(loNode)
		Thisform.SetFocusToFirstObject(This.pgfProperties.Pages[1])
		
	ENDPROC

	PROCEDURE addsubmenu		&& Adds a submenu to the selected menu
		*==============================================================================
		* Method:			AddSubMenu
		* Purpose:			Adds a submenu to the selected menu
		* Author:			Doug Hennig
		* Last revision:	03/22/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	Thisform.oThor is a reference to a Thor_Engine object
		*					see Thor_Engine.AddSubMenu for other requirements
		* Environment out:	a menu was added (see Thor_Engine.AddSubMenu for changes)
		*					the new menu is added to the TreeView, selected, and
		*						focus set to the prompt text box
		*==============================================================================
		
		local loNode, ;
			lcKey, ;
			lnMenuID, ;
			lcPrompt, ;
			lnID
		with This
		
		* Get the currently selected node. If it's an item, get the parent menu.
		
			loNode = .oTree.SelectedItem
			lcKey  = .GetItemKey(loNode)
			if left(lcKey, 1) = ccKEY_TOOL
				loNode = loNode.Parent
			endif left(lcKey, 1) = ccKEY_TOOL
			lcKey    = .GetItemKey(loNode)
			lnMenuID = val(substr(lcKey, 2))
		
		* Add a record for the new menu.
		
			lcPrompt = 'New Menu'
			lnID     = Thisform.oThor.AddSubMenu(lnMenuID, , lcPrompt)
		
		* Get the key for the new item, then reload the TreeView in case the menu this
		* item belongs to appears in more than one place.
		
			lcKey = loNode.Key + ccKEY_SEPARATOR + ccKEY_MENU + transform(lnID)
			.LoadTree(.T.)
		
		* Select the newly added node and set focus to the first control in the Items
		* page.
		
			.SelectItem(lcKey)
			Thisform.SetFocusToFirstObject(.pgfProperties.Pages[1])
		endwith
		
	ENDPROC

	PROCEDURE addtool		&& Adds a tool to the selected item
		*==============================================================================
		* Method:			AddTool
		* Purpose:			Adds a tool to the selected menu
		* Author:			Doug Hennig
		* Last revision:	03/23/2011
		* Parameters:		tlSeparator - .T. if this is a separator
		* Returns:			none
		* Environment in:	Thisform.oThor is a reference to a Thor_Engine object
		*					see Thor_Engine.AddItemToMenu for other requirements
		* Environment out:	an item was added to the menu (see
		*						Thor_Engine.AddItemToMenu for other changes)
		*					the new menu is added to the TreeView, selected, and
		*						focus set to the prompt text box
		*==============================================================================
		
		lparameters tlSeparator
		local loNode, ;
			lcKey, ;
			lnMenuID, ;
			loTool, ;
			lcPRGName, ;
			lcPrompt, ;
			lcStatusBarText, ;
			lnID
		with This
		
		* Get the currently selected node. If it's another item, get the parent menu.
		
			loNode = .oTree.SelectedItem
			lcKey  = .GetItemKey(loNode)
			if left(lcKey, 1) = ccKEY_TOOL
				loNode = loNode.Parent
			endif left(lcKey, 1) = ccKEY_TOOL
			lcKey    = .GetItemKey(loNode)
			lnMenuID = val(substr(lcKey, 2))
		
		* If we're adding a tool, use the first one as a default.
		
			if not tlSeparator
				loTool = This.oLastToolSelected
				If Type('loTool') # 'O'
					loTool          = Thisform.oTools.Item(1)
					Thisform.oTools.Keysort = 2
					For each loToolX in Thisform.oTools 
						If loToolX.Source # 'Thor'
							loTool = loToolX
							Exit 
						Endif loToolX.Source # 'Thor'
					Endfor 
				EndIf 
						
				*!* * Removed 2/28/2012 
				*!* lcPRGName       = loTool.PRGName
				*!* lcPrompt        = loTool.Prompt
				*!* lcStatusBarText = evl(loTool.StatusBarText, loTool.Description)
				lcPRGName       = ''
				lcPrompt        = ''
				lcStatusBarText = ''
			endif not tlSeparator
		
		* Add the item, get the key for it, then reload the TreeView in case the menu
		* this item belongs to appears in more than one place.
		
			lnID  = Thisform.oThor.AddItemToMenu(lnMenuID, lcPRGName, lcPrompt, ;
				tlSeparator, , lcStatusBarText)
			lcKey = loNode.Key + ccKEY_SEPARATOR + ccKEY_TOOL + transform(lnID)
			.LoadTree(.T.)
		
		* Select the newly added node and set focus to the first control in the Items
		* page.
		
			.SelectItem(lcKey)
			If m.tlSeparator
				Thisform.SetFocusToFirstObject(.pgfProperties.Pages[3])
			Else
				Thisform.SetFocusToFirstObject(.pgfProperties.Pages[2])
				ThisForm.oSelectTool.CloseControl()
				ThisForm.oSelectTool.OpenControl()
			EndIf
		endwith
		
	ENDPROC

	PROCEDURE createtool		&& Creates a template PRG for a tool
		*==============================================================================
		* Method:			CreateTool
		* Purpose:			Creates a template PRG for a tool
		* Author:			Doug Hennig
		* Copyright:		(c) 2011 Stonefield Systems Group Inc.
		* Last revision:	04/18/2011 / JRN
		* Parameters:		none
		* Returns:			none
		* Environment in:	_System.vcx exists in the VFP FFC folder
		* Environment out:	a PRG specified by the user is created with template code.
		*==============================================================================
		
		Local lcCD, lcCode, lcFile, loFile, loPEME_Tools, loThorInfo
		
		****************************************************************
		lcFolder = Thisform.oTools.Tag
		Do Form CreateTool with lcFolder to lcFile
		If Empty(lcFile)
			Return
		EndIf
		
		****************************************************************
		
		*!*	lcCD   = Sys(5) + Curdir()
		*!*	loFile = Newobject ('_ComDlg', Home() + 'FFC\_System.vcx')
		*!*	loFile.AddFilter ('Program file (*.prg)', '*.prg')
		*!*	loFile.lSaveDialog		 = .T.
		*!*	loFile.cInitialDirectory = Thisform.oTools.Tag
		*!*	loFile.ShowDialog()
		*!*	Cd (lcCD)
		*!*	lcFile = Addbs (loFile.cFilePath) + loFile.cFileTitle
		
		Do Case
			Case Empty (lcFile) 
			Case Upper (JustStem(lcFile)) # Upper(ccTOOLNAMEPREFIX)
				Messagebox (ccTOOL_PREFIX_ERROR, MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
			Case File (lcFile)
				Messagebox (Strtran (ccALREADY_EXISTS, '%1', lcFile),  ;
					  MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
			Otherwise
				*** JRN 2011-04-18 : Get sample code for new PRG from ThorInfo
				loThorInfo = Newobject ('ThorInfo', 'Thor_Utils')
				lcCode	   = loThorInfo.GetSampleToolCode()
				Strtofile (lcCode, lcFile)
				Modify Command (lcFile) Nowait
				*** JRN 2011-05-05 : Move / resize window
				loPEME_Tools = Execscript (_Screen.cThorDispatcher, 'class= tools from pemeditor')
				If 'O' = Vartype (loPEME_Tools)
					loPEME_Tools.AddMRUFile (lcFile)
					_oPEMEditor.oUtils.oIDEx.MoveWindow()
				Endif
		
		Endcase
		
	ENDPROC

	PROCEDURE getitemkey		&& Gets the item key from the specified node key
		*==============================================================================
		* Method:			GetItemKey
		* Purpose:			Gets the item key from the specified node key
		* Author:			Doug Hennig
		* Last revision:	03/19/2011
		* Parameters:		toNode - the node to get the item key from
		* Returns:			the item key
		* Environment in:	none
		* Environment out:	none
		* Note:				Keys are stored as a path. For example, for the Display UI
		*						item (tool ID 4) in the Thor submenu (menu ID 8) of the
		*						Tools menu (menu ID 6), the key is VFP\M6\M8\T4. This
		*						method returns T4 in that case
		*==============================================================================
		
		lparameters toNode
		
		If 'O' # Vartype(toNode)
			Return ''
		EndIf
		
		lcKey = toNode.Key
		lnPos = rat(ccKEY_SEPARATOR, lcKey)
		if lnPos > 0
			lcKey = substr(lcKey, lnPos + 1)
		endif lnPos > 0
		return lcKey
		
	ENDPROC

	PROCEDURE Init
		* Load the ImageList and associate it with the TreeView.
		
		With This.oImageList
			.ListImages.Add(1, ccIMAGE_MENU,  LoadPicture('Menus.ico'))
			.ListImages.Add(2, ccIMAGE_TOOL,  LoadPicture('Programs.ico'))
			.ListImages.Add(3, ccIMAGE_POPUP, LoadPicture('Popup.ico'))
		Endwith
		This.oTree.Object.ImageList = This.oImageList
		DoDefault()
		
	ENDPROC

	PROCEDURE loadchildnodes		&& Loads the submenus of the specified menu
		*==============================================================================
		* Method:			LoadChildNodes
		* Purpose:			Loads the submenus of the specified menu
		* Author:			Doug Hennig
		* Last revision:	03/24/2011
		* Parameters:		tnID - the ID for the menu item to load submenus for
		* Returns:			none
		* Environment in:	MenuTools is open and is ordered by SortOrder
		* Environment out:	nodes for the submenus and tools have been loaded into the
		*						TreeView
		*==============================================================================
		
		lparameters tnID, ;
			tcParentKey
		local lnSelect, ;
			loNode, ;
			lnRecno, ;
			lcPrompt
		lnSelect = select()
		select MenuTools
		scan for MenuID = tnID
			do case
				case SubMenuID = 0
		
		* This is a tool or separator, so add it under the menu.
		
					if Separator
						lcPrompt = ccSEPARATOR_PROMPT
					else
						If not Empty(PRGName)
							lcPrompt = trim(Prompt)
						Else
							lcPrompt = ccNoToolSelected
						EndIf
						= seek(upper(PRGName), 'ToolHotKeyAssignments', 'PRGName')
						if seek(ToolHotKeyAssignments.HotKeyID, 'HotKeyDefinitions', 'ID')
							lcPrompt = lcPrompt + ' (' + ;
								trim(HotKeyDefinitions.Descript) + ')'
						EndIf 
					endif Separator
					This.LoadNode(tcParentKey, lcPrompt, ccIMAGE_TOOL, ID)
		
		* If this is a submenu, find the menu's record, add a node under the menu we're
		* we're working on, and process all child nodes.
		
				case seek(MenuTools.SubMenuID, 'MenuDefinitions', 'ID')
					= seek(MenuTools.SubMenuID, 'MenuDefinitions', 'ID')
					lcPrompt = trim(MenuDefinitions.Prompt)
					if seek(MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
						lcPrompt = lcPrompt + ' (' + ;
							trim(HotKeyDefinitions.Descript) + ')'
					endif seek(MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
					loNode  = This.LoadNode(tcParentKey, lcPrompt, ;
						ccIMAGE_MENU, SubMenuID)
					lnRecno = recno()
					This.LoadChildNodes(SubMenuID, loNode.Key)
					go lnRecno
			endcase
		endscan for MenuID = tnID
		select (lnSelect)
		return
		
	ENDPROC

	PROCEDURE loadnode		&& Loads a node in the TreeView
		*==============================================================================
		* Method:			LoadNode
		* Purpose:			Loads a node in the TreeView
		* Author:			Doug Hennig
		* Last revision:	03/19/2011
		* Parameters:		tcParentKey - the key of the parent node to add this under
		*					tcPrompt    - the text for the node
		*					tcIcon      - the icon for the node
		*					tnID        - the ID of the record the node represents
		* Returns:			a reference to the node
		* Environment in:	none
		* Environment out:	a node was added to the TreeView
		*==============================================================================
		
		lparameters tcParentKey, ;
			tcPrompt, ;
			tcIcon, ;
			tnID
		local lcKey, ;
			loNode
		lcKey  = tcParentKey + ccKEY_SEPARATOR + left(tcIcon, 1) + transform(tnID)
		loNode = This.oTree.Nodes.Add(tcParentKey, cnCHILD_NODE, lcKey, tcPrompt, ;
			tcIcon)
		return loNode
		
	ENDPROC

	PROCEDURE loadtree		&& Loads the TreeView control with defined menus
		*==============================================================================
		* Method:			LoadTree
		* Purpose:			Loads the TreeView control with menus and the tools in them
		* Author:			Doug Hennig
		* Last revision:	03/20/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	MenuDefinitions and MenuTools are open
		* Environment out:	MenuDefinitions and MenuTools are both ordered on SortOrder
		*					the TreeView is loaded with menu and tool nodes
		*==============================================================================
		
		lparameters tlReload
		local loTree, ;
			laNodes[1], ;
			lnI, ;
			loNode, ;
			lcSelectedNode, ;
			lnRecno1, ;
			lnRecno2, ;
			lnRecno, ;
			lcPrompt, ;
			lcKey, ;
			lnPos
		with This
			loTree = .oTree
		
		* If we're reloading the TreeView, preserve the expanded status of nodes and
		* the selected node, then clear the TreeView.
		
			if tlReload
				loTree.SaveExpandedNodes()
				lnRecno1 = recno('MenuDefinitions')
				lnRecno2 = recno('MenuTools')
			endif tlReload
		
		* Load the menu categories as root nodes.
		
			loNode = loTree.Nodes.Add(, 0, ccKEY_ROOT_SYSTEM_MENU, ccVFP_SYSTEM_MENU, ;
				ccIMAGE_MENU)
			loNode.Expanded = .T.
			loNode.Bold = .T.                          
		
			loNode = loTree.Nodes.Add(, 0, ccKEY_ROOT_POPUP_MENU,  ccPOPUP_MENUS, ;
				ccIMAGE_POPUP)
			loNode.Expanded = .T.
			loNode.Sorted   = .T.
			loNode.Bold = .T.                          
			
		* Go through the defined menus and add them and their tools to the TreeView.
		
			set order to SortOrder in MenuTools
			* First, correct existing SortOrder in MenuDefinitions
			* (there may be holes, or duplicates)
			select MenuDefinitions
			set order to
			replace all SortOrder with SortOrder + 1000 for TopLevel
			set order to SortOrder
			lnSortOrder = 0
			Scan for TopLevel
				lnSortOrder = lnSortOrder + 1
				Replace SortOrder with lnSortOrder   
			EndScan 
		
			scan
		
		* Add internal and user-defined top level menus under the VFP System Menu node,
		* then process all submenus and tools.
		
				if TopLevel
					lcPrompt = trim(Prompt)
					if seek(MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
						lcPrompt = lcPrompt + ' (' + ;
							trim(HotKeyDefinitions.Descript) + ')'
					endif seek(MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
					loNode  = .LoadNode(ccKEY_ROOT_SYSTEM_MENU, lcPrompt, ;
						ccIMAGE_MENU, ID)
						
					If not Trim(PopupName) == 'Thor_Internal' and not Trim(PopupName) == ccRunAllTools
						lnRecno = recno()
						.LoadChildNodes(ID, loNode.Key)
						go lnRecno
					EndIf 
				endif TopLevel
		
		* If this is a popup menu (it could be both a top level and popup menu), add a
		* node under Popup Menus and process all submenus and tools.
		
				if Popup and not Internal
					lcPrompt = trim(Prompt)
					if seek(MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
						lcPrompt = lcPrompt + ' (' + ;
							trim(HotKeyDefinitions.Descript) + ')'
					endif seek(MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
					loNode  = .LoadNode(ccKEY_ROOT_POPUP_MENU, lcPrompt, ;
						ccIMAGE_MENU, ID)
					lnRecno = recno()
					.LoadChildNodes(ID, loNode.Key)
					go lnRecno
				endif Popup ...
			endscan for TopLevel
		
		* If we reloaded the TreeView, reexpanded formerly expanded nodes, reselect the
		* former node, and restore the saved record pointers. Otherwise, select the
		* first node.
		
			if tlReload
				loNode = loTree.RestoreExpandedNodes()
				If vartype(loNode) = 'O'
					.Selectitem(loNode)
				EndIf 
				if between(lnRecno1, 1, reccount('MenuDefinitions'))
					go lnRecno1 in MenuDefinitions
				endif between(lnRecno1 ...
				if between(lnRecno2, 1, reccount('MenuTools'))
					go lnRecno2 in MenuTools
				endif between(lnRecno2...
			else
				.SelectItem(loTree.Nodes(1))
			endif tlReload
		endwith
		
	ENDPROC

	PROCEDURE moveitem		&& Moves the selected item
		*==============================================================================
		* Method:			MoveItem
		* Purpose:			Moves the selected item
		* Author:			Doug Hennig
		* Copyright:		(c) 2011 Stonefield Systems Group Inc.
		* Last revision:	03/24/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		lparameters tnAmount
		with This
		
		* Get the currently selected node and its parent.
		
			loNode   = .oTree.SelectedItem
			lcKey    = .GetItemKey(loNode)
			loParent = loNode.Parent
			lnSelect = select()
		
		* For a top-level menu, swap this item and the one above or below it.
		
			if loParent.Key == ccKEY_ROOT_SYSTEM_MENU
				select MenuDefinitions
				lnSortOrder = SortOrder
				lnRecno     = recno()
				locate for TopLevel and SortOrder = lnSortOrder + tnAmount
				replace SortOrder with SortOrder - tnAmount
				go lnRecno
				replace SortOrder with SortOrder + tnAmount
		
		* For a submenu or tool, swap this item and the one above or below it
		* in the same menu.
		
			else
				lcKey    = .GetItemKey(loParent)
				lnMenuID = val(substr(lcKey, 2))
		
		* Swap this item and the one above or below it.
		
				select MenuTools
				lnSortOrder = SortOrder
				lnRecno     = recno()
				locate for MenuID = lnMenuID and SortOrder = lnSortOrder + tnAmount
				replace SortOrder with SortOrder - tnAmount
				go lnRecno
				replace SortOrder with SortOrder + tnAmount
			endif loParent.Key == ccKEY_ROOT_SYSTEM_MENU
			select (lnSelect)
		
		* Reload the TreeView.
		
			.LoadTree(.T.)
		endwith
		
	ENDPROC

	PROCEDURE removemenuoritem		&& Removes the selected menu or item
		*==============================================================================
		* Method:			RemoveMenuOrItem
		* Purpose:			Removes the selected menu or item
		* Author:			Doug Hennig
		* Last revision:	03/31/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	Thisform.oThor is a reference to a Thor_Engine object
		* Environment out:	the menu or item was removed and the TreeView node removed
		*					This.nCopyMenuID is 0 if the menu removed was the copied
		*						one
		*==============================================================================
		
		local loTree, ;
			loNode, ;
			lcKey, ;
			lcItemKey, ;
			lnID, ;
			llItem, ;
			llRemoveTopLevel, ;
			llRemovePopup, ;
			llRemoveSubMenu, ;
			lcMessage
		with This
			loTree    = .oTree
			loNode    = loTree.SelectedItem
			lcKey     = loNode.Key
			lcItemKey = .GetItemKey(loNode)
			lnID      = val(substr(lcItemKey, 2))
			llItem    = left(lcItemKey, 1) = ccKEY_TOOL
		
		* If this is a menu, see where it's being used and where we're removing it
		* from.
		
			do case
				case llItem
				case loNode.Parent.Key == ccKEY_ROOT_SYSTEM_MENU
					llRemoveTopLevel = .T.
				case loNode.Parent.Key == ccKEY_ROOT_POPUP_MENU
					llRemovePopup = .T.
				otherwise
					llRemoveSubMenu = .T.
			endcase
		
		* See if we're supposed to remove the item. If so, remove the item or menu.
		
			lcMessage = iif(llItem, ccREMOVE_ITEM, ccREMOVE_MENU)
			llRemove  = messagebox(lcMessage, MB_YESNO + MB_ICONQUESTION, ;
				ccTHOR_CAPTION) = IDYES
			do case
				case not llRemove
				case llItem
					Thisform.oThor.RemoveItemFromMenu(lnID)
				otherwise
					Thisform.oThor.RemoveMenu(lnID, llRemoveTopLevel, llRemovePopup, ;
						llRemoveSubMenu)
			endcase
		
		* If we removed the item, remove the node and update the form for the new
		* selected item.
		
			if llRemove
				loTree.Nodes.Remove(lcKey)
				.SelectItem(loTree.SelectedItem)
			endif llRemove
		
		* If we removed the copied menu, zero nCopyMenuID.
		
			if lnID = .nCopyMenuID
				.nCopyMenuID = 0
				.Refresh()
			endif lnID = .nCopyMenuID
		endwith
		
	ENDPROC

	PROCEDURE selectitem		&& Called when the user selects an item in the TreeView
		*==============================================================================
		* Method:			SelectItem
		* Purpose:			Called when the user selects an item in the TreeView
		* Author:			Doug Hennig
		* Last revision:	03/31/2011
		* Parameters:		tuNode - the node selected or the key for the node
		* Returns:			none
		* Environment in:	none
		* Environment out:	the specified node is selected in the TreeView
		*					the appropriate page in pgfProperties is selected
		*					the controls are refreshed
		*					MenuDefinitions, MenuTools, and HotKeyDefinitions may have
		*						been positioned to the appropriate records
		*==============================================================================
		
		lparameters tuNode
		local loNode, ;
			lcKey, ;
			lcType, ;
			lnID
		with This
		
		* If a key was passed instead of a node, get it.
		
			do case
				case vartype(tuNode) = 'O'
					loNode = tuNode
				case type('.oTree.Nodes.Item(tuNode)') = 'O'
					loNode = .oTree.Nodes.Item(tuNode)
				otherwise
					loNode = .NULL.
			endcase
		
		* If we have a node, select it and handle the type of node it is.
		
			if vartype(loNode) = 'O'
				.oTree.SelectedItem = loNode
				loNode.EnsureVisible()
				lcKey  = .GetItemKey(loNode)
				lcType = substr(lcKey, 1)
				lnID   = val(substr(lcKey, 2))
				do case
					case lcKey = ccKEY_ROOT_SYSTEM_MENU or ;
						lcKey = ccKEY_ROOT_POPUP_MENU
						.pgfProperties.Visible = .F.
					case lcType = ccKEY_MENU
						= seek(lnID, 'MenuDefinitions', 'ID')
						= seek(lnID, 'MenuTools',       'SubMenuID')
						= seek(MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
						.pgfProperties.Visible    = .T.
						.pgfProperties.ActivePage = 1
					otherwise
						= seek(lnID, 'MenuTools', 'ID')
						= seek(upper(MenuTools.PRGName), 'ToolHotKeyAssignments', 'PRGName')
						= seek(ToolHotKeyAssignments.HotKeyID, 'HotKeyDefinitions', 'ID')
						.pgfProperties.Visible    = .T.
						If MenuTools.Separator
							.pgfProperties.ActivePage = 3
						Else
						.pgfProperties.ActivePage = 2
							If Empty(MenuTools.PRGName)
							.pgfProperties.BasePage2.Selecttool1.OpenControl()
							Endif
						Endif
				endcase
				.Refresh()
			endif vartype(loNode) = 'O'
		endwith
		
	ENDPROC

	PROCEDURE UIEnable
		lparameters tlEnable
		if tlEnable and This.oTree.Nodes.Count = 0
			This.LoadTree()
		endif tlEnable ...
		
	ENDPROC

	PROCEDURE cmdAddMenu.Click
		This.Parent.AddMenu()
		
	ENDPROC

	PROCEDURE cmdAddMenu.Init
		This.Caption = ccADD_MENU
		dodefault()
		
	ENDPROC

	PROCEDURE cmdAddMenu.Refresh
		* See if we're in the Popup Menus section or the VFP System Menu section to
		* decide what ToolTipText to use.
		
		local loNode, ;
			llPopup
		loNode = This.Parent.oTree.SelectedItem
		do while vartype(loNode.Parent) = 'O'
			loNode = loNode.Parent
		enddo while vartype(loNode.Parent) = 'O'
		llPopup = loNode.Key == ccKEY_ROOT_POPUP_MENU
		if llPopup
			This.ToolTipText = ccTT_ADD_MENU_POPUP
		else
			This.ToolTipText = ccTT_ADD_MENU_VFP
		endif llPopup
		
	ENDPROC

	PROCEDURE cmdAddSeparator.Click
		This.Parent.AddTool(.T.)
		
	ENDPROC

	PROCEDURE cmdAddSeparator.Init
		This.Caption = ccADD_SEPARATOR
		dodefault()
		
	ENDPROC

	PROCEDURE cmdAddSeparator.Refresh
		* This isn't available for the root nodes.
		
		local lcKey
		with This.Parent
			lcKey        = .GetItemKey(.oTree.SelectedItem)
			This.Enabled = Thisform.NotThorInternalMenu() and not inlist(lcKey, ccKEY_ROOT_SYSTEM_MENU, ;
				ccKEY_ROOT_POPUP_MENU)
		
		* Get the currently selected node. If it's another item, get the parent menu.
		* We use that to decide what tooltip to use.
		
			loNode = .oTree.SelectedItem
			lcKey  = .GetItemKey(loNode)
			if left(lcKey, 1) = ccKEY_TOOL
				loNode = loNode.Parent
			endif left(lcKey, 1) = ccKEY_TOOL
			This.ToolTipText = strtran(ccTT_ADD_SEPARATOR, '%1', loNode.Text)
		endwith
		
	ENDPROC

	PROCEDURE cmdAddSubMenu.Click
		This.Parent.AddSubMenu()
		
	ENDPROC

	PROCEDURE cmdAddSubMenu.Init
		This.Caption = ccADD_SUBMENU
		dodefault()
		
	ENDPROC

	PROCEDURE cmdAddSubMenu.Refresh
		* This isn't available for the root nodes.
		
		local lcKey, ;
			loNode
		with This.Parent
			lcKey        = .GetItemKey(.oTree.SelectedItem)
			This.Enabled = Thisform.NotThorInternalMenu() and not inlist(lcKey, ccKEY_ROOT_SYSTEM_MENU, ;
				ccKEY_ROOT_POPUP_MENU)
		
		* Get the currently selected node. If it's another item, get the parent menu.
		* We use that to decide what tooltip to use.
		
			loNode = .oTree.SelectedItem
			lcKey  = .GetItemKey(loNode)
			if left(lcKey, 1) = ccKEY_TOOL
				loNode = loNode.Parent
			endif left(lcKey, 1) = ccKEY_TOOL
			This.ToolTipText = strtran(ccTT_ADD_SUBMENU, '%1', loNode.Text)
		endwith
		
	ENDPROC

	PROCEDURE cmdAddTool.Click
		This.Parent.AddTool()
		
	ENDPROC

	PROCEDURE cmdAddTool.Init
		This.Caption = ccADD_TOOL
		dodefault()
		
	ENDPROC

	PROCEDURE cmdAddTool.Refresh
		* This isn't available for the root nodes.
		
		local lcKey, ;
			loNode
		with This.Parent
			lcKey        = .GetItemKey(.oTree.SelectedItem)
			This.Enabled = Thisform.NotThorInternalMenu() and not inlist(lcKey, ccKEY_ROOT_SYSTEM_MENU, ccKEY_ROOT_POPUP_MENU)
		
		* Get the currently selected node. If it's another item, get the parent menu.
		* We use that to decide what tooltip to use.
		
			loNode = .oTree.SelectedItem
			lcKey  = .GetItemKey(loNode)
			if left(lcKey, 1) = ccKEY_TOOL
				loNode = loNode.Parent
			endif left(lcKey, 1) = ccKEY_TOOL
			This.ToolTipText = strtran(ccTT_ADD_TOOL, '%1', loNode.Text)
		endwith
		
	ENDPROC

	PROCEDURE oTree.DblClick
		* If the selected item is a tool, edit it on a double-click.
		
		local lcKey, ;
			lcType
		lcKey  = This.Parent.GetItemKey(This.SelectedItem)
		lcType = substr(lcKey, 1)
		if lcType = ccKEY_TOOL
			Thisform.EditTool(trim(MenuTools.PRGName))
		endif lcType = ccKEY_TOOL
		
	ENDPROC

	PROCEDURE oTree.Init
		This.Font.Size = 10
		
	ENDPROC

	PROCEDURE oTree.NodeClick
		lparameters toNode
		This.Parent.SelectItem(toNode)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.Basecheckbox1.Refresh
		This.Enabled = MenuDefinitions.Popup and not MenuDefinitions.Internal 
		This.Value	 = MenuDefinitions.Launcher
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.Basecheckbox1.Valid
		Replace Launcher With This.Value In MenuDefinitions
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdAddCopiedMenu.Click
		with This.Parent.Parent.Parent
			Thisform.oThor.AddSubMenu(MenuDefinitions.ID, .nCopyMenuID)
			.LoadTree(.T.)
			.oTree.SelectedItem.Expanded = .T.
		endwith
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdAddCopiedMenu.Init
		This.Caption = ccADD_COPIED_MENU
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdAddCopiedMenu.Refresh
		local lnID
		lnID = This.Parent.Parent.Parent.nCopyMenuID
		This.Enabled = lnID <> 0 and MenuDefinitions.ID <> lnID
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdAddPopup.Click
		replace MenuDefinitions.Popup with .T.
		This.Parent.Parent.Parent.LoadTree(.T.)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdAddPopup.Init
		This.Caption = ccADD_AS_POPUP
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdAddPopup.Refresh
		This.Enabled = Thisform.NotThorInternalMenu() and not MenuDefinitions.Internal and not MenuDefinitions.Popup
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdAddTopLevel.Click
		local lnSelect, ;
			lnRecno
		lnSelect = select()
		select MenuDefinitions
		lnRecno = recno()
		calculate max(SortOrder) to lnMax for TopLevel
		if between(lnRecno, 1, reccount())
			go lnRecno
		endif between(lnRecno, 1, reccount())
		replace MenuDefinitions.TopLevel with .T., SortOrder with lnMax + 1
		This.Parent.Parent.Parent.LoadTree(.T.)
		select (lnSelect)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdAddTopLevel.Init
		This.Caption = ccADD_AS_TOP_LEVEL
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdAddTopLevel.Refresh
		This.Enabled = not MenuDefinitions.Internal and not MenuDefinitions.TopLevel
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdCopyMenu.Click
		This.Parent.Parent.Parent.nCopyMenuID = MenuDefinitions.ID
		This.Parent.Refresh()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdCopyMenu.Init
		This.Caption = ccCOPY_MENU
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdCopyMenu.Refresh
		This.Enabled = Thisform.NotThorInternalMenu() and not MenuDefinitions.Internal
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdMoveDown.Click
		This.Parent.Parent.Parent.MoveItem(1)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdMoveDown.Init
		* At runtime, move the controls so they overlap with hotkey controls, since
		* they're mutually exclusive.
		
		This.Left = This.Parent.txtPrompt.Left
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdMoveDown.Refresh
		* This isn't allowed for popup menus or internal menus, or if we're already at
		* the last one.
		
		local loNode, ;
			loParent, ;
			laOrder[1], ;
			lcKey, ;
			lnMenuID
		with This.Parent.Parent.Parent
			loNode = .oTree.SelectedItem
			This.Visible = not MenuDefinitions.Internal and ;
				vartype(loNode.Parent) = 'O' and ;
				not loNode.Parent.Key == ccKEY_ROOT_POPUP_MENU
			if This.Visible
				loParent = loNode.Parent
				if loParent.Key == ccKEY_ROOT_SYSTEM_MENU
					select max(SortOrder) from MenuDefinitions where TopLevel ;
						into array laOrder
				else
					lcKey    = .GetItemKey(loNode.Parent)
					lnMenuID = val(substr(lcKey, 2))
					select max(SortOrder) from MenuTools where MenuID = lnMenuID ;
						into array laOrder
				endif loParent.Key == ccKEY_ROOT_SYSTEM_MENU
				This.Enabled = MenuTools.SortOrder < Nvl(Evl(laOrder[1],0), 0) 
			endif This.Visible
		endwith
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdMoveUp.Click
		This.Parent.Parent.Parent.MoveItem(-1)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdMoveUp.Init
		* At runtime, move the controls so they overlap with hotkey controls, since
		* they're mutually exclusive.
		
		This.Left = This.Parent.txtPrompt.Left
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdMoveUp.Refresh
		* This isn't allowed for popup menus or internal menus, or if we're already at
		* 1.
		
		local loNode, ;
			loParent, ;
			lnOrder
		with This.Parent.Parent.Parent
			loNode       = .oTree.SelectedItem
			This.Visible = not MenuDefinitions.Internal and ;
				vartype(loNode.Parent) = 'O' and ;
				not loNode.Parent.Key == ccKEY_ROOT_POPUP_MENU
			if This.Visible
				loParent = loNode.Parent
				if loParent.Key == ccKEY_ROOT_SYSTEM_MENU
					lnOrder = MenuDefinitions.SortOrder
				else
					lnOrder = MenuTools.SortOrder
				endif loParent.Key == ccKEY_ROOT_SYSTEM_MENU
				This.Enabled = lnOrder > 1
			endif This.Visible
		endwith
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdRemove.Click
		Local loParent
		loParent     = This.Parent.Parent.Parent
		loParent.RemoveMenuOrItem()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdRemove.Init
		This.Caption = ccREMOVEMENU
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.cmdRemove.Refresh
		* We can only remove user-defined menus or items.
		
		local lcKey, ;
			lcType, ;
			loParent
		loParent     = This.Parent.Parent.Parent
		lcKey        = loParent.GetItemKey(loParent.oTree.SelectedItem)
		lcType       = left(lcKey, 1)
		This.Enabled = Thisform.NotThorInternalMenu() and (lcType = ccKEY_MENU and not MenuDefinitions.Internal) or ;
			lcType = ccKEY_TOOL
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.edtStatusBarText.KeyPress
		Lparameters tnKeyCode,  tnShiftAltCtrl
		
		Do Case
			Case tnKeyCode = 13
				Nodefault
		Endcase
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.edtStatusBarText.Refresh
		This.Value   = MenuDefinitions.StatusBar
		This.Enabled = not MenuDefinitions.Internal
		This.Height = 40
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.edtStatusBarText.Valid
		replace StatusBar with trim(This.Value) in MenuDefinitions
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.lblOrder.Init
		* At runtime, move the controls so they overlap with hotkey controls, since
		* they're mutually exclusive.
		
		This.Left    = This.Parent.lblPrompt.Left
		This.Caption = ccORDER
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.lblOrder.Refresh
		* SortOrder isn't allowed for popup menus or internal menus.
		
		local loNode
		loNode = This.Parent.Parent.Parent.oTree.SelectedItem
		This.Visible = not MenuDefinitions.Internal and ;
			vartype(loNode.Parent) = 'O' and ;
			not loNode.Parent.Key == ccKEY_ROOT_POPUP_MENU
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.lblPrompt.Init
		This.Caption = ccPROMPT
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.lblPrompt.Refresh
		This.Enabled = not MenuDefinitions.Internal
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.lblStatusBarText.Init
		This.Caption = ccSTATUS_BAR
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.lblStatusBarText.Refresh
		This.Enabled = not MenuDefinitions.Internal
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.oHotKeyControls.cmdClear.Refresh
		This.enabled = Seek (MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.oHotKeyControls.onclearhotkey
		* Update the text of the selected node in the TreeView.
		
		This.Parent.Parent.Parent.oTree.SelectedItem.Text = trim(MenuDefinitions.Prompt)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.oHotKeyControls.onkeypressed
		* Update the text of the selected node in the TreeView.
		
		This.Parent.Parent.Parent.oTree.SelectedItem.Text = trim(MenuDefinitions.Prompt) + ;
			' (' + trim(HotKeyDefinitions.Descript) + ')'
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.oHotKeyControls.Refresh
		* Hotkeys are only allowed for popup menus and only if we're currently on the
		* popup node.
		
		Local loTree
		loTree       = This.Parent.Parent.Parent.oTree
		This.Visible = MenuDefinitions.Popup And			;
			vartype (loTree.SelectedItem.Parent) = 'O' And	;
			loTree.SelectedItem.Parent.Key == ccKEY_ROOT_POPUP_MENU
		DoDefault()
		
		If Seek (MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
			This.txtHotKey.Value = Trim (HotKeyDefinitions.Descript)
		Else
			This.txtHotKey.Value = ''
		Endif Seek (MenuDefinitions.HotKeyID, 'HotKeyDefinitions', 'ID')
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.txtPrompt.Refresh
		This.Value	 = Trim (MenuDefinitions.Prompt)
		This.Enabled = Not MenuDefinitions.Internal
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage1.txtPrompt.Valid
		* If the user changes the value, we need to reload the TreeView in case it
		* appears in multiple places.
		
		local lcValue
		lcValue = trim(This.Value)
		do case
			case empty(lcValue)
				messagebox(ccBLANK_PROMPT, MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
				This.Value = This.cOnEntryValue
				return 0
			case not lcValue == trim(This.cOnEntryValue)
				replace Prompt with lcValue in MenuDefinitions
				replace Prompt with lcValue in MenuTools ;
					for SubMenuID = MenuDefinitions.ID
				This.Parent.Parent.Parent.LoadTree(.T.)
		endcase
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.Baseeditbox1.KeyPress
		Lparameters tnKeyCode,  tnShiftAltCtrl
		
		Do Case
			Case tnKeyCode = 13
				Nodefault
		Endcase
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.Baseeditbox1.Refresh
		Local lcPRGName
		lcPRGName = Trim (Evaluate ('MenuTools.PRGName'))
		If Thisform.oTools.GetKey (Upper (lcPRGName)) # 0
				This.Value	 = MenuTools.StatusBar
			This.Enabled = Not MenuTools.Separator
		Else
				This.Value	 = ''
				This.Enabled = .F.
		Endif
		
		This.Height = 40
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.Baseeditbox1.Valid
		replace StatusBar with trim(This.Value) in MenuTools
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.cmdEditTool.Refresh
		Local lcPRGName, lnKey, loTool
		
		lcPRGName = Trim (MenuTools.PRGName)
		lnKey	  = Thisform.oTools.GetKey (Upper (Alltrim (lcPRGName))) 
		
		If lnKey > 0
			loTool		  = Thisform.oTools (lnKey)
			This.cPRGName = loTool.FullFileName
			This.Enabled  = .T.
		Else	
			This.Enabled = .F.
		Endif
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.cmdMoveDown.Click
		This.Parent.Parent.Parent.MoveItem(1)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.cmdMoveDown.Refresh
		* This isn't allowed if we're already at the last one.
		
		local loParent, ;
			lcKey, ;
			lnMenuID, ;
			laOrder[1]
		with This.Parent.Parent.Parent
			loParent = .oTree.SelectedItem.Parent
			lcKey    = .GetItemKey(loParent)
			lnMenuID = val(substr(lcKey, 2))
			select max(SortOrder) from MenuTools where MenuID = lnMenuID into array laOrder
			This.Enabled = MenuTools.SortOrder < Nvl(Evl(laOrder[1],0), 0) 
		endwith
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.cmdMoveUp.Click
		This.Parent.Parent.Parent.MoveItem(-1)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.cmdMoveUp.Refresh
		* This isn't allowed if we're already at 1.
		
		This.Enabled = MenuTools.SortOrder > 1
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.cmdRemove.Click
		Local loParent
		loParent     = This.Parent.Parent.Parent
		loParent.RemoveMenuOrItem()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.cmdRemove.Init
		This.Caption = ccREMOVETool
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.cmdRemove.Refresh
		* We can only remove user-defined menus or items.
		
		local lcKey, ;
			lcType, ;
			loParent
		loParent     = This.Parent.Parent.Parent
		lcKey        = loParent.GetItemKey(loParent.oTree.SelectedItem)
		lcType       = left(lcKey, 1)
		This.Enabled = (lcType = ccKEY_MENU and not MenuDefinitions.Internal) or ;
			lcType = ccKEY_TOOL
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.edtStatusBarText.KeyPress
		Lparameters tnKeyCode,  tnShiftAltCtrl
		
		Do Case
			Case tnKeyCode = 13
				Nodefault
		Endcase
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.edtStatusBarText.Refresh
		Local lcPRGName, loTool
		lcPRGName = Trim (Evaluate ('MenuTools.PRGName'))
		If Not Empty (lcPRGName) and 0 # Thisform.oTools.GetKey (Upper (lcPRGName))
			loTool	   = Thisform.oTools.Item (Upper (lcPRGName))
			This.Value = loTool.Summary
		Else
			This.Value = ''
		Endif
		
		*This.Enabled = not MenuTools.Separator
		This.Height = 40
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.edtStatusBarText.Valid
		replace StatusBar with trim(This.Value) in MenuTools
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.oHotKeyControls.cmdClear.Refresh
		This.enabled = Seek (ToolHotKeyAssignments.HotKeyID, 'HotKeyDefinitions', 'ID')
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.oHotKeyControls.onclearhotkey
		* Update the text of the selected node in the TreeView.
		
		This.Parent.Parent.Parent.oTree.SelectedItem.Text = trim(MenuTools.Prompt)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.oHotKeyControls.onkeypressed
		* Update the text of the selected node in the TreeView.
		
		This.Parent.Parent.Parent.oTree.SelectedItem.Text = trim(MenuTools.Prompt) + ;
			' (' + trim(HotKeyDefinitions.Descript) + ')'
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.oHotKeyControls.onpreupdate
		* Add a record to ToolHotKeyAssignments if necessary.
		
		local lcPRGName
		lcPRGName = Trim(MenuTools.PrgName)
		Thisform.oThor.AddToolHotKey(lcPRGName)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.oHotKeyControls.Refresh
		* Hotkeys are only allowed for popup menus and only if we're currently on the
		* popup node.
		
		Local lcPRGName
		DoDefault()
		
		lcPRGName = Trim (Evaluate ('MenuTools.PRGName'))
		If Thisform.oTools.GetKey (Upper (lcPRGName)) # 0
			This.Visible = .T.
			If Seek (ToolHotKeyAssignments.HotKeyID, 'HotKeyDefinitions', 'ID')
				This.txtHotKey.Value = Trim (HotKeyDefinitions.Descript)
			Else
				This.txtHotKey.Value = ''
			Endif Seek (ToolHotKeyAssignments.HotKeyID, 'HotKeyDefinitions', 'ID')
		Else
			This.Visible = .F.
		Endif
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.oToolInfo.lblLink.Refresh
		*** JRN 2023-08-23 : feature moved to 'Documentation and Settings'
		This.Enabled = .F.
		This.Visible = .F.
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.Selecttool1.cboCombo.Refresh
		Local lcPRGName
		If Not Empty (MenuTools.PRGName)
			lcPRGName	 = Trim (Evaluate ('MenuTools.PRGName'))
			This.Enabled = Thisform.oTools.GetKey (Upper (lcPRGName)) # 0 And Not MenuTools.Separator
		Else
			This.Enabled = .F.
		Endif
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.Selecttool1.Init
		DoDefault()
		Thisform.oSelectTool = This
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage2.Selecttool1.Refresh
		Local lcKey
		DoDefault()
		
		If Empty (MenuTools.PRGName)
			This.cboCombo.DisplayValue = ccSelectFromTreeView
			Try
				lcKey = This.otree.SelectedItem.Key
			Catch
				lcKey = ''
			EndTry 
			If '\' $ lcKey
				This.otree.SelectedItem	   = This.otree.nodes (Left (lcKey, Rat ('\', lcKey) - 1))
			Endif
		Endif
	ENDPROC

	PROCEDURE pgfProperties.Basepage3.cmdMoveDown.Click
		This.Parent.Parent.Parent.MoveItem(1)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage3.cmdMoveDown.Refresh
		* This isn't allowed if we're already at the last one.
		
		local loParent, ;
			lcKey, ;
			lnMenuID, ;
			laOrder[1]
		with This.Parent.Parent.Parent
			loParent = .oTree.SelectedItem.Parent
			lcKey    = .GetItemKey(loParent)
			lnMenuID = val(substr(lcKey, 2))
			select max(SortOrder) from MenuTools where MenuID = lnMenuID into array laOrder
			This.Enabled = MenuTools.SortOrder < Nvl(Evl(laOrder[1],0), 0) 
		endwith
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage3.cmdMoveUp.Click
		This.Parent.Parent.Parent.MoveItem(-1)
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage3.cmdMoveUp.Refresh
		* This isn't allowed if we're already at 1.
		
		This.Enabled = MenuTools.SortOrder > 1
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage3.cmdRemove.Click
		Local loParent
		loParent     = This.Parent.Parent.Parent
		loParent.RemoveMenuOrItem()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage3.cmdRemove.Init
		This.Caption = ccREMOVESeparator
		dodefault()
		
	ENDPROC

	PROCEDURE pgfProperties.Basepage3.cmdRemove.Refresh
		* We can only remove user-defined menus or items.
		
		local lcKey, ;
			lcType, ;
			loParent
		loParent     = This.Parent.Parent.Parent
		lcKey        = loParent.GetItemKey(loParent.oTree.SelectedItem)
		lcType       = left(lcKey, 1)
		This.Enabled = (lcType = ccKEY_MENU and not MenuDefinitions.Internal) or ;
			lcType = ccKEY_TOOL
		
	ENDPROC

ENDDEFINE

DEFINE CLASS presskeyprompt AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblPress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEsc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Baselabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Baselabel2" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*p: oform		&& A reference to the calling form
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BorderStyle = 2
		Caption = "Form"
		DoCreate = .T.
		Height = 124
		Left = 0
		Name = "presskeyprompt"
		oform = .NULL.
		TitleBar = 0
		Top = 0
		Width = 200
		_memberdata = <VFPData>
			<memberdata name="oform" display="oForm"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'Baselabel1' AS baselabel WITH ;
		Caption = "Or press [Esc] to cancel", ;
		Height = 15, ;
		Left = 18, ;
		Name = "Baselabel1", ;
		TabIndex = 1, ;
		Top = -24, ;
		Width = 116
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Baselabel2' AS baselabel WITH ;
		AutoSize = .F., ;
		Caption = "You may use any number of [Shift], [Ctrl] and [Alt]", ;
		Height = 52, ;
		Left = 18, ;
		Name = "Baselabel2", ;
		Top = 64, ;
		Width = 156, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblEsc' AS baselabel WITH ;
		Caption = "Or press [Esc] to cancel", ;
		Height = 18, ;
		Left = 18, ;
		Name = "lblEsc", ;
		TabIndex = 1, ;
		Top = 40, ;
		Width = 139
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblPress' AS baselabel WITH ;
		Caption = "Press the desired hotkey ...", ;
		Height = 18, ;
		Left = 18, ;
		Name = "lblPress", ;
		TabIndex = 1, ;
		Top = 16, ;
		Width = 158
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />
	
	PROCEDURE Init
		* Center the form in the current screen.
		
		lparameters tnFontSize
		
		with This
		
			.SetAll('FontSize', tnFontSize)
			.lblPress.Left = (This.Width - .lblPress.Width) / 2
			.lblEsc.Left = (This.Width - .lblEsc.Width) / 2
		
			lnRow = Mrow('',3)
			lnCol = Mcol('',3)
		
			.Top   = lnRow - Min(This.Height, 60) / 2
			.Left  = lnCol - This.Width / 2
		
		endwith
		
	ENDPROC

	PROCEDURE Baselabel1.Init
		This.Caption = ccCANCEL_HOTKEY
		dodefault()
		
	ENDPROC

	PROCEDURE lblEsc.Init
		This.Caption = ccCANCEL_HOTKEY
		dodefault()
		
	ENDPROC

	PROCEDURE lblPress.Init
		This.Caption = ccPRESS_HOTKEY
		dodefault()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS presskeypromptokl AS presskeyprompt OF "thor_ui.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		DoCreate = .T.
		Height = 124
		Left = 0
		Name = "presskeypromptokl"
		Top = 0
		Width = 200
		lblPress.Name = "lblPress"
		lblPress.Top = 16
		lblEsc.Name = "lblEsc"
		lblEsc.Top = 40
		Baselabel1.Name = "Baselabel1"
		Baselabel2.Caption = "For this tool, you may use only one of [Shift], [Ctrl] or [Alt]"
		Baselabel2.ForeColor = 255,0,0
		Baselabel2.Name = "Baselabel2"
	*</PropValue>

ENDDEFINE

DEFINE CLASS selecttool AS sfcombotree OF "thor_sfcombotree.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Baselabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPrompt1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdApply" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcNewFilter" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: addpemeditortools
		*m: applyfilter
		*p: cfilter
		*p: cnewfilter
	*</DefinedPropArrayMethod>

	*<PropValue>
		cfilter = 
		cnewfilter = 
		Height = 54
		lcloseonclick = .T.
		Name = "selecttool"
		Width = 250
		_memberdata = <VFPData>
			<memberdata name="addpemeditortools" display="AddPEMEditorTools"/>
			<memberdata name="cfilter" display="cFilter"/>
			<memberdata name="cnewfilter" display="cNewFilter"/>
		</VFPData>
		cboCombo.Anchor = 11
		cboCombo.Height = 24
		cboCombo.Left = 69
		cboCombo.Name = "cboCombo"
		cboCombo.Style = 0
		cboCombo.Top = 0
		cboCombo.Width = 176
		cboCombo.ZOrderSet = 0
		oTree.Height = 174
		oTree.Left = 5
		oTree.Name = "oTree"
		oTree.Top = 73
		oTree.Width = 166
		oTree.ZOrderSet = 3
		shpTreeView.Left = 0
		shpTreeView.Name = "shpTreeView"
		shpTreeView.Top = 69
		shpTreeView.ZOrderSet = 4
		oImageList.Height = 100
		oImageList.Left = 120
		oImageList.Name = "oImageList"
		oImageList.Top = 84
		oImageList.Width = 100
		oImageList.ZOrderSet = 5
	*</PropValue>

	ADD OBJECT 'Baselabel1' AS baselabel WITH ;
		Caption = "Filter", ;
		Left = 6, ;
		Name = "Baselabel1", ;
		TabIndex = 2, ;
		Top = 32, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'cmdApply' AS basecommandbutton WITH ;
		Anchor = 8, ;
		AutoSize = .T., ;
		Caption = "Apply", ;
		FontSize = 9, ;
		Height = 25, ;
		Left = 146, ;
		Name = "cmdApply", ;
		Top = 27, ;
		Width = 48, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdClear' AS basecommandbutton WITH ;
		Anchor = 8, ;
		AutoSize = .T., ;
		Caption = "Clear", ;
		FontSize = 9, ;
		Height = 25, ;
		Left = 201, ;
		Name = "cmdClear", ;
		Top = 27, ;
		Width = 44, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblPrompt1' AS baselabel WITH ;
		Caption = "Prompt", ;
		Left = 6, ;
		Name = "lblPrompt1", ;
		TabIndex = 2, ;
		Top = 3, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'txtcNewFilter' AS basetextbox WITH ;
		Anchor = 11, ;
		ControlSource = "This.Parent.cNewFilter", ;
		Height = 24, ;
		Left = 69, ;
		Name = "txtcNewFilter", ;
		Top = 28, ;
		Width = 70, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE addpemeditortools
		Lparameters lcParentKey, lnMenuID, raTools
		
		Local laMenuTools[1], lcFilter, lcHotKey, lcKey, lcKeystroke, lcMenuStatusBar, lcPRGName, lcPrompt
		Local lcStatusBar, llSeparator, lnI, lnID, lnIndex, lnSubMenuID, loNode
		
		lcFilter = Upper (This.cFilter)
		
		Select  MenuTools.Prompt					   ;
			  , Separator							   ;
			  , SubMenuID							   ;
			  , PRGName								   ;
			  , MenuTools.Id						   ;
			From MenuTools							   ;
				Left Join MenuDefinitions			   ;
					On SubMenuID = MenuDefinitions.Id  ;
			Where MenuID = lnMenuID					   ;
			Order By MenuTools.sortorder			   ;
			Into Array laMenuTools
		
		For lnI = 1 To _Tally
			lcPrompt	= Alltrim (laMenuTools (lnI, 1))
			llSeparator	= laMenuTools (lnI, 2)
			lnSubMenuID	= laMenuTools (lnI, 3)
			lcPRGName	= Alltrim (laMenuTools (lnI, 4))
			lnID		= laMenuTools (lnI, 5)
		
			Do Case
				Case llSeparator
					*	loNode	   = This.oTree.Nodes.Add (lcParentKey, 4, lcParentKey + '\' + Str (lnID), Replicate('-', 30))
				Case lnSubMenuID # 0
					lcKey  = lcParentKey + '\' + Chrtran (lcPrompt, '/\', '__')
					loNode = This.oTree.Nodes.Add (lcParentKey, 4, lcKey, lcPrompt, ccIMAGE_MENU)
					This.AddPEMEditorTools (lcKey, lnSubMenuID, @raTools)
					loNode.Expanded = Not Empty (lcFilter)
				Otherwise
					If Empty (lcFilter) Or 0 # Ascan (raTools, lcPRGName, 6, -1, -1, 15)
						lcKey	= lcParentKey + '\' + Str (lnID)
						= Seek (Upper (lcPRGName), 'ToolHotKeyAssignments', 'PRGName')
						lcHotKey = Thisform.GetHotKeyDescription (ToolHotKeyAssignments.HotKeyID)
						loNode	= This.oTree.Nodes.Add (lcParentKey, 4, lcKey,	;
							  lcPrompt + Iif (Empty (lcHotKey), '', ' (' + lcHotKey + ')'), ccIMAGE_TOOL)
						lnIndex	= Thisform.oTools.GetKey (Upper (lcPRGName))
						If lnIndex > 0
							loNode.Tag = Thisform.oTools (lnIndex)
						Endif
					Endif
			Endcase
		Endfor
		
		If  This.oTree.Nodes (lcParentKey).Children = 0
			This.oTree.Nodes.Remove (lcParentKey)
		Endif
		
	ENDPROC

	PROCEDURE applyfilter
		Thisform.lRefreshSelectToolTreeView = .T.
		With This
			.cFilter	= .cNewfilter
			.Refresh()
		Endwith
		
	ENDPROC

	PROCEDURE loadtree
		Local laPrev[1], laThis[1], laTools[1], lcCategory, lcFilter, lcHotKey, lcKey, lcPRGName
		Local lcParentKey, lcPrev, lcPreviousCategory, lcPrompt, lcSortKey, lcSource, lcSubCategory, lcThis
		Local lnI, lnJ, lnK, lnMax1, lnMax2, lnSort, lnStart, lnToolCount, loNode, loTool, loTools
		
		loTools		= Thisform.oTools
		lnToolCount	= 0
		
		This.oTree.Object.ImageList = Thisform.oImageList
		lcFilter				   = Upper (This.cFilter)
		
		Do While lnToolCount = 0
			For lnI = 1 To loTools.Count
				loTool		  = loTools.Item (lnI)
				lcSource	  = Evl (Trim (loTool.Source), '(No Source)')
				lcCategory	  = Evl (Trim (loTool.Category), lcSource)
				lcSubCategory = Trim (loTool.SubCategory)
				lnSort    = Evl(loTool.Sort, 9999)
				lcSortKey	  = loTool.InternalSort
				lcPRGName	  = loTool.PRGName
		
				If (Empty (lcFilter))  ;
						Or lcFilter $ Upper (lcSortKey + lcSource + loTool.Summary + loTool.Description)
					lnToolCount = lnToolCount + 1
					Dimension laTools (lnToolCount, 6)
					laTools (lnToolCount, 1) = lnI
					laTools (lnToolCount, 2) = lcSource
					laTools (lnToolCount, 3) = lcCategory
					laTools (lnToolCount, 4) = lcSubCategory
					laTools (lnToolCount, 5) = lcSortKey
					laTools (lnToolCount, 6) = lcPRGName
				Endif
			Endfor
			If lnToolCount = 0
				Messagebox ([No matches to '] + lcFilter + [' found.  Showing all tools.], 16)
				lcFilter = ''
			Endif
		Enddo && while lnToolCount = 0
		
		Asort (laTools, 5)
		lcPreviousCategory = ''
		
		For lnI = 1 To lnToolCount
		
			loTool	   = loTools.Item (laTools (lnI, 1))
			lcSource   = laTools (lnI, 2)
			lcCategory = laTools (lnI, 3)
		
			*!* * Removed 2/3/2012 
			*!* If lcSource == 'Thor'
			*!* 	Loop
			*!* Endif
		
			If Not lcCategory == lcPreviousCategory
				lnMax1 = Alines (laPrev, lcPreviousCategory, 5, '|')
				lnMax2 = Alines (laThis, lcCategory, 5, '|')
				If lnI = 1
					lnJ = 1
				Else
					lnStart	= 1 + Min (lnMax1, lnMax2)
					lcKey	= ''
					For lnJ = 1 To Min (lnMax1, lnMax2)
						lcPrev = laPrev[lnJ]
						lcThis = laThis[lnJ]
						If Not Upper (lcPrev) == Upper (lcThis)
							lnStart = lnJ
							Exit
						Endif
						lcKey = Upper (lcKey + Iif (lnJ > 1, '\', '') + lcThis)
					Endfor
				Endif
				For lnK = lnJ To lnMax2
					If lnK = 1
						lcKey			= Upper (laThis[1])
						loNode			= This.oTree.Nodes.Add (, 1, lcKey, laThis[1], ccIMAGE_MENU)
						loNode.Expanded	= Not Empty (lcFilter)
						loNode.Bold		= .T.
					Else
						lcParentKey		= Upper (lcKey)
						lcKey			= Upper (lcParentKey + '\' + Chrtran (laThis[lnK], '.,;\/', '-----'))
						loNode			= This.oTree.Nodes.Add (lcParentKey, 4, lcKey, laThis[lnK], ccIMAGE_MENU)
						loNode.Expanded	= Not Empty (lcFilter)
					Endif
				Endfor
			Endif
		
			lcPrompt  = loTool.Prompt
			lcPRGName = loTool.PRGName
			= Seek (Upper (lcPRGName), 'ToolHotKeyAssignments', 'PRGName')
			lcHotKey = Thisform.GetHotKeyDescription (ToolHotKeyAssignments.HotKeyID)
			loNode	   = This.oTree.Nodes.Add (lcKey, 4, lcKey + '\' + lcPRGName  ;
				  , lcPrompt + Iif (Empty (lcHotKey), '', ' (' + lcHotKey + ')'),  ccIMAGE_TOOL)
			loNode.Tag = loTool
		
			lcPreviousCategory = lcCategory
		
		Endfor && lnI = 1 To lnToolCount
		
		
		
	ENDPROC

	PROCEDURE opencontrol
		This.cNewFilter = This.cFilter
		DoDefault()
		
	ENDPROC

	PROCEDURE Refresh
		Local lcAlias, lcKey, lcPRGName, lcPrompt, loNode, loTool
		
		lcAlias	  = 'MenuTools'
		lcPRGName = Trim (Evaluate (lcAlias + '.PRGName'))
		lcPrompt  = Trim (Evaluate (lcAlias + '.Prompt'))
		
		With This.oTree
			Do Case
				Case .Nodes.Count = 0
					This.LoadTree()
				Case Thisform.lRefreshSelectToolTreeView
					This.oTree.SaveExpandedNodes()
					This.LoadTree()
					If Empty(This.cFilter)
						This.oTree.RestoreExpandedNodes()
					EndIf 
					Thisform.lRefreshSelectToolTreeView = .F.
			Endcase
		
			For Each loNode In .Nodes
				If 'O' = Type ('loNode.Tag')  ;
						And Upper (lcPRGName) == Upper (loNode.Tag.PRGName)
					.SelectedItem = loNode
					loNode.EnsureVisible()
		
					lcKey = loNode.Key
					Do While Not Empty (Justpath (lcKey))
						lcKey = Justpath (lcKey)
						.Nodes (lcKey).Expanded = .T.
					Enddo While Not Empty Justpath (lcKey)
				Endif Upper (lcPRGName) == Upper (loNode.Tag)
			Endfor Each loNode In .oTree.Nodes
		Endwith && This.oTree
		
		If Empty (lcPrompt)
			For Each loTool In Thisform.oTools
				If Upper (lcPRGName) == Upper (loTool.PRGName)
					lcPrompt = loTool.Prompt && loTool.Source + ': ' + Evl (loTool.Summary, loTool.Description)
				Endif
			Next loTool
		Endif
		This.cboCombo.DisplayValue = lcPrompt
		This.cboCombo.AddProperty('cOnEntryValue', lcPrompt)
		
		
	ENDPROC

	PROCEDURE Baselabel1.Refresh
		This.Enabled = not MenuTools.Separator
		
	ENDPROC

	PROCEDURE cboCombo.Valid
		* If the user changes the value, we need to reload the TreeView in case it
		* appears in multiple places.
		
		local lcValue
		lcValue = trim(This.DisplayValue)
		do case
			case empty(lcValue)
				messagebox(ccBLANK_PROMPT, MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
				This.DisplayValue = This.cOnEntryValue
				return 0
			case not lcValue == trim(This.cOnEntryValue)
				replace Prompt with lcValue in MenuTools
				This.Parent.Parent.Parent.Parent.LoadTree(.T.)
		endcase
		
	ENDPROC

	PROCEDURE cmdApply.Click
		This.Parent.ApplyFilter()
		
	ENDPROC

	PROCEDURE cmdApply.Refresh
		This.Enabled = Not This.Parent.cFilter == This.Parent.cNewFilter
		*	This.Visible = .F.
		
	ENDPROC

	PROCEDURE cmdClear.Click
		Thisform.lRefreshSelectToolTreeView = .T.
		With This.Parent
			.cFilter	= ''
			.cNewfilter	= ''
			.Refresh()
		Endwith
		
	ENDPROC

	PROCEDURE lblPrompt1.Refresh
		This.Enabled = not MenuTools.Separator
		
	ENDPROC

	PROCEDURE oTree.NodeClick
		*** ActiveX Control Event ***
		LPARAMETERS node
		
		If 'O' = Type('node.tag')
			DoDefault(node)
		EndIf 
		
	ENDPROC

	PROCEDURE txtcNewFilter.InteractiveChange
		DoDefault()
		This.Parent.cNewFilter = This.Value
		This.Parent.cmdApply.Refresh()
		This.Parent.cmdClear.Refresh()
		*	This.Parent.ApplyFilter()
	ENDPROC

	PROCEDURE txtcNewFilter.KeyPress
		lparameters tnKeyCode,  tnShiftAltCtrl
		
		If tnKeyCode = 13 and tnShiftAltCtrl = 0
		This.Parent.cNewFilter = This.Value
			This.Parent.ApplyFilter()
			NoDefault
		Else
			DoDefault(tnKeyCode,  tnShiftAltCtrl)
		EndIf 
		
	ENDPROC

ENDDEFINE

DEFINE CLASS selecttoolforbrowsing AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Baselabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcNewFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oTree" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: applyfilter
		*m: reloadtree
		*m: selectitem
		*p: cfilter
		*p: cnewfilter
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 15
		BackColor = 255,255,255
		BackStyle = 1
		cfilter = 
		cnewfilter = 
		Height = 95
		Name = "selecttoolforbrowsing"
		Width = 260
		_memberdata = <VFPData>
			<memberdata name="backcolor" display="BackColor"/>
			<memberdata name="cfilter" display="cFilter"/>
			<memberdata name="cnewfilter" display="cNewFilter"/>
			<memberdata name="selectitem" display="SelectItem"/>
			<memberdata name="applyfilter" display="ApplyFilter"/>
			<memberdata name="reloadtree" display="ReLoadTree"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'Baselabel1' AS baselabel WITH ;
		Caption = "Filter", ;
		Left = 7, ;
		Name = "Baselabel1", ;
		TabIndex = 2, ;
		Top = 5, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'oTree' AS basetree WITH ;
		Anchor = 15, ;
		Height = 63, ;
		Left = 1, ;
		Name = "oTree", ;
		TabIndex = 1, ;
		Top = 30, ;
		Width = 257
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/v///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////1IAbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDlFQ+h880BAwAAAIACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAEQBAAAAAAAACAAAAAIAAAD+////BAAAAAUAAAAGAAAABwAAAAkAAAD+/////vkEHHiYXREbFqAMDwKDYoIUM0EggAAACQGgAAgwYAALE8wWoBAAYAIgAAAD0AAAAJAQAADAAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAkQAoAAABMYWJlbEVkaXQACQAAAEkKAAAAAQAAAAoAAABMaW5lU3R5bGUACQAAAEkKAAAAAQAAAA0AAABNb3VzZVBvaW50ZXIACQAAAEkKAAAAAAAAAA4AAABQYXRoU2VwYXJhdG9yAAoAAABIAAAAAAEAAABcDAAAAE9MRURyYWdNb2RlAAkAAABJCgAAAAAAAAAMAAAAT0xFRHJvcE1vZGUACQAAAEkKAAAAAAAAAAsAAABBcHBlYXJhbmNlAAkAAABJCgAAAAAAAAAMAAAAQm9yZGVyU3R5bGUACQAAAEkKAAAAAQAAAAwAAABIb3RUcmFja2luZwAFAAAATAAABQBIw2oKAwAAAAAAAAAFAACAYOkYAAEAAABcAB/e7L0BAAUAqOk

	ADD OBJECT 'txtcNewFilter' AS basetextbox WITH ;
		Anchor = 11, ;
		ControlSource = "This.Parent.cNewFilter", ;
		Height = 22, ;
		Left = 45, ;
		Name = "txtcNewFilter", ;
		Top = 1, ;
		Width = 106
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE applyfilter
		Thisform.lRefreshSelectToolTreeView = .T.
		With This
			.cFilter	= .cNewfilter
			.Refresh()
		Endwith
		
	ENDPROC

	PROCEDURE Refresh
		Local llVisible
		This.oTree.Object.ImageList = Thisform.oImageList
		
		This.ReLoadTree()
		
		llVisible		   = This.oTree.Visible
		This.oTree.Visible = Not llVisible
		This.oTree.Visible = llVisible
		
	ENDPROC

	PROCEDURE reloadtree
		Local lcKey, loNode
		
		LockWindow(.T.)
		Try
			loNode = This.oTree.SelectedItem()
			lcKey  = loNode.Key
			loNode = .Null.
		Catch
			lcKey = ''
		Endtry
		
		This.oTree.Font.Size = Thisform.nFontSize
		Thisform.LoadTree (This.oTree, This.cFilter)
		
		If Not Empty (lcKey)
			Try
				This.oTree.Nodes (lcKey).Selected = .T.
				This.oTree.Nodes (lcKey).EnsureVisible ()
			Catch
		
			Endtry
		Endif
		
		LockWindow(.F.)
		
	ENDPROC

	PROCEDURE selectitem
		*==============================================================================
		* Method:			SelectItem
		* Purpose:			Selects the specified item in the ListView
		* Author:			Doug Hennig
		* Last revision:	03/31/2011
		* Parameters:		tuItem - a node or a node key
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		Lparameters tuItem
		
		Local lcPRGName, loItem
		loItem = tuItem.Tag
		With This.Parent
			This.Parent.SelectItem (loItem)
		Endwith
		
	ENDPROC

	PROCEDURE oTree.DblClick
		* If the selected item is a tool, edit it on a double-click.
		
		If Not Empty (This.Parent.Parent.cPRGName)
			Thisform.EditTool (This.Parent.Parent.cPRGName)
		Endif
		
	ENDPROC

	PROCEDURE oTree.Init
		This.Font.Size = 10
		
	ENDPROC

	PROCEDURE oTree.NodeClick
		lparameters toNode
		This.Parent.SelectItem(toNode)
		
	ENDPROC

	PROCEDURE txtcNewFilter.InteractiveChange
		DoDefault()
		This.Parent.cNewFilter = This.Value
		
		This.Parent.cFilter = This.Value
		This.Parent.ReLoadTree()
		
		*!* * Removed 6/21/2012 / JRN
		*!* This.Parent.cmdApply.Refresh()
		*!* This.Parent.cmdClear.Refresh()
		
	ENDPROC

	PROCEDURE txtcNewFilter.KeyPress
		lparameters tnKeyCode,  tnShiftAltCtrl
		
		If tnKeyCode = 13 and tnShiftAltCtrl = 0
			This.Parent.ApplyFilter()
			NoDefault
		Else
			DoDefault(tnKeyCode,  tnShiftAltCtrl)
		EndIf 
		
	ENDPROC

ENDDEFINE

DEFINE CLASS selecttoolforlauncher AS selecttoolforbrowsing OF "thor_ui.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "thor_ui.h"
	*<PropValue>
		Height = 172
		Name = "selecttoolforlauncher"
		Width = 200
		txtcNewFilter.Left = 40
		txtcNewFilter.Name = "txtcNewFilter"
		txtcNewFilter.Top = 3
		txtcNewFilter.Width = 129
		Baselabel1.Left = 3
		Baselabel1.Name = "Baselabel1"
		Baselabel1.Top = 7
		oTree.Height = 143
		oTree.Left = 1
		oTree.Name = "oTree"
		oTree.Top = 28
		oTree.Width = 197
	*</PropValue>
	
	PROCEDURE Baselabel1.RightClick
		Thisform.ResetAllDefaults()
		
	ENDPROC

	PROCEDURE oTree.DblClick
		* If the selected item is a tool, run it on a double-click.
		
		If (Not Empty (This.Parent.Parent.Parent.Parent.Parent.cPRGName)) and not Thisform.lHideRightSide
			Thisform.RunTool (This.Parent.Parent.Parent.Parent.Parent.oTool.FullFileName)
		Endif
		
	ENDPROC

	PROCEDURE oTree.KeyPress
		*** ActiveX Control Event ***
		Lparameters keyascii
		
		* If the selected item is a tool, run it on a double-click.
		
		If keyascii = 13 And		;
				Not Empty (This.Parent.Parent.Parent.Parent.Parent.cPRGName)
			Thisform.RunTool (This.Parent.Parent.Parent.Parent.Parent.oTool.FullFileName)
		Endif
		
	ENDPROC

	PROCEDURE oTree.NodeCheck
		*** ActiveX Control Event ***
		LPARAMETERS node
		
	ENDPROC

	PROCEDURE oTree.NodeClick
		*** ActiveX Control Event ***
		LPARAMETERS node
		 
		DoDefault(node)
		If (Not Empty (This.Parent.Parent.Parent.Parent.Parent.cPRGName)) and Thisform.lHideRightSide
			Thisform.RunTool (This.Parent.Parent.Parent.Parent.Parent.oTool.FullFileName)
		Endif
		
	ENDPROC

ENDDEFINE

DEFINE CLASS selecttoolformenus AS selecttool OF "thor_ui.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		Name = "selecttoolformenus"
		cboCombo.Name = "cboCombo"
		Baselabel1.Name = "Baselabel1"
		lblPrompt1.Name = "lblPrompt1"
		oTree.Height = 174
		oTree.Left = 5
		oTree.Name = "oTree"
		oTree.Top = 73
		oTree.Width = 166
		shpTreeView.Name = "shpTreeView"
		oImageList.Height = 100
		oImageList.Left = 120
		oImageList.Name = "oImageList"
		oImageList.Top = 84
		oImageList.Width = 100
		txtcNewFilter.Name = "txtcNewFilter"
		cmdApply.Name = "cmdApply"
		cmdClear.Name = "cmdClear"
	*</PropValue>
	
	PROCEDURE itemselected
		* When the user selects a tool, update the tables; we need to reload the
		* TreeView in case it's used in multiple places.
		
		Local lcPRGName, lcPrompt, lcStatusBarText, loNode, loTool
		With This
			loNode = .oTree.SelectedItem()
			If 'O' = Type ('loNode.Tag')
				loTool			= loNode.Tag
				lcPRGName		= loTool.PRGName
				lcPrompt		= loTool.Prompt
				lcStatusBarText	= loTool.StatusBarText
		
				Replace	PRGName	   With	 lcPRGName		  ;
						Prompt	   With	 lcPrompt,		  ;
						StatusBar  With	 lcStatusBarText  ;
					In MenuTools
		
				.Parent.Parent.Parent.LoadTree (.T.)
				.Parent.Refresh()
				.Parent.Parent.Parent.oLastToolSelected = loTool
			Endif
		Endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sethotkeyform AS baseform OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Hotkeycontrols1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: executecommand
		*p: othor
	*</DefinedPropArrayMethod>

	*<PropValue>
		DataSession = 1
		DoCreate = .T.
		Height = 31
		lsavesettings = .F.
		Name = "sethotkeyform"
		othor = .NULL.
		TitleBar = 0
		Visible = .T.
		Width = 180
		_memberdata = <VFPData>
			<memberdata name="executecommand" display="ExecuteCommand"/>
			<memberdata name="othor" display="oThor"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'Hotkeycontrols1' AS hotkeycontrols WITH ;
		Left = 0, ;
		Name = "Hotkeycontrols1", ;
		Top = 0, ;
		cmdGetHotKey.Name = "cmdGetHotKey", ;
		lblHotKey.Name = "lblHotKey", ;
		txtHotKey.Name = "txtHotKey", ;
		cmdClear.Name = "cmdClear"
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />
	
	PROCEDURE executecommand
		Lparameters lcAlias, lcCommand
		
		This.Hotkeycontrols1.cAlias = lcAlias
		
		Do Case
			Case Empty(lcCommand)
		
			Case lcCommand = 'Set'
				This.Hotkeycontrols1.StartHotKey()
		
			Case lcCommand = 'Clear'
				This.Hotkeycontrols1.ClearHotKey()
		
		Endcase
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS startuptools AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="gridKeys" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColPrompt.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColPrompt.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColDescription.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColDescription.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColumnCheckBox.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gridKeys.ColumnCheckBox.check1" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: createcursor
		*m: griddoubleclick
		*m: loadlist
		*m: setdescriptionwidth
		*m: setgridorder
		*m: togglestartupbit
		*p: ignorenextloadlist
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 15
		Height = 212
		ignorenextloadlist = .F.
		Name = "startuptools"
		Width = 332
		_memberdata = <VFPData>
			<memberdata name="createcursor" display="CreateCursor"/>
			<memberdata name="ignorenextloadlist" display="IgnoreNextLoadList"/>
			<memberdata name="loadlist" display="LoadList"/>
			<memberdata name="griddoubleclick" display="GridDoubleClick"/>
			<memberdata name="togglestartupbit" display="ToggleStartupBit"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'gridKeys' AS basegrid WITH ;
		Anchor = 15, ;
		ColumnCount = 3, ;
		DeleteMark = .F., ;
		GridLineColor = 192,192,192, ;
		Height = 200, ;
		Left = 6, ;
		Name = "gridKeys", ;
		Panel = 1, ;
		RecordMark = .F., ;
		RecordSource = "crsr_StartUps", ;
		Top = 6, ;
		Width = 320, ;
		Column1.ControlSource = "", ;
		Column1.Name = "ColPrompt", ;
		Column1.ReadOnly = .T., ;
		Column1.Width = 200, ;
		Column2.ControlSource = "", ;
		Column2.Name = "ColDescription", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 350, ;
		Column3.Alignment = 2, ;
		Column3.Name = "ColumnCheckBox", ;
		Column3.ReadOnly = .F., ;
		Column3.Sparse = .F.
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="grid" />

	ADD OBJECT 'gridKeys.ColDescription.Header1' AS header WITH ;
		Caption = "Description", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'gridKeys.ColDescription.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'gridKeys.ColPrompt.Header1' AS header WITH ;
		Caption = "Tool", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'gridKeys.ColPrompt.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'gridKeys.ColumnCheckBox.check1' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Centered = .T., ;
		Name = "check1", ;
		ReadOnly = .F.
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'gridKeys.ColumnCheckBox.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Startup?", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />
	
	PROCEDURE createcursor
		Lparameters lcCursorName
		
		If Not Used(lcCursorName)
			Create Cursor (lcCursorName) (			;
				  Prompt			C (100),		;
				  Description  		C (200),		;
				  StartUpTmp		L,				;
				  PRGName 	   		C (60),			;
				  InternalSort  	C (100),		;
				  CanRunAtStartUp 	L,				;
				  PrivateCop		N(4),			;
				  MissingPRG		L				;
				  )
			Index On InternalSort Tag Order
		Else
			Select (lcCursorName)
			Zap
		Endif
		
		
		
		
	ENDPROC

	PROCEDURE griddoubleclick
	ENDPROC

	PROCEDURE loadlist
		Local lnI, loTool, loTools
		
		This.CreateCursor ('crsr_StartUps')
		Set Relation To Upper(PRGName) Into StartupTools
		
		loTools		= Thisform.oTools
		
		For lnI = 1 To loTools.Count
			loTool		  = loTools.Item (lnI)
			Insert Into crsr_StartUps												;
				(PRGName, Prompt, Description, InternalSort, CanRunAtStartup)		;
				Values																;
				(Justfname(loTool.FullFileName),									;
				  loTool.Prompt,													;
				  Evl(loTool.Description, loTool.Prompt),							;
				  loTool.InternalSort,												;
				  loTool.CanRunAtStartup And (										;
					Pemstatus(loTool, 'CanRunAtStartUp', 0)							;
					Or Not Upper(Evl(loTool.Category, loTool.Source)) == 'THOR'))
		Endfor
		
		Insert Into crsr_StartUps											;
			(PRGName, Prompt, Description, InternalSort, MissingPRG)		;
			Select  PRGName,												;
					PRGName,												;
					'<' + Trim(PRGName) + '> not found',					;
					'ZZZ',													;
					.T.														;
				From StartupTools											;
				Where Startup												;
					And Not Upper(PRGName) In (Select  Upper(PRGName)		;
												   From crsr_StartUps)
		
		Replace All StartupTmp With StartupTools.Startup
		Delete For Not (StartupTmp Or CanRunAtStartup)
		Goto Top
		
	ENDPROC

	PROCEDURE setdescriptionwidth
	ENDPROC

	PROCEDURE setgridorder
	ENDPROC

	PROCEDURE togglestartupbit
		If empty(StartUpTools.Id)
			Insert Into StartUpTools (PrgName, StartUp) Values (crsr_StartUps.PrgName, .T.)
		Else
			Replace StartUp With Not StartUp In StartUpTools
		Endif
		
		DoDefault()
		
	ENDPROC

	PROCEDURE gridKeys.ColDescription.Header1.Click
		This.Parent.Parent.Parent.SetGridOrder('Descript')
		
	ENDPROC

	PROCEDURE gridKeys.ColPrompt.Header1.Click
		This.Parent.Parent.Parent.SetGridOrder('Source')
		
	ENDPROC

	PROCEDURE gridKeys.Init
		Local lnI
		With This
		
			.SetAll('DynamicForeColor', 'IIF(MissingPRG, Rgb(255,0,0), Rgb(0,0,0))')
			.SetAll('DynamicBackColor', 'IIF(CanRunAtStartUp or MissingPRG, Rgb(255,255,255), Rgb(192,192,192))')
			.SetAll('DynamicFontBold', 'StartUpTmp')
			BindEvent(This.ColumnCheckBox.check1, 'Valid', This.Parent, 'ToggleStartUpBit')
		
			.Parent.CreateCursor ('crsr_StartUps')
			.FontName = Thisform.FontName
			.FontSize = 8
		
		Endwith
		
	ENDPROC

	PROCEDURE gridKeys.RightClick
		Local loContextMenu As 'contextmenu' Of  'Thor_menu'
		Local loForm As 'SetHotKeyForm' Of    'Thor_UI.vcx'
		Local lcAction, lcAlias, lnID, lnType
		
		lnType = crsr_GridKeys.Type
		lnID   = crsr_GridKeys.Id
		Do Case
			Case lnType = 1
				lcAlias = 'MenuDefinitions'
			Case lnType = 2
				lcAlias = 'ToolHotKeyAssignments'
			Otherwise
				Return
		Endcase
		
		If Seek (lnID, lcAlias, 'ID')
			This.Parent.IgnoreNextLoadList = .T.
			loContextMenu				   = Newobject ('contextmenu', 'Thor_menu', Thisform.cThorFolder + 'Thor.App')
		
			With loContextMenu
				.AddMenuItem ('Set hot key', , , , , 'Set')
				.AddMenuItem()
				.AddMenuItem ('Clear hot key', , , , , 'Clear')
				If .Activate()
					lcAction = .Parameters
		
					loForm		 = Newobject ('SetHotKeyForm',   'Thor_UI.vcx', '')
					loForm.oThor = Thisform.oThor
					loForm.ExecuteCommand (lcAlias, lcAction)
					loForm.Release()
					loForm = .Null.
				Endif
			Endwith
			This.Parent.IgnoreNextLoadList = .F.
			This.Parent.LoadList()
		Endif
		
	ENDPROC

	PROCEDURE gridKeys.UIEnable
		LPARAMETERS lEnable
		
		If lEnable
			This.SetFocus()
		EndIf
		
	ENDPROC

ENDDEFINE

DEFINE CLASS thor_tree AS basetree OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="thor_tree" Parent="" ObjName="thor_tree" OLEObject="C:\WINDOWS\system32\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALB2m5UpOMwBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////v////7///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+2kEHHiYXREbFqAMDwKDYoIUM0EggAAABWCgAAVgoAALE8wWoBAAYAIgAAANwAXADoAwAASAByAEmX4wUB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEyAC0AQwA2ADgANgAtADQAYwBkAGEALQA4ADYAOABGAC0AQQABAACARQBEAEUAMQA4ADYAMQA1ADQAfQAgAEMAOgBcAFAAcgBvAGcAcgBhAG0AIABGAGkAbABlAHMAXABDAG8AAAAFABiZ4wUGAGIAAAAAAAUAAIBw6xIAAQAAAFwAH97svQEABQC06xIAZQBkAFwAQQB1AGQAaQBvAFAAbABhAHkAZQByAC4AZABsAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	*<PropValue>
		cselectednode = 
		Height = 100
		Name = "thor_tree"
		Width = 100
		_memberdata = <VFPData>
			<memberdata name="saveexpandednodes" display="SaveExpandedNodes"/>
			<memberdata name="restoreexpandednodes" display="RestoreExpandedNodes"/>
			<memberdata name="cselectednode" display="cSelectedNode"/>
			<memberdata name="anodes" display="aNodes"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE restoreexpandednodes
		Local lcKey, lnI, lnPos, loNode
		With This
			For lnI = 1 To .Nodes.Count
				loNode = .Nodes.Item[lnI]
				lcKey  = loNode.Key
				lnPos  = Ascan (.aNodes, lcKey, -1, -1, 1, 15)
				If lnPos > 0
					If .aNodes[lnPos, 2]
						loNode.Expanded = .T.
					Endif laNodes[lnPos, 2]
					If lcKey == .cSelectedNode
						.SelectItem (loNode)
					Endif lcKey == .cSelectedNode
				Endif lnPos > 0 ...
			Next lnI
		Endwith && this
		
	ENDPROC

	PROCEDURE saveexpandednodes
		Local lnI, loNode
		Local aNodes[1]
		With This
			Dimension .aNodes[.Nodes.Count, 2]
			For lnI = 1 To .Nodes.Count
				loNode = .Nodes.Item[lnI]
				.aNodes[lnI, 1] = loNode.Key
				.aNodes[lnI, 2] = loNode.Expanded
			Next lnI
			.cSelectedNode = .SelectedItem.Key
			.Nodes.Clear()
		Endwith && This
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS thorhotkey AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Thorhotkeysource1" UniqueID="" Timestamp="" />

	*<PropValue>
		Height = 80
		Name = "thorhotkey"
		Width = 300
	*</PropValue>

	ADD OBJECT 'Thorhotkeysource1' AS thorhotkeysource WITH ;
		Left = 6, ;
		Name = "Thorhotkeysource1", ;
		Top = 6, ;
		Visible = .T., ;
		cmdGetHotKey.Name = "cmdGetHotKey", ;
		lblHotKey.Name = "lblHotKey", ;
		txtHotKey.Name = "txtHotKey", ;
		cmdClear.Name = "cmdClear"
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

ENDDEFINE

DEFINE CLASS thorhotkeysource AS hotkeycontrols OF "thor_ui.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "thor_ui.h"
	*<PropValue>
		Name = "thorhotkeysource"
		Style = 0
		cmdGetHotKey.Name = "cmdGetHotKey"
		lblHotKey.Name = "lblHotKey"
		txtHotKey.Name = "txtHotKey"
		cmdClear.Name = "cmdClear"
	*</PropValue>
	
	PROCEDURE clearhotkey
		*==============================================================================
		* Method:			ClearHotKey
		* Purpose:			Clears the current hotkey
		* Author:			Doug Hennig
		* Last revision:	04/12/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	Thor is positioned to the desired record
		* Environment out:	Thor.Value is blanked
		*					controls are refreshed
		*					see This.CancelHotKey for other changes
		*==============================================================================
		
		with This
			.CancelHotKey()
			This.Parent.Parent.Parent.SetOption('ThorHotKey', 'Thor', '')
			.Refresh()
		endwith
		
	ENDPROC

	PROCEDURE keypressed
		*==============================================================================
		* Method:			KeyPressed
		* Purpose:			Called when the user presses a hotkey
		* Author:			Doug Hennig
		* Last revision:	04/12/2011
		* Parameters:		hWnd   - the hWnd of the form
		*					Msg    - the ID of the Windows message
		*					wParam - the scancode of the key pressed
		*					lParam - modifiers for the keypress (see WM_KEYDOWN in MSDN
		*						for details)
		* Returns:			none
		* Environment in:	MenuDefinitions and ToolHotKeyAssignments are open
		*					Thor is open and positioned to the desired record
		* Environment out:	if the user pressed a valid hotkey and it isn't already
		*						used by another record, its description is put into
		*						the current record in Thor
		*					see This.CancelHotKey for other changes
		*==============================================================================
		
		Local loKey As 'HotKey' Of 'Thor_Utils.vcx'
		Local lcAlias, lcDescrip, lcFkyValue, lcThorKey, llFound, lnHotKeyID, lnID, lnRecno, lnScanCode
		Local lnSelect, lnShift, lnShifts
		
		loKey = Newobject ('HotKey', 'Thor_Utils.vcx')
		loKey.GetKeyState()
		lnScanCode		= loKey.GetScanCode (This.nInKey)
		loKey.nScanCode	= lnScanCode
		if loKey.IsValid(.T.)
			lcDescrip = loKey.GetHotKeyDescription()
			lnShift   = loKey.GetModifiersValue()
		
		* Find the HotKeyDefinitions record for the hotkey.
		
			lnSelect = select()
			select HotKeyDefinitions
			lnShifts = loKey.GetShifts()
			Locate For nKeyCode = lnScanCode And nShifts = lnShifts
			lcFkyValue = loKey.GetKeyCode()
			lnHotKeyID = ID
			select (lnSelect)
		
		* See if the hotkey is already in use by another record.
		
			lnRecno1 = recno('MenuDefinitions')
			lnRecno2 = recno('ToolHotKeyAssignments')
			llFound  = lnHotKeyID > 0 and ;
				(seek(lnHotKeyID, 'MenuDefinitions', 'HotKeyID') or ;
				seek(lnHotKeyID, 'ToolHotKeyAssignments', 'HotKeyID'))
			if between(lnRecno1, 1, reccount('MenuDefinitions'))
				go lnRecno1 in MenuDefinitions
			endif between(lnRecno1, 1, reccount('MenuDefinitions'))
			if between(lnRecno2, 1, reccount('ToolHotKeyAssignments'))
				go lnRecno2 in ToolHotKeyAssignments
			endif between(lnRecno2, 1, reccount('ToolHotKeyAssignments'))
			if llFound
				messagebox(ccHOTKEY_ALREADY_USED, MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
		
		* Call the OnPreUpdate hook method, update the HotKeyID in the desired table,
		* refresh the controls, and call the OnKeyPressed hook method.
		
			Else
				This.Parent.Parent.Parent.SetOption('ThorHotKey', 'Thor', lcDescrip)
				This.Refresh()
			endif llFound
		else
		
		* Tell the user that we don't have a valid hotkey.
		
			messagebox(ccINVALID_HOT_KEY, MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
		endif loKey.IsValid(.T.)
		
	ENDPROC

	PROCEDURE Refresh
		*	This.Visible = upper(Thor.Class) = upper(This.Class)
		This.txtHotKey.Value = This.Parent.Parent.Parent.GetOption('ThorHotKey', 'Thor')
		
	ENDPROC

	PROCEDURE lblHotKey.Init
		*
	ENDPROC

ENDDEFINE

DEFINE CLASS thoroptions AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cntNonDefault" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Thor_sfsplitterh1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDefault" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDefault.lblValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDefault.edtValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDefault.spnValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDefault.chkValue" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: getoption
		*m: loadlist		&& Loads the ListView with options
		*m: reloadlist
		*m: resizecolumn1
		*m: selectitem		&& Fired when the user selects an item
		*m: setoption
		*p: cclass
		*p: ctool
		*p: lcolumnsadded
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 15
		BorderWidth = 1
		cclass = 
		ctool = <All>
		Height = 260
		lcolumnsadded = .F.
		Name = "thoroptions"
		Width = 616
		_memberdata = <VFPData>
			<memberdata name="loadlist" display="LoadList"/>
			<memberdata name="selectitem" display="SelectItem"/>
			<memberdata name="lcolumnsadded" display="lColumnsAdded"/>
			<memberdata name="cclass" display="cClass"/>
			<memberdata name="reloadlist" display="ReloadList"/>
			<memberdata name="ctool" display="cTool"/>
			<memberdata name="resizecolumn1" display="ResizeColumn1"/>
			<memberdata name="getoption" display="GetOption"/>
			<memberdata name="setoption" display="SetOption"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cntDefault' AS thoroptionscontainer WITH ;
		Anchor = 15, ;
		Height = 260, ;
		Left = 210, ;
		Name = "cntDefault", ;
		Top = 0, ;
		Width = 405, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'cntDefault.chkValue' AS basecheckbox WITH ;
		Alignment = 0, ;
		Caption = "Value", ;
		Left = 9, ;
		Name = "chkValue", ;
		Top = 133
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntDefault.edtValue' AS baseeditbox WITH ;
		Anchor = 11, ;
		Height = 72, ;
		Left = 9, ;
		Name = "edtValue", ;
		Top = 26, ;
		Width = 389
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'cntDefault.lblValue' AS baselabel WITH ;
		Anchor = 0, ;
		Caption = "Value", ;
		Left = 12, ;
		Name = "lblValue", ;
		Top = 8
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'cntDefault.spnValue' AS basespinner WITH ;
		Left = 9, ;
		Name = "spnValue", ;
		Top = 102
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="spinner" />

	ADD OBJECT 'cntNonDefault' AS thoroptionscontainer WITH ;
		Anchor = 15, ;
		Height = 260, ;
		Left = 210, ;
		Name = "cntNonDefault", ;
		Top = 0, ;
		Width = 405, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'oList' AS olecontrol WITH ;
		Anchor = 5, ;
		Height = 260, ;
		Left = 0, ;
		Name = "oList", ;
		Top = 0, ;
		Width = 200, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKATlbLPyc0BAwAAAAACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcgAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAANMAAAAAAAAABgAAAAIAAAD+////BAAAAAUAAAAHAAAA/vi4XREbFqAMDwKDYoIUM0EggAAACsFAAA3xoAAE4IfesBAAYAHAAAAAAAAAAAAAAAI4ABAKwUAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAACgAAAExhYmVsRWRpdAAJAAAASQoAAAABAAAACgAAAExhYmVsV3JhcAAFAAAATAAAAAANAAAATW91c2VQb2ludGVyAAkAAABJCgAAAAAAAAAFAAAAVmlldwAJAAAASQoAAAADAAAACwAAAEFwcGVhcmFuY2UACQAAAEkKAAAAAAAAAA4AAABGdWxsUm93U2VsZWN0AAUAAABMAQAAAAoAAAAAAAUA6N8sCQMAAP8IAACABQAAgPi+LwkAAAAAAAAAAAAAAAAf3uy9AQAFAHC+LwkAAAAAAAAAAAAAAAAAAAAAR3JpZExpbmVzAAUAAABMAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	ADD OBJECT 'Thor_sfsplitterh1' AS thor_sfsplitterh WITH ;
		Anchor = 5, ;
		cobject1name = oList, ;
		cobject2name = cntDefault, cntNonDefault, ;
		Height = 260, ;
		Left = 200, ;
		lshowgripper = .T., ;
		Name = "Thor_sfsplitterh1", ;
		nobject1minsize = 200, ;
		nobject2minsize = 345, ;
		Top = 0, ;
		Visible = .T., ;
		Width = 10, ;
		ZOrderSet = 2, ;
		gripper.GripperDot1.Name = "GripperDot1", ;
		gripper.GripperDot1.ShapeDark.Name = "ShapeDark", ;
		gripper.GripperDot1.ShapeLight.Name = "ShapeLight", ;
		gripper.GripperDot1.ShapeMiddle.Name = "ShapeMiddle", ;
		gripper.GripperDot2.Name = "GripperDot2", ;
		gripper.GripperDot2.ShapeDark.Name = "ShapeDark", ;
		gripper.GripperDot2.ShapeLight.Name = "ShapeLight", ;
		gripper.GripperDot2.ShapeMiddle.Name = "ShapeMiddle", ;
		gripper.GripperDot3.Name = "GripperDot3", ;
		gripper.GripperDot3.ShapeDark.Name = "ShapeDark", ;
		gripper.GripperDot3.ShapeLight.Name = "ShapeLight", ;
		gripper.GripperDot3.ShapeMiddle.Name = "ShapeMiddle", ;
		gripper.GripperDot4.Name = "GripperDot4", ;
		gripper.GripperDot4.ShapeDark.Name = "ShapeDark", ;
		gripper.GripperDot4.ShapeLight.Name = "ShapeLight", ;
		gripper.GripperDot4.ShapeMiddle.Name = "ShapeMiddle", ;
		gripper.GripperDot5.Name = "GripperDot5", ;
		gripper.GripperDot5.ShapeDark.Name = "ShapeDark", ;
		gripper.GripperDot5.ShapeLight.Name = "ShapeLight", ;
		gripper.GripperDot5.ShapeMiddle.Name = "ShapeMiddle", ;
		gripper.Name = "gripper"
		*< END OBJECT: ClassLib="thor_sf_splitter.vcx" BaseClass="container" />
	
	PROCEDURE getoption
		Lparameters tcKey, tcTool
		Return ThisForm.oThor.GetOption (tcKey, tcTool)
		
	ENDPROC

	PROCEDURE loadlist		&& Loads the ListView with options
		*==============================================================================
		* Method:			LoadList
		* Purpose:			Loads the ListView with tools
		* Author:			Doug Hennig
		* Last revision:	04/09/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	the Thor table is open
		* Environment out:	the ListView has been loaded with options
		*==============================================================================
		
		Lparameters lcTool
		
		Local lcCaption, lcLastTool, lnSelect, loItem
		lnSelect = Select()
		Select Thor
		Set Order To Order
		lcLastTool = ''
		
		With This.oList.ListItems
			.Clear()
			Scan For (Not Empty(Class))				;
					And (Empty(lcLastTool) Or lcLastTool # Tool)
				lcCaption = Trim(Caption)
				If Tool = 'Thor'
					lcCaption = 'Thor: ' + Strtran(lcCaption, ':', '')
				Endif
				loItem			   = .Add(, Upper(Trim(Tool)), Trim(Tool))
				*!* * Removed 5/28/2012 / JRN
				*!* loItem.SubItems(1) = Display
				loItem.Tag = Recno()
				lcLastTool = Tool
			Endscan
		Endwith
		
		* Select the first item.
		
		This.SelectItem(This.oList.ListItems.Item(1))
		Select (lnSelect)
		
	ENDPROC

	PROCEDURE Refresh
		This.ResizeColumn1()
	ENDPROC

	PROCEDURE reloadlist
		Local lnItem, loItem
		With This.oList
			Try
				For lnItem = 1 To .ListItems.Count
					loItem			   = .ListItems[lnItem]
					Goto (loItem.Tag) in Thor
					*!* * Removed 5/28/2012 / JRN
					*!* loItem.SubItems(1) = Display
				EndFor
			Catch
			
			EndTry
		Endwith
		
	ENDPROC

	PROCEDURE Resize
		This.ResizeColumn1()
		
	ENDPROC

	PROCEDURE resizecolumn1
		* Adjust the width of column 1 based on the ListView width and the width of
		* column 2.
		
		Local llScroll, lnCol1Width, lnCol2Width, lnWidth
		With This.oList
			*!* * Removed 5/28/2012 / JRN
			*!* lnCol1Width	= .ColumnHeaders(1).Width
			*!* lnCol2Width	= .ColumnHeaders(2).Width
		
			*!* lnCol2Width = Max(110, Min (lnCol2Width, .Width - lnCol1Width - Sysmetric(5)))
			*!* .ColumnHeaders(2).Width = lnCol2Width
			*!* .ColumnHeaders(1).Width = .Width - lnCol2Width - Sysmetric(5)
			.ColumnHeaders(1).Width = .Width - Sysmetric(5)
		Endwith
		
		Return
		
		*!* * Removed 5/28/2012 / JRN
		
		*!* With This.oList
		
		*!* 	* See if the ListView has a vertical scrollbar.
		
		*!* 	#Define WS_HSCROLL 0x100000
		*!* 	#Define WS_VSCROLL 0x200000
		*!* 	#Define GWL_STYLE -16
		*!* 	Declare Integer GetWindowLong In Win32API Integer HWnd, Integer nIndex
		*!* 	llScroll = Bitand(GetWindowLong(.HWnd, GWL_STYLE), WS_VSCROLL) <> 0
		
		*!* 	* Set the width of the second column.
		
		*!* 	lnWidth = .Width - .ColumnHeaders.Item(2).Width - Sysmetric(4) -  ;
		*!* 		Iif(llScroll, Sysmetric(7), 0) + 6
		*!* 	&& 6 is a fudge factor for width and depends on whether a border is
		*!* 	&& used or not
		*!* 	.ColumnHeaders.Item(1).Width = Max(lnWidth, 100)
		*!* Endwith
		
	ENDPROC

	PROCEDURE selectitem		&& Fired when the user selects an item
		*==============================================================================
		* Method:			SelectItem
		* Purpose:			Selects the specified item in the ListView
		* Author:			Doug Hennig
		* Last revision:	04/09/2011
		* Parameters:		tuItem - a node or a node key
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		Lparameters tuItem
		Local lcClass, lcClassLibrary, lcKey, lnAnchor, lnI, lnSelect, loItem, loObject
		With This
		
			* If a key was passed instead of an item, get it.
		
			Do Case
				Case Vartype (tuItem) = 'O'
					loItem = tuItem
				Case Type ('.oList.ListItems.Item(Upper(Trim(tuItem)))') = 'O'
					loItem = .oList.ListItems.Item(Upper(Trim(tuItem)))
				Otherwise
					loItem = .Null.
			Endcase
		
			* If we have an item, select it and find the record in Thor.
		
			If Vartype (loItem) = 'O'
				.oList.SelectedItem	= loItem
				lcKey				= loItem.Key
				lnSelect			= Select()
				Select Thor
				Locate For Upper(Trim(Tool)) == Upper(Trim(lcKey)) 
		
				* If we have a custom control defined, create it if it isn't already.
		
				lcClass		   = Trim (Class)
				This.cClass	   = lcClass
				lcClassLibrary = Trim (Library)
		
				Do Case
					Case Empty (lcClass)
						With This.cntDefault
							.cKey	  = Key
							.cTool	  = Tool
							.cCaption = Caption
							.cType	  = Type
						Endwith
		
					Case Type ('This.cntNonDefault.' + lcClass) = 'U'
						With This.cntNonDefault
							.cKey	  = Key
							.cTool	  = Tool
							.cCaption = Caption
							.cType	  = Type
							For lnI = .ControlCount To 1 Step - 1
								.RemoveObject (.Controls[lnI].Name)
							Endfor
						Endwith
		
						Locate For Tool + Key = lcKey
						This.cntNonDefault.Newobject (lcClass, lcClass, lcClassLibrary)
						loObject = Evaluate ('This.cntNonDefault.' + lcClass)
						With loObject
							* cause the interior objects, if any, to adjust
							.Height	= .Parent.Height
							.Width	= .Parent.Width - 1
		
							* and correct anchoring for this object itself
							lnAnchor = .Anchor
							.Anchor	 = 0
							.Height	 = .Parent.Height
							.Width	 = .Parent.Width
							.Visible = .T.
							.Anchor	 = lnAnchor
						Endwith
				Endcase
				.Refresh()
			Endif Vartype (loItem) = 'O'
		Endwith
		
	ENDPROC

	PROCEDURE setoption
		Lparameters tcKey, tcTool, tuValue, tuDisplayValue
		Local luResult
		luResult = Thisform.oThor.SetOption (tcKey, tcTool, tuValue, tuDisplayValue)
		Return luResult
		
		
	ENDPROC

	PROCEDURE UIEnable
		lparameters tlEnable
		if tlEnable
			if This.oList.ListItems.Count = 0
				This.LoadList()
			endif This.oList.ListItems.Count = 0
			This.Resize()
		endif tlEnable
		
	ENDPROC

	PROCEDURE cntDefault.chkValue.Init
		local lnAnchor
		with This
			lnAnchor = .Anchor
			.Anchor  = 0
			.Top     = .Parent.lblValue.Top
			.Anchor  = lnAnchor
		endwith
		
	ENDPROC

	PROCEDURE cntDefault.chkValue.InteractiveChange
		This.Parent.SetValue (This.Value)
	ENDPROC

	PROCEDURE cntDefault.chkValue.Refresh
		Local lcType
		With This
			lcType	= This.Parent.cType
			If lcType = 'L'
				.Visible = .T.
				.Value	 = This.Parent.GetValue()
				.Caption = Trim (This.Parent.cCaption)
			Else
				.Visible = .F.
			Endif
		Endwith
		
	ENDPROC

	PROCEDURE cntDefault.edtValue.Refresh
		Local lcType
		With This
			lcType	= This.Parent.cType
			If lcType = 'C'
				.Visible = .T.
				.Value	 = This.Parent.GetValue()
			Else
				.Visible = .F.
			Endif
		Endwith
		
	ENDPROC

	PROCEDURE cntDefault.edtValue.Valid
		This.Parent.SetValue (This.Value)
	ENDPROC

	PROCEDURE cntDefault.lblValue.Init
		This.Caption = ccVALUE
		dodefault()
		
	ENDPROC

	PROCEDURE cntDefault.lblValue.Refresh
		Local lcCaption, lcType
		lcType	  = This.Parent.cType
		lcCaption = This.Parent.cCaption
		
		This.Visible = Inlist (lcType, 'C', 'N')
		This.Caption = Trim (lcCaption)
		
	ENDPROC

	PROCEDURE cntDefault.Refresh
		This.Visible = empty(This.Parent.cClass)
		
	ENDPROC

	PROCEDURE cntDefault.spnValue.Init
		Local lnAnchor
		With This
			lnAnchor = .Anchor
			.Anchor	 = 0
			.Top	 = .Parent.edtValue.Top
			.Anchor	 = lnAnchor
		Endwith
		
	ENDPROC

	PROCEDURE cntDefault.spnValue.Refresh
		Local lcType
		With This
			lcType	= This.Parent.cType
			If lcType = 'N'
				.Visible = .T.
				.Value	 = Int (This.Parent.GetValue())
			Else
				.Visible = .F.
			Endif
		Endwith
		
	ENDPROC

	PROCEDURE cntDefault.spnValue.Valid
		This.Parent.SetValue (This.Value)
	ENDPROC

	PROCEDURE cntNonDefault.Refresh
		This.Visible = not empty(This.Parent.cClass)
	ENDPROC

	PROCEDURE oList.Init
		local lnCol2Width
		with This
		
		* Set the font.
		
			.Object.Font.Name = Thisform.FontName
			.Object.Font.Size = 8
		
		* Create some columns for the ListView.
		
			lnCol2Width = 110
			*!* * Removed 5/28/2012 / JRN
			*!* .ColumnHeaders.Add(, 'Tool',  ccOPTION, .Width - lnCol2Width - ;
			*!* 	sysmetric(5))
			*!* .ColumnHeaders.Add(, 'Value', ccVALUE, lnCol2Width)
			.ColumnHeaders.Add(, 'Tool',  'Tool', .Width - sysmetric(5))
			This.Parent.lColumnsAdded = .T.
		endwith
		
	ENDPROC

	PROCEDURE oList.ItemClick
		lparameters toItem
		This.Parent.SelectItem(toItem)
		
	ENDPROC

	PROCEDURE oList.Resize
		Local lnCol1Width, lnCol2Width
		
		If This.Parent.lColumnsAdded
			This.Parent.ResizeColumn1()
		Endif && This.Parent.lColumnsAdded
		
	ENDPROC

ENDDEFINE

DEFINE CLASS thoroptionscontainer AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getoption
		*m: getvalue
		*m: setoption
		*m: setvalue
		*p: ccaption
		*p: ckey
		*p: ctool
		*p: ctype
		*p: odata
	*</DefinedPropArrayMethod>

	*<PropValue>
		ccaption = 
		ckey = 
		ctool = 
		ctype = C
		Name = "thoroptionscontainer"
		odata = .NULL.
		_memberdata = <VFPData>
			<memberdata name="getvalue" display="GetValue"/>
			<memberdata name="setvalue" display="SetValue"/>
			<memberdata name="getoption" display="GetOption"/>
			<memberdata name="setoption" display="SetOption"/>
			<memberdata name="odata" display="oData"/>
			<memberdata name="ccaption" display="cCaption"/>
			<memberdata name="ckey" display="cKey"/>
			<memberdata name="ctool" display="cTool"/>
			<memberdata name="ctype" display="cType"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE getoption
		Lparameters tcKey, tcTool
		Return ThisForm.oThor.GetOption (tcKey, tcTool)
		
	ENDPROC

	PROCEDURE getvalue
		Return This.GetOption(This.cKey, This.cTool)
		
	ENDPROC

	PROCEDURE setoption
		Lparameters tcKey, tcTool, tuValue, tuDisplayValue
		Local luResult
		luResult = Thisform.oThor.SetOption (tcKey, tcTool, tuValue, tuDisplayValue)
		This.Parent.ReloadList()
		Return luResult
		
		
	ENDPROC

	PROCEDURE setvalue
		Lparameters tuValue, tuDisplayValue
		This.SetOption(This.cKey, This.cTool, tuValue, tuDisplayValue)
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS thoroptionscontrols AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Baselabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Thorhotkey1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Baselabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Baselabel3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Basespinner1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Basecheckbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Basecheckbox2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Basecheckbox3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Basecheckbox4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Baselabel4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Basespinner2" UniqueID="" Timestamp="" />

	*<PropValue>
		BackStyle = 1
		Height = 307
		Name = "thoroptionscontrols"
		Width = 345
	*</PropValue>

	ADD OBJECT 'Basecheckbox1' AS basecheckbox WITH ;
		Alignment = 0, ;
		Caption = 'Show "Thor Tools" in FoxPro system menu', ;
		Height = 18, ;
		Left = 6, ;
		Name = "Basecheckbox1", ;
		Top = 180, ;
		Width = 264
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Basecheckbox2' AS basecheckbox WITH ;
		Alignment = 0, ;
		Caption = "Dock Thor ToolBar with FoxPro toolbars", ;
		Height = 18, ;
		Left = 6, ;
		Name = "Basecheckbox2", ;
		Top = 202, ;
		Width = 246
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Basecheckbox3' AS basecheckbox WITH ;
		Alignment = 0, ;
		Caption = "Use Home(7) for form settings", ;
		Height = 18, ;
		Left = 6, ;
		Name = "Basecheckbox3", ;
		Top = 224, ;
		Width = 193
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Basecheckbox4' AS basecheckbox WITH ;
		Alignment = 0, ;
		Caption = "Use custom font size for Thor Menus", ;
		Height = 18, ;
		Left = 6, ;
		Name = "Basecheckbox4", ;
		Top = 246, ;
		Width = 229
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Baselabel1' AS label WITH ;
		Alignment = 2, ;
		BackStyle = 0, ;
		Caption = "Thor", ;
		FontBold = .T., ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 5, ;
		Name = "Baselabel1", ;
		TabIndex = 7, ;
		Top = 6, ;
		Width = 335
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Baselabel2' AS baselabel WITH ;
		Anchor = 0, ;
		Caption = "Dedicated hotkey for Thor's use", ;
		Left = 36, ;
		Name = "Baselabel2", ;
		Top = 36
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Baselabel3' AS baselabel WITH ;
		Alignment = 1, ;
		Anchor = 0, ;
		Caption = "Launcher Font Size:", ;
		Left = 62, ;
		Name = "Baselabel3", ;
		Top = 154
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Baselabel4' AS baselabel WITH ;
		Alignment = 1, ;
		Anchor = 0, ;
		Caption = "Thor Menus Font Size:", ;
		Left = 46, ;
		Name = "Baselabel4", ;
		Top = 271, ;
		Width = 132
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Basespinner1' AS basespinner WITH ;
		Height = 24, ;
		InputMask = "999", ;
		Left = 186, ;
		Name = "Basespinner1", ;
		Top = 150, ;
		Width = 79
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="spinner" />

	ADD OBJECT 'Basespinner2' AS basespinner WITH ;
		Height = 24, ;
		InputMask = "999", ;
		Left = 186, ;
		Name = "Basespinner2", ;
		Top = 267, ;
		Width = 79
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="spinner" />

	ADD OBJECT 'chkValue' AS basecheckbox WITH ;
		Alignment = 0, ;
		Caption = "Display message when hotkeys and menus are updated", ;
		Height = 18, ;
		Left = 5, ;
		Name = "chkValue", ;
		Top = 96, ;
		Width = 336
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'lblValue' AS baselabel WITH ;
		Alignment = 1, ;
		Anchor = 0, ;
		Caption = "Configuration form Font Size:", ;
		Left = 7, ;
		Name = "lblValue", ;
		Top = 127
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Line1' AS line WITH ;
		Anchor = 10, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line1", ;
		Top = 26, ;
		Width = 380
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'spnValue' AS basespinner WITH ;
		Height = 24, ;
		InputMask = "999", ;
		Left = 186, ;
		Name = "spnValue", ;
		Top = 123, ;
		Width = 79
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="spinner" />

	ADD OBJECT 'Thorhotkey1' AS thorhotkey WITH ;
		Height = 38, ;
		Left = -34, ;
		Name = "Thorhotkey1", ;
		Top = 53, ;
		Visible = .T., ;
		Width = 300, ;
		Thorhotkeysource1.cmdClear.Name = "cmdClear", ;
		Thorhotkeysource1.cmdGetHotKey.Name = "cmdGetHotKey", ;
		Thorhotkeysource1.lblHotKey.Caption = "", ;
		Thorhotkeysource1.lblHotKey.Name = "lblHotKey", ;
		Thorhotkeysource1.Name = "Thorhotkeysource1", ;
		Thorhotkeysource1.txtHotKey.Name = "txtHotKey"
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />
	
	PROCEDURE Basecheckbox1.InteractiveChange
		This.Parent.Parent.SetOption('ThorToolsSystemMenu', 'Thor', This.Value)
	ENDPROC

	PROCEDURE Basecheckbox1.Refresh
		This.Value = This.Parent.Parent.GetOption('ThorToolsSystemMenu', 'Thor')
	ENDPROC

	PROCEDURE Basecheckbox2.InteractiveChange
		This.Parent.Parent.SetOption('ThorToolsBarDock0', 'Thor', This.Value)
	ENDPROC

	PROCEDURE Basecheckbox2.Refresh
		This.Value = This.Parent.Parent.GetOption('ThorToolsBarDock0', 'Thor')
	ENDPROC

	PROCEDURE Basecheckbox3.InteractiveChange
		This.Parent.Parent.SetOption('Settings in Home(7)', 'Thor', This.Value)
	ENDPROC

	PROCEDURE Basecheckbox3.Refresh
		This.Value = This.Parent.Parent.GetOption('Settings in Home(7)', 'Thor')
	ENDPROC

	PROCEDURE Basecheckbox4.InteractiveChange
		This.Parent.Parent.SetOption('UseMenuFontSize', 'Thor', This.Value)
	ENDPROC

	PROCEDURE Basecheckbox4.Refresh
		This.Value = Nvl(This.Parent.Parent.GetOption('UseMenuFontSize', 'Thor'), .F.)
	ENDPROC

	PROCEDURE Basespinner1.InteractiveChange
		This.Parent.Parent.SetOption('LauncherFontSize', 'Thor', This.Value)
	ENDPROC

	PROCEDURE Basespinner1.LostFocus
		This.Parent.Parent.SetOption('LauncherFontSize', 'Thor', This.Value)
	ENDPROC

	PROCEDURE Basespinner1.Refresh
		This.Value = This.Parent.Parent.GetOption('LauncherFontSize', 'Thor')
	ENDPROC

	PROCEDURE Basespinner2.InteractiveChange
		This.Parent.Parent.SetOption('MenuFontSize', 'Thor', This.Value)
	ENDPROC

	PROCEDURE Basespinner2.LostFocus
		This.Parent.Parent.SetOption('MenuFontSize', 'Thor', This.Value)
	ENDPROC

	PROCEDURE Basespinner2.Refresh
		This.Value = Nvl(This.Parent.Parent.GetOption('MenuFontSize', 'Thor'), 9)
	ENDPROC

	PROCEDURE chkValue.InteractiveChange
		This.Parent.Parent.SetOption('UpdateMessage', 'Thor', This.Value)
	ENDPROC

	PROCEDURE chkValue.Refresh
		This.Value = This.Parent.Parent.GetOption('UpdateMessage', 'Thor')
	ENDPROC

	PROCEDURE spnValue.InteractiveChange
		This.Parent.Parent.SetOption('UpdateMessage', 'FontSize', This.Value)
	ENDPROC

	PROCEDURE spnValue.LostFocus
		This.Parent.Parent.SetOption('FontSize', 'Thor', This.Value)
	ENDPROC

	PROCEDURE spnValue.Refresh
		This.Value = This.Parent.Parent.GetOption('FontSize', 'Thor')
	ENDPROC

ENDDEFINE

DEFINE CLASS toolcontrols AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblTool" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTool" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: ontoolchanged		&& Fired when the user selects a tool
		*p: calias		&& The table PRGName is in
	*</DefinedPropArrayMethod>

	*<PropValue>
		calias = 
		Height = 23
		Name = "toolcontrols"
		Width = 421
		_memberdata = <VFPData>
			<memberdata name="calias" display="cAlias"/>
			<memberdata name="ontoolchanged" display="OnToolChanged"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cboTool' AS basecombobox WITH ;
		Anchor = 8, ;
		BoundColumn = 3, ;
		Left = 65, ;
		Name = "cboTool", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 355
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="combobox" />

	ADD OBJECT 'lblTool' AS baselabel WITH ;
		Anchor = 8, ;
		Caption = "\<Tool", ;
		Left = 0, ;
		Name = "lblTool", ;
		TabIndex = 1, ;
		Top = 4
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />
	
	PROCEDURE ontoolchanged		&& Fired when the user selects a tool
		*==============================================================================
		* Method:			OnToolChanged
		* Purpose:			Fired when the user selects a tool
		* Author:			Doug Hennig
		* Last revision:	03/21/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		* Abstract method
		
	ENDPROC

	PROCEDURE cboTool.InteractiveChange
		* When the user selects a tool, update the table.
		
		local lcPRGName
		with This
			lcPRGName = .aItems[.ListIndex, 3]
			replace PRGName with lcPRGName in (.Parent.cAlias)
			.Parent.OnToolChanged()
		endwith
		
	ENDPROC

	PROCEDURE cboTool.Refresh
		*** DH 04/23/2011: added lcFilter
		local lcFilter, ;
			lnItems, ;
			loTool, ;
			lnIndex
		with This
		
		* Fill the list from registered tools the first time it's needed or if we're
		* refreshing tools.
		
			if empty(.aItems[1]) or Thisform.lRefreshTools
		*** DH 04/23/2011: initialize lcFilter
				lcFilter = upper(This.Parent.Parent.Parent.Parent.cToolFilter)
				lnItems  = 0
				for each loTool in Thisform.oTools
		*** DH 04/23/2011: support filter
					if empty(lcFilter) or ;
						lcFilter $ upper(loTool.Prompt + loTool.Summary + loTool.Description)
						lnItems = lnItems + 1
						dimension .aItems[lnItems, 5]
					*** JRN 4/20/2011 : Use .Summary, if available
						.aItems[lnItems, 1] = left(loTool.Source + ': ' + ;
							Evl(loTool.Summary, loTool.Description), 200)
						.aItems[lnItems, 2] = loTool.Prompt
						.aItems[lnItems, 3] = loTool.PRGName
						.aItems[lnItems, 4] = loTool.StatusBarText
						.aItems[lnItems, 5] = loTool.Source + str(loTool.Sort) + ;
							loTool.Description
					endif empty(lcFilter) ...
				next loTool
		*** DH 04/23/2011: support filter
				if lnItems = 0
					dimension .aItems[1, 5]
					.aItems = ''
				endif lnItems = 0
				.Enabled = lnItems > 0
				asort(.aItems, 5)
				.Requery()
			endif empty(.aItems[1]) ...
			lnIndex    = ascan(.aItems, trim(evaluate(.Parent.cAlias + '.PRGName')), ;
				-1, -1, 3, 15)
			.ListIndex = lnIndex
		endwith
		
	ENDPROC

	PROCEDURE lblTool.Init
		This.Caption = ccCAP_TOOL
		dodefault()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS toolinfo AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="edtToolInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLink" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblVideo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPlugIns" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*p: calias		&& The table PRGName is in
		*p: cprgname		&& The selected PRGName
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 13
		calias = 
		cprgname = 
		Height = 71
		Name = "toolinfo"
		Width = 341
	*</PropValue>

	ADD OBJECT 'edtToolInfo' AS baseeditbox WITH ;
		Anchor = 13, ;
		BorderStyle = 0, ;
		Height = 32, ;
		Left = 0, ;
		Margin = 0, ;
		Name = "edtToolInfo", ;
		ScrollBars = 0, ;
		TabIndex = 4, ;
		Top = 0, ;
		Width = 340
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblLink' AS baselabel WITH ;
		Anchor = 4, ;
		Caption = "Tool Home Page", ;
		FontUnderline = .T., ;
		ForeColor = 0,0,255, ;
		Left = 8, ;
		MousePointer = 15, ;
		Name = "lblLink", ;
		TabIndex = 5, ;
		Top = 56
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblOptions' AS baselabel WITH ;
		Anchor = 4, ;
		Caption = "Options", ;
		FontUnderline = .T., ;
		ForeColor = 0,0,255, ;
		Left = 136, ;
		MousePointer = 15, ;
		Name = "lblOptions", ;
		TabIndex = 5, ;
		Top = 56
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblPlugIns' AS baselabel WITH ;
		Anchor = 4, ;
		Caption = "Plug-Ins", ;
		FontUnderline = .T., ;
		ForeColor = 0,0,255, ;
		Left = 213, ;
		MousePointer = 15, ;
		Name = "lblPlugIns", ;
		TabIndex = 5, ;
		Top = 56
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblVideo' AS baselabel WITH ;
		Anchor = 4, ;
		Caption = "Video", ;
		FontUnderline = .T., ;
		ForeColor = 0,0,255, ;
		Left = 293, ;
		MousePointer = 15, ;
		Name = "lblVideo", ;
		TabIndex = 5, ;
		Top = 56, ;
		Width = 34
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />
	
	PROCEDURE edtToolInfo.Refresh
		Local lcCaption, lcDescrip, lcPRGName, lcProgram, lcValue, lcVersion, lcVideoLink, llHaveTool, lnPos
		Local loTool
		If Empty (This.Parent.cPRGName)
			lcPRGName = Trim (Evaluate (This.Parent.cAlias + '.PRGName'))
		Else
			lcPRGName = This.Parent.cPRGName
		Endif Empty (This.Parent.cPRGName)
		
		This.Value					 = ''
		This.Parent.lblLink.Tag		 = ''
		This.Parent.lblLink.Caption	 = ''
		This.Parent.lblVideo.Tag	 = ''
		This.Parent.lblVideo.Caption = ''
		
		Do Case
			Case Thisform.oTools.GetKey (Upper (lcPRGName)) = 0
				This.Value                  = 'Tool <' + lcPRGName + '> not found'
		
			Case Not Empty (lcPRGName)
				loTool	   = Thisform.oTools.Item (Upper (lcPRGName))
				This.Value = Thisform.oThor.GetToolDescription (loTool)
		
				With This.Parent.lblLink
					If Empty (loTool.Link)
						.Caption	= ''
					Else
						.Tag	 = loTool.Link
						.Caption = ccTOOL_HOME_PAGE
					Endif Empty (loTool.Link)
				Endwith
		
				With This.Parent.lblOptions
					If Empty (loTool.OptionTool)
						.Caption	= ''
					Else
						.Caption = 'Options'
						.Tag	 = loTool.OptionTool
					Endif Empty (loTool.Link)
				Endwith
		
				With This.Parent.lblPlugIns
					If Empty (loTool.PlugIns)
						.Caption	= ''
					Else
						.Caption = 'Plug-Ins'
						.Tag	 = loTool.PlugIns
					Endif Empty (loTool.Link)
				Endwith
		
				lcVideoLink = loTool.VideoLink
				If Not Empty (lcVideoLink)
					If '|' $ lcVideoLink
						lnPos		= At ('|', lcVideoLink)
						lcCaption	= ccTOOL_VIDEO + ' (' + Substr (lcVideoLink, lnPos + 1) + ')'
						lcVideoLink	= Left (lcVideoLink, lnPos - 1)
					Else
						lcCaption = ccTOOL_VIDEO
					Endif
					This.Parent.lblVideo.Tag	 = lcVideoLink
					This.Parent.lblVideo.Caption = lcCaption
				Endif
		
			Otherwise
		Endcase
		
		
	ENDPROC

	PROCEDURE edtToolInfo.When
		return .F.
		
	ENDPROC

	PROCEDURE lblLink.Click
		if not empty(This.Tag)
			loLink = newobject('_ShellExecute', home() + 'FFC\_Environ.vcx')
			loLink.ShellExecute(This.Tag)
		endif not empty(This.Tag)
		
	ENDPROC

	PROCEDURE lblOptions.Click
		ExecScript(_Screen.cThorDispatcher, 'Thor_Proc_OpenOptionsPage', This.Tag)
		
		
		
	ENDPROC

	PROCEDURE lblPlugIns.Click
		Local lcFileName
		Execscript (_Screen.cThorDispatcher, 'PEMEditor_StartIDETools')
		lcFileName    = Execscript (_Screen.cThorDispatcher, 'Full Path=Thor_Tool_ThorInternalManagePlugIns.SCX')
		Do Form  (lcFileName) With This.Tag
		
	ENDPROC

	PROCEDURE lblVideo.Click
		if not empty(This.Tag)
			loLink = newobject('_ShellExecute', home() + 'FFC\_Environ.vcx')
			loLink.ShellExecute(This.Tag)
		endif not empty(This.Tag)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS toolkeys AS toolkeysbase OF "thor_ui.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="SELECTTOOLFORBROWSING1" UniqueID="" Timestamp="" />

	*<PropValue>
		Name = "toolkeys"
		cmdCreateTool.Name = "cmdCreateTool"
		cmdOpenToolFolder.Name = "cmdOpenToolFolder"
		Thor_sfsplitterh1.gripper.GripperDot1.Name = "GripperDot1"
		Thor_sfsplitterh1.gripper.GripperDot1.ShapeDark.Name = "ShapeDark"
		Thor_sfsplitterh1.gripper.GripperDot1.ShapeLight.Name = "ShapeLight"
		Thor_sfsplitterh1.gripper.GripperDot1.ShapeMiddle.Name = "ShapeMiddle"
		Thor_sfsplitterh1.gripper.GripperDot2.Name = "GripperDot2"
		Thor_sfsplitterh1.gripper.GripperDot2.ShapeDark.Name = "ShapeDark"
		Thor_sfsplitterh1.gripper.GripperDot2.ShapeLight.Name = "ShapeLight"
		Thor_sfsplitterh1.gripper.GripperDot2.ShapeMiddle.Name = "ShapeMiddle"
		Thor_sfsplitterh1.gripper.GripperDot3.Name = "GripperDot3"
		Thor_sfsplitterh1.gripper.GripperDot3.ShapeDark.Name = "ShapeDark"
		Thor_sfsplitterh1.gripper.GripperDot3.ShapeLight.Name = "ShapeLight"
		Thor_sfsplitterh1.gripper.GripperDot3.ShapeMiddle.Name = "ShapeMiddle"
		Thor_sfsplitterh1.gripper.GripperDot4.Name = "GripperDot4"
		Thor_sfsplitterh1.gripper.GripperDot4.ShapeDark.Name = "ShapeDark"
		Thor_sfsplitterh1.gripper.GripperDot4.ShapeLight.Name = "ShapeLight"
		Thor_sfsplitterh1.gripper.GripperDot4.ShapeMiddle.Name = "ShapeMiddle"
		Thor_sfsplitterh1.gripper.GripperDot5.Name = "GripperDot5"
		Thor_sfsplitterh1.gripper.GripperDot5.ShapeDark.Name = "ShapeDark"
		Thor_sfsplitterh1.gripper.GripperDot5.ShapeLight.Name = "ShapeLight"
		Thor_sfsplitterh1.gripper.GripperDot5.ShapeMiddle.Name = "ShapeMiddle"
		Thor_sfsplitterh1.gripper.Name = "gripper"
		Thor_sfsplitterh1.Height = 232
		Thor_sfsplitterh1.Left = 268
		Thor_sfsplitterh1.Name = "Thor_sfsplitterh1"
		Thor_sfsplitterh1.Top = 1
		Thor_sfsplitterh1.Width = 10
		cntToolInfo.chkStartup.Alignment = 0
		cntToolInfo.chkStartup.Name = "chkStartup"
		cntToolInfo.cmdEditTool.Name = "cmdEditTool"
		cntToolInfo.cmdRemoveTool.Name = "cmdRemoveTool"
		cntToolInfo.Edittoolbutton1.Name = "Edittoolbutton1"
		cntToolInfo.Left = 278
		cntToolInfo.Name = "cntToolInfo"
		cntToolInfo.oHotKeyControls.cmdClear.Name = "cmdClear"
		cntToolInfo.oHotKeyControls.cmdGetHotKey.Name = "cmdGetHotKey"
		cntToolInfo.oHotKeyControls.lblHotKey.Name = "lblHotKey"
		cntToolInfo.oHotKeyControls.Name = "oHotKeyControls"
		cntToolInfo.oHotKeyControls.txtHotKey.Name = "txtHotKey"
		cntToolInfo.oToolInfo.edtToolInfo.Name = "edtToolInfo"
		cntToolInfo.oToolInfo.lblLink.Name = "lblLink"
		cntToolInfo.oToolInfo.lblOptions.Name = "lblOptions"
		cntToolInfo.oToolInfo.lblVideo.Name = "lblVideo"
		cntToolInfo.oToolInfo.Name = "oToolInfo"
		cntToolInfo.Top = 0
		cntToolInfo.Width = 351
	*</PropValue>

	ADD OBJECT 'SELECTTOOLFORBROWSING1' AS selecttoolforbrowsing WITH ;
		Height = 231, ;
		Left = 0, ;
		Name = "SELECTTOOLFORBROWSING1", ;
		Top = 0, ;
		Width = 268, ;
		txtcNewFilter.Height = 22, ;
		txtcNewFilter.Left = 40, ;
		txtcNewFilter.Name = "txtcNewFilter", ;
		txtcNewFilter.Top = 1, ;
		txtcNewFilter.Width = 118, ;
		Baselabel1.Left = 3, ;
		Baselabel1.Name = "Baselabel1", ;
		Baselabel1.Top = 5, ;
		oTree.Height = 228, ;
		oTree.Left = 1, ;
		oTree.Name = "oTree", ;
		oTree.Top = 30, ;
		oTree.Width = 265
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

ENDDEFINE

DEFINE CLASS toolkeysbase AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdCreateTool" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOpenToolFolder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Thor_sfsplitterh1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.oHotKeyControls" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.oToolInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.chkStartup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.cmdRemoveTool" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.Edittoolbutton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.chkFavorite" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.chkToolBar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.cmdToolBarIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.cmdEditTool" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: contextmenufortoolbar
		*m: createtool
		*m: createtoolbar
		*m: loadlist		&& Loads the ListView with tools
		*m: otool_assign
		*m: selectitem		&& Selects the specified item in the ListView
		*p: cprgname
		*p: ctoolfilter		&& A filter for tools
		*p: lcnttoolinfovisible
		*p: otool
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 15
		cprgname = 
		ctoolfilter = 
		Height = 260
		lcnttoolinfovisible = .F.
		Name = "toolkeysbase"
		otool = .NULL.
		Width = 630
		_memberdata = <VFPData>
			<memberdata name="cprgname" display="cPRGName"/>
			<memberdata name="otool" display="oTool"/>
			<memberdata name="otool_assign" display="oTool_Assign"/>
			<memberdata name="lcnttoolinfovisible" display="lcntToolInfoVisible"/>
			<memberdata name="contextmenufortoolbar" display="ContextMenuForToolBar"/>
			<memberdata name="createtoolbar" display="CreateToolBar"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdCreateTool' AS basecommandbutton WITH ;
		Anchor = 4, ;
		Caption = "\<Create Tool", ;
		Height = 23, ;
		Left = 12, ;
		Name = "cmdCreateTool", ;
		TabIndex = 9, ;
		Top = 234, ;
		Width = 96
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOpenToolFolder' AS basecommandbutton WITH ;
		Anchor = 4, ;
		Caption = "\<Open Tool Folder", ;
		Height = 23, ;
		Left = 120, ;
		Name = "cmdOpenToolFolder", ;
		TabIndex = 9, ;
		Top = 234, ;
		Width = 127
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntToolInfo' AS basecontainer WITH ;
		Anchor = 13, ;
		Height = 260, ;
		Left = 278, ;
		Name = "cntToolInfo", ;
		Top = 0, ;
		Width = 351
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="container" />

	ADD OBJECT 'cntToolInfo.chkFavorite' AS basecheckbox WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		Caption = "Favorite?", ;
		Left = 8, ;
		Name = "chkFavorite", ;
		Top = 32, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntToolInfo.chkStartup' AS basecheckbox WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		Caption = "Run at startup?", ;
		FontSize = 9, ;
		Left = 207, ;
		Name = "chkStartup", ;
		Top = 32, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntToolInfo.chkToolBar' AS basecheckbox WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		Caption = "ToolBar?", ;
		FontSize = 9, ;
		Left = 92, ;
		Name = "chkToolBar", ;
		Top = 32, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntToolInfo.cmdEditTool' AS edittoolbutton WITH ;
		Anchor = 4, ;
		Left = 130, ;
		Name = "cmdEditTool", ;
		TabIndex = 5, ;
		Top = 234, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntToolInfo.cmdRemoveTool' AS basecommandbutton WITH ;
		Anchor = 4, ;
		Caption = "Remove Tool", ;
		Height = 23, ;
		Left = 232, ;
		Name = "cmdRemoveTool", ;
		TabIndex = 9, ;
		Top = 234, ;
		Width = 95, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntToolInfo.cmdToolBarIcon' AS thor_toolbar_button WITH ;
		Left = 165, ;
		Name = "cmdToolBarIcon", ;
		ToolTipText = "Click to select the caption or icon for this tool in the Thor ToolBar. Right-Click to reset to default.", ;
		Top = 28, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="thor_run.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntToolInfo.Edittoolbutton1' AS edittoolbutton WITH ;
		Anchor = 4, ;
		Caption = "Run Tool", ;
		Left = 28, ;
		Name = "Edittoolbutton1", ;
		TabIndex = 5, ;
		Top = 234, ;
		Width = 75, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntToolInfo.oHotKeyControls' AS hotkeycontrols WITH ;
		Anchor = 0, ;
		calias = ToolHotKeyAssignments, ;
		Left = 6, ;
		Name = "oHotKeyControls", ;
		TabIndex = 3, ;
		Top = 1, ;
		ZOrderSet = 0, ;
		cmdGetHotKey.Name = "cmdGetHotKey", ;
		lblHotKey.Name = "lblHotKey", ;
		txtHotKey.Name = "txtHotKey", ;
		cmdClear.Name = "cmdClear"
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'cntToolInfo.oToolInfo' AS toolinfo WITH ;
		Anchor = 15, ;
		calias = ToolHotKeyAssignments, ;
		Height = 177, ;
		Left = 6, ;
		Name = "oToolInfo", ;
		TabIndex = 4, ;
		Top = 54, ;
		Width = 344, ;
		ZOrderSet = 1, ;
		edtToolInfo.Anchor = 15, ;
		edtToolInfo.BackStyle = 0, ;
		edtToolInfo.Height = 160, ;
		edtToolInfo.IntegralHeight = .F., ;
		edtToolInfo.Left = 0, ;
		edtToolInfo.Name = "edtToolInfo", ;
		edtToolInfo.ReadOnly = .T., ;
		edtToolInfo.ScrollBars = 2, ;
		edtToolInfo.SelectOnEntry = .F., ;
		edtToolInfo.Top = 0, ;
		edtToolInfo.Width = 343, ;
		lblLink.Name = "lblLink", ;
		lblLink.Top = 161, ;
		lblVideo.Name = "lblVideo", ;
		lblVideo.Top = 161, ;
		lblOptions.Name = "lblOptions", ;
		lblOptions.Top = 161, ;
		lblPlugIns.Name = "lblPlugIns", ;
		lblPlugIns.Top = 161
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'Thor_sfsplitterh1' AS thor_sfsplitterh WITH ;
		Anchor = 13, ;
		cobject1name = SELECTTOOLFORBROWSING1, ;
		cobject2name = cntToolInfo, ;
		Height = 231, ;
		Left = 268, ;
		lshowgripper = .T., ;
		Name = "Thor_sfsplitterh1", ;
		nobject1minsize = 150, ;
		nobject2minsize = 150, ;
		Top = 1, ;
		Visible = .T., ;
		Width = 10, ;
		ZOrderSet = 2, ;
		GRIPPER.GRIPPERDOT1.Name = "GRIPPERDOT1", ;
		GRIPPER.GRIPPERDOT1.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT1.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT1.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT2.Name = "GRIPPERDOT2", ;
		GRIPPER.GRIPPERDOT2.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT2.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT2.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT3.Name = "GRIPPERDOT3", ;
		GRIPPER.GRIPPERDOT3.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT3.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT3.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT4.Name = "GRIPPERDOT4", ;
		GRIPPER.GRIPPERDOT4.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT4.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT4.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT5.Name = "GRIPPERDOT5", ;
		GRIPPER.GRIPPERDOT5.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT5.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT5.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.Name = "GRIPPER"
		*< END OBJECT: ClassLib="thor_sf_splitter.vcx" BaseClass="container" />
	
	PROCEDURE contextmenufortoolbar
		#Define ccCaption 'Enter caption'
		#Define ccPicture 'Select picture'
		#Define ccDefault 'Default (Thor icon)'
		
		#Define ccTool 	'Thor'
		#Define ccKey 	'Thor ToolBar Path'
		
		
		*** DH 2018-04-01: new URL
		* ContextMenu home page = https://github.com/VFPX/Thor/blob/master/Docs/Thor_framework_contextmenu.md
		Local loContextMenu As ContextMenu Of 'C:\VISUAL FOXPRO\PROGRAMS\9.0\COMMON\Thor\Source\Thor_Menu.vcx'
		Local lcCaption, lcCurdir, lcNewMethodName, lcPRGName, lcPath, lcPicture, loException, loForm
		Local lxValue
		
		lcPRGName = This.cPRGName
		= Seek(Upper(lcPRGName), 'ToolBarTools', 'PRGName')
		lcCaption = Evl(Trim(ToolBarTools.Caption), This.oTool.prompt)
		lcPicture = ToolBarTools.Icon
		
		Do case
			Case not Empty(lcCaption)
				lnMark = 1
			Case File(lcPicture) and Upper(JustFname(lcPicture)) # Upper(ccThorIcon)
				lnMark = 2
			Otherwise
				lnMark = 3
		endcase	
			
		loContextMenu = Execscript(_Screen.cThorDispatcher, 'Class= ContextMenu')
		
		loContextMenu.AddMenuItem(ccCaption,,,,,,lnMark = 1)
		loContextMenu.AddMenuItem(ccPicture,,,,,,lnMark = 2)
		loContextMenu.AddMenuItem(ccDefault,,,,,,lnMark = 3)
		
		If Not loContextMenu.Activate()
			Return
		Endif
		
		Do Case
			Case loContextMenu.Keyword = ccCaption
				Private pcCaption
				loForm	  = Execscript(_Screen.cThorDispatcher, 'Class= DynamicFormDeskTop')
				pcCaption = lcCaption
		
				With loForm
					.Caption	 = This.oTool.Prompt
					.MinWidth	 = 275
					.MinHeight	 = 100
					.MinButton	 = .F.
					.MaxButton	 = .F.
					.BorderStyle = 2
		
					.cHeading			= ''
				Endwith
		
				Text To loForm.cBodyMarkup Noshow Textmerge
			pcCaption	.class 				= 'TextBox'
						.caption			= 'Caption:'
						.width				= 200
						.Increment			= 1			
						|
				Endtext
		
				loForm.Show(1)
		
				If 'O' = Vartype(loForm) And loForm.lSaveClicked
					lcCaption = pcCaption
				Else
					Return .F.
				Endif
		
			Case loContextMenu.Keyword = ccPicture
		
				lcPath = Execscript(_Screen.cThorDispatcher, 'Get Option=', ccKey, ccTool)
				If Isnull(lcPath)
					lcPath = Addbs(Home(1)) + 'Graphics'
				Endif
		
				lcCurdir = Sys(5) + Curdir()
				Try
					Cd(lcPath)
				Catch To loException
				Endtry
		
				lcPicture = Getpict()
				Cd(lcCurdir)
		
				If Empty(lcPicture)
					Return
				Endif
		
				lcCaption = ''
				Execscript(_Screen.cThorDispatcher, 'Set Option=', ccKey, ccTool, Justpath(lcPicture))
				
			Otherwise
			
				lcCaption = ''
				lcPicture = ccThorIcon
		
		Endcase
		
		Replace									;
				Icon	 With  lcPicture		;
				Caption	 With  lcCaption		;
			In ToolBarTools
		
		This.Refresh()
		
		
		
	ENDPROC

	PROCEDURE createtool
		*==============================================================================
		* Method:			CreateTool
		* Purpose:			Creates a template PRG for a tool
		* Author:			Doug Hennig
		* Copyright:		(c) 2011 Stonefield Systems Group Inc.
		* Last revision:	05/21/2011 / JRN
		* Parameters:		none
		* Returns:			none
		* Environment in:	_System.vcx exists in the VFP FFC folder
		* Environment out:	a PRG specified by the user is created with template code.
		*==============================================================================
		
		Local loPEME_Tools AS Object
		Local loThorInfo AS 'ThorInfo' OF  'Thor_Utils'
		Local lcCode, lcFile, lcFolder, lcTemplateFile, lcTemplateFolder 
		
		****************************************************************
		lcFolder = Thisform.oTools.Tag
		Do Form CreateTool With lcFolder, Thisform.FontSize, Thisform.oThor To lcFile
		If Empty (lcFile)
			Return
		EndIf
		
		If '|' $ lcFile
			lcTemplateFolder = Addbs (lcFolder) + ccMyTemplates
			lcTemplateFile = lcTemplateFolder + '\' + Substr(lcFile, At('|', lcFile) + 1)
			lcFile = Left(lcFile, At('|', lcFile) - 1)
		Else
			lcTemplateFile = ''
		EndIf 	
		
		****************************************************************
		
		*!*	lcCD   = Sys(5) + Curdir()
		*!*	loFile = Newobject ('_ComDlg', Home() + 'FFC\_System.vcx')
		*!*	loFile.AddFilter ('Program file (*.prg)', '*.prg')
		*!*	loFile.lSaveDialog		 = .T.
		*!*	loFile.cInitialDirectory = Thisform.oTools.Tag
		*!*	loFile.ShowDialog()
		*!*	Cd (lcCD)
		*!*	lcFile = Addbs (loFile.cFilePath) + loFile.cFileTitle
		
		Do Case
			Case Empty (lcFile)
			Case Upper (Juststem (lcFile)) # Upper (ccTOOLNAMEPREFIX)
				Messagebox (ccTOOL_PREFIX_ERROR, MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
			Case File (lcFile)
				Messagebox (Strtran (ccALREADY_EXISTS, '%1', lcFile),  ;
					  MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
			Otherwise
				*** JRN 2011-04-18 : Get sample code for new PRG from ThorInfo
				loThorInfo = Newobject ('ThorInfo', 'Thor_Utils')
				If Empty(lcTemplateFile )
					lcCode	   = loThorInfo.GetSampleToolCode()
				Else
					lcCode = FileToStr(lcTemplateFile)
				EndIf 
				Strtofile (lcCode, lcFile)
				Modify Command (lcFile) Nowait
				*** JRN 2011-05-05 : Move / resize window
				loPEME_Tools = Execscript (_Screen.cThorDispatcher, 'class= tools from pemeditor')
				If 'O' = Vartype (loPEME_Tools)
					loPEME_Tools.AddMRUFile (lcFile)
					_oPEMEditor.oUtils.oIDEx.MoveWindow()
				Endif
		
		Endcase
		
	ENDPROC

	PROCEDURE createtoolbar
		Local lcApp, lcFolder, loRunThor
		lcApp	  = ThisForm.cThorFolder + 'Thor.App'
		lcFolder  = ThisForm.cThorFolder + 'Thor\'
		loRunThor = Newobject ('Thor_Run', 'thor_run.vcx', '', lcApp, lcFolder)
		loRunThor.AddProperty('cApplication', lcApp)
		loRunThor.CreateToolBar()
		
		
	ENDPROC

	PROCEDURE loadlist		&& Loads the ListView with tools
		*==============================================================================
		* Method:			LoadList
		* Purpose:			Loads the ListView with tools
		* Author:			Doug Hennig
		* Last revision:	04/23/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	Thisform.oTools is a collection of ThorInfo objects
		* Environment out:	the ListView has been loaded with the registered tools
		*==============================================================================
		
		local lnItems, ;
			loTool, ;
			laItems[1], ;
			lcKey, ;
			lnI, ;
			lcPRGName, ;
			loItem
		
		* First put the tools into an array so we can sort it as desired.
		
		*** DH 04/23/2011: added support for filter
		lcFilter = upper(This.cToolFilter)
		lnItems  = 0
		Do while lnItems = 0
			for each loTool in Thisform.oTools
			*** DH 04/23/2011: support filter
				if empty(lcFilter) or ;
					lcFilter $ upper(loTool.Prompt + loTool.Summary + loTool.Description + loTool.Category + loTool.Source)
					lnItems = lnItems + 1
					dimension laItems[lnItems, 6]
					*** JRN 4/20/2011 : Use .Summary, if possible
					laItems[lnItems, 1] = loTool.Source + ': ' + ;
						strextract(Evl(loTool.Summary,loTool.Description), '', chr(13), 1, 2)
					laItems[lnItems, 2] = loTool.Prompt
					laItems[lnItems, 3] = loTool.PRGName
					laItems[lnItems, 4] = loTool.StatusBarText
					laItems[lnItems, 5] = loTool.Source + str(loTool.Sort) + Evl(loTool.Summary, loTool.Description)
					laItems[lnItems, 6] = loTool
				endif empty(lcFilter) ...
			next loTool
			If lnItems = 0
				lcFilter = ''
			EndIf 
		EndDo 
		asort(laItems, 5)
		
		* Save the selected item if the list is being reloaded.
		
		if vartype(This.oList.SelectedItem) = 'O'
			lcKey = This.oList.SelectedItem.Key
		endif vartype(This.oList.SelectedItem) = 'O'
		
		* Now load the list.
		
		with This.oList.ListItems
			.Clear()
			for lnI = 1 to lnItems
				lcPRGName = laItems[lnI, 3]
				loItem    = .Add(, lcPRGName, laItems[lnI, 1])
				loItem.Tag = laItems[lnI, 6] 
				= seek(upper(lcPRGName), 'ToolHotKeyAssignments', 'PRGName')
				= seek(ToolHotKeyAssignments.HotKeyID, 'HotKeyDefinitions', 'ID')
				loItem.SubItems(1) = trim(HotKeyDefinitions.Descript)
		
				= seek(upper(lcPRGName), 'StartUpTools', 'PRGName')
				loItem.SubItems(2) = IIF(StartUpTools.Startup, 'Yes', '')
			next lnI
		endwith
		
		* Reselect the former item.
		
		if empty(lcKey)
			This.SelectItem(This.oList.ListItems.Item(1))
		else
			This.SelectItem(lcKey)
		endif empty(lcKey)
		
	ENDPROC

	PROCEDURE otool_assign
		Lparameters toTool
		Local lcPRGName, lcPRGName60
		
		If Vartype (toTool) = 'O'
		
			This.oTool = toTool
		
			lcPRGName	  = toTool.PRGName
		
			This.cPRGName			 = lcPRGName
			This.cntToolInfo.otoolInfo.cPRGName = lcPrgName
		
			lcPRGName60 = Upper (Padr (lcPRGName, 60))
			= Seek (lcPRGName60, 'ToolHotKeyAssignments', 'PRGName')
			= Seek (ToolHotKeyAssignments.HotKeyID, 'HotKeyDefinitions', 'ID')
			= Seek (lcPRGName60, 'StartUpTools', 'PRGName')
			= Seek (lcPRGName60, 'Favorites', 'PRGName')
		
			This.lcntToolInfoVisible = .T.
		
		Else
			*!* * Removed 6/20/2012 / JRN
			*!* lcPRGName				 = ''
			*!* This.cPRGName			 = lcPRGName
			*!* This.cntToolInfo.otoolInfo.cPRGName = lcPrgName
			This.lcntToolInfoVisible = .F.
		EndIf
		
		This.cntToolInfo.Refresh()
		
	ENDPROC

	PROCEDURE selectitem		&& Selects the specified item in the ListView
		*==============================================================================
		* Method:			SelectItem
		* Purpose:			Selects the specified item in the ListView
		* Author:			Doug Hennig
		* Last revision:	03/31/2011
		* Parameters:		tuItem - a node or a node key
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		Lparameters loTool
		
		With This
			.oTool    = loTool
		
			If Not Thisform.lRefreshTools
				.cntToolInfo.Refresh()
			Endif Not Thisform.lRefreshTools
		Endwith
		
	ENDPROC

	PROCEDURE cmdCreateTool.Click
		This.Parent.CreateTool()
		
	ENDPROC

	PROCEDURE cmdCreateTool.Init
		This.Caption = ccCREATE_TOOL
		dodefault()
		
	ENDPROC

	PROCEDURE cmdOpenToolFolder.Click
		Local lcPath
		
		lcPath = '"' + Thisform.oTools.Tag + 'My Tools\"'
		Run /N "explorer" &lcPath
		return
	ENDPROC

	PROCEDURE cmdOpenToolFolder.Init
		This.Caption = ccOPEN_TOOL_FOLDER
		dodefault()
		
	ENDPROC

	PROCEDURE cntToolInfo.chkFavorite.InteractiveChange
		Local lcPRGName
		
		lcPRGName = This.Parent.Parent.cPRGName
		If Seek (Upper (lcPRGName), 'Favorites', 'PRGName')
			Replace Startup With This.Value In Favorites
		Else
			Insert Into Favorites (PRGName, Startup) Values (lcPRGName, This.Value)
		Endif
		
		
		
	ENDPROC

	PROCEDURE cntToolInfo.chkFavorite.Refresh
		Local loTool
		If Not Empty (This.Parent.Parent.cPRGName)
			loTool		 = Thisform.oTools.Item (Upper (This.Parent.Parent.cPRGName))
			This.Value	 = Favorites.Startup
			This.Enabled = .T.
			This.Visible = .T.
		Else
			This.Value	 = .F.
			This.Enabled = .F.
			This.Visible = .T.
		Endif
		
		DoDefault()
		
		
	ENDPROC

	PROCEDURE cntToolInfo.chkStartup.InteractiveChange
		Local lcPRGName
		
		lcPRGName = This.Parent.Parent.cPRGName
		If Seek (Upper (lcPRGName), 'StartUpTools', 'PRGName')
			Replace Startup With This.Value In StartUpTools
		Else
			Insert Into StartUpTools (PRGName, Startup) Values (lcPRGName, This.Value)
		Endif
		
		
		
	ENDPROC

	PROCEDURE cntToolInfo.chkStartup.Refresh
		Local loTool
		If Not Empty (This.Parent.Parent.cPRGName)
			loTool	   = Thisform.oTools.Item (Upper (This.Parent.Parent.cPRGName))
			If loTool.CanRunAtStartUp
				This.Value	 = StartUpTools.Startup
				This.Enabled = .T.
				This.Visible = .T.
			Else
				This.Value	 = .F.
				This.Enabled = .F.
				This.Visible = .F.
			Endif
		Else
			This.Value	 = .F.
			This.Enabled = .F.
			This.Visible = .T.
		Endif
		
		DoDefault()
		
		
	ENDPROC

	PROCEDURE cntToolInfo.chkToolBar.Refresh
		Local lcPRGName, loTool
		lcPRGName = This.Parent.Parent.cPRGName
		If Not Empty (lcPRGName)
			loTool		 = Thisform.oTools.Item (Upper (lcPRGName))
			= Seek (Upper (lcPRGName), 'ToolBarTools', 'PRGName')
			This.Value	 = ToolBarTools.Enabled
			This.Enabled = .T.
			This.Visible = .T.
		Else
			This.Value	 = .F.
			This.Enabled = .F.
			This.Visible = .T.
		Endif
		
		DoDefault()
		
		 
	ENDPROC

	PROCEDURE cntToolInfo.chkToolBar.Valid
		Local lcPRGName, lcPrompt, lnMaxOrder
		
		lcPRGName = This.Parent.Parent.cPRGName
		lcPrompt  = This.Parent.Parent.oTool.Prompt
		Calculate Max(Order + 1) To lnMaxOrder In ToolBarTools
		If Seek (Upper (lcPRGName), 'ToolBarTools', 'PRGName')
			Replace									;
					Enabled	 With  This.Value		;
					ToolTip	 With  lcPrompt			;
					Order	 With  lnMaxOrder		;
				In ToolBarTools
		Else
			Insert Into ToolBarTools									;
				(PRGName, Enabled, ToolTip, Order, Icon) Values			;
				(lcPRGName, This.Value, lcPrompt, lnMaxOrder, ccThorIcon)
		Endif
		
		If This.Value
			This.Parent.Parent.ContextMenuForToolBar()
		Endif
		
		This.Parent.cmdToolBarIcon.Refresh()
		
		This.Parent.Parent.CreateToolBar()
		
		
	ENDPROC

	PROCEDURE cntToolInfo.cmdEditTool.Refresh
		*!*	if vartype(This.Parent.oList.SelectedItem) = 'O'
		*!*		This.cPRGName = This.Parent.oList.SelectedItem.Tag.FullFileName
		*!*	endif vartype(This.Parent.oList.SelectedItem) = 'O'
		If Not Empty (This.Parent.Parent.cPRGName)
			This.cPRGName = This.Parent.Parent.oTool.FullFileName
			This.Enabled  = .T.
		Else
			This.Enabled = .F.
		Endif
	ENDPROC

	PROCEDURE cntToolInfo.cmdEditTool.RightClick
		*** DH 2018-04-01: new URL
		* tools home page = https://github.com/VFPX/Thor/blob/master/Docs/Thor_tools_object.md
		Local loTools
		loTools = Execscript (_Screen.cThorDispatcher, 'Class= tools from pemeditor')
		loTools.EditSourceX (This.cPRGName)
	ENDPROC

	PROCEDURE cntToolInfo.cmdRemoveTool.Click
		Local lcPrgName
		lcPrgName = This.Parent.Parent.cPRGName
		If Not Empty (lcPrgName)
			If Messagebox ('Remove this tool (' + lcPrgName + ')?', 35, 'Remove this tool?', 0) = 6
				If Thisform.oThor.RemoveTool (lcPrgName)
					Messagebox ('Tool removed', 64, 'Removed', 0)
				Else
					Messagebox ('Unable to remove tool', 16, 'Failure', 0)
				Endif
			Endif
		Endif
		
	ENDPROC

	PROCEDURE cntToolInfo.cmdRemoveTool.Refresh
		Local loTool
		If Not Empty (This.Parent.Parent.cPRGName)
			loTool	   = Thisform.oTools.Item (Upper (This.Parent.Parent.cPRGName))
			If loTool.PrivateCopy # 0
				This.Enabled = .T.
				This.Visible = .T.
			Else
				This.Enabled = .F.
				This.Visible = .F.
			Endif
		Else
			This.Enabled = .F.
			This.Visible = .T.
		Endif
		
		*** JRN 2023-08-23 : feature moved to 'Documentation and Settings'
		This.Enabled = .F.
		This.Visible = .F.
		
		DoDefault()
		
		
	ENDPROC

	PROCEDURE cntToolInfo.cmdToolBarIcon.Click
		This.Parent.Parent.ContextMenuForToolBar()
		Return
		
		
		
		#Define ccCaption 'Enter caption'
		#Define ccPicture 'Select picture'
		#Define ccDefault 'Default (Thor icon)'
		
		#Define ccTool 	'Thor'
		#Define ccKey 	'Thor ToolBar Path'
		
		
		*** DH 2018-04-10: new URL
		* ContextMenu home page = https://github.com/VFPX/Thor/blob/master/Docs/Thor_framework_contextmenu.md
		Local loContextMenu As ContextMenu Of 'C:\VISUAL FOXPRO\PROGRAMS\9.0\COMMON\Thor\Source\Thor_Menu.vcx'
		Local lcCaption, lcCurdir, lcNewMethodName, lcPRGName, lcPath, lcPicture, loException, loForm
		Local lxValue
		
		lcPRGName = This.Parent.Parent.cPRGName
		= Seek(Upper(lcPRGName), 'ToolBarTools', 'PRGName')
		lcCaption = Trim(ToolBarTools.Caption)
		lcPicture = ToolBarTools.Icon
		
		Do case
			Case not Empty(lcCaption)
				lnMark = 1
			Case File(lcPicture) and Upper(JustFname(lcPicture)) # Upper(ccThorIcon)
				lnMark = 2
			Otherwise
				lnMark = 3
		endcase	
			
		loContextMenu = Execscript(_Screen.cThorDispatcher, 'Class= ContextMenu')
		
		loContextMenu.AddMenuItem(ccCaption,,,,,,lnMark = 1)
		loContextMenu.AddMenuItem(ccPicture,,,,,,lnMark = 2)
		loContextMenu.AddMenuItem(ccDefault,,,,,,lnMark = 3)
		
		If Not loContextMenu.Activate()
			Return
		Endif
		
		Do Case
			Case loContextMenu.Keyword = ccCaption
				Private pcCaption
				loForm	  = Execscript(_Screen.cThorDispatcher, 'Class= DynamicFormDeskTop')
				pcCaption = lcCaption
		
				With loForm
					.Caption	 = This.Parent.Parent.oTool.Prompt
					.MinWidth	 = 275
					.MinHeight	 = 100
					.MinButton	 = .F.
					.MaxButton	 = .F.
					.BorderStyle = 2
		
					.cHeading			= ''
				Endwith
		
				Text To loForm.cBodyMarkup Noshow Textmerge
			pcCaption	.class 				= 'TextBox'
						.caption			= 'Caption:'
						.width				= 200
						.Increment			= 1			
						|
				Endtext
		
				loForm.Show(1)
		
				If 'O' = Vartype(loForm) And loForm.lSaveClicked
					lcCaption = pcCaption
				Else
					Return .F.
				Endif
		
			Case loContextMenu.Keyword = ccPicture
		
				lcPath = Execscript(_Screen.cThorDispatcher, 'Get Option=', ccKey, ccTool)
				If Isnull(lcPath)
					lcPath = Addbs(Home(1)) + 'Graphics'
				Endif
		
				lcCurdir = Sys(5) + Curdir()
				Try
					Cd(lcPath)
				Catch To loException
				Endtry
		
				lcPicture = Getpict()
				Cd(lcCurdir)
		
				If Empty(lcPicture)
					Return
				Endif
		
				lcCaption = ''
				Execscript(_Screen.cThorDispatcher, 'Set Option=', ccKey, ccTool, Justpath(lcPicture))
				
			Otherwise
			
				lcCaption = ''
				lcPicture = ccThorIcon
		
		Endcase
		
		Replace									;
				Icon	 With  lcPicture		;
				Caption	 With  lcCaption		;
			In ToolBarTools
		
		This.Refresh()
		
		
		
	ENDPROC

	PROCEDURE cntToolInfo.cmdToolBarIcon.Refresh
		lcPRGName = This.Parent.Parent.cPRGName
		If Not Empty (lcPRGName)
			loTool		 = Thisform.oTools.Item (Upper (lcPRGName))
			= Seek (Upper (lcPRGName), 'ToolBarTools', 'PRGName')
			This.Enabled = ToolBarTools.Enabled
			This.Visible = ToolBarTools.Enabled
			This.Picture = Trim(ToolBarTools.Icon)
			This.Caption = Trim(ToolBarTools.Caption)
		Else
			This.Enabled = .F.
			This.Visible = .F.
		Endif
		
		DoDefault()
		
		 
	ENDPROC

	PROCEDURE cntToolInfo.cmdToolBarIcon.RightClick
		Local lcPRGName
		
		lcPRGName = This.Parent.Parent.cPRGName
		= Seek (Upper (lcPRGName), 'ToolBarTools', 'PRGName')
		Replace Icon With 'Thor16.png' In ToolBarTools
		This.Refresh()
		
	ENDPROC

	PROCEDURE cntToolInfo.Edittoolbutton1.Click
		Thisform.RunTool(This.cPRGName)
		
	ENDPROC

	PROCEDURE cntToolInfo.Edittoolbutton1.Init
		* no default 
	ENDPROC

	PROCEDURE cntToolInfo.Edittoolbutton1.Refresh
		*!*	if vartype(This.Parent.oList.SelectedItem) = 'O'
		*!*		This.cPRGName = This.Parent.oList.SelectedItem.Tag.FullFileName
		*!*	endif vartype(This.Parent.oList.SelectedItem) = 'O'
		If Not Empty (This.Parent.Parent.cPRGName)
			This.cPRGName = This.Parent.Parent.oTool.FullFileName
			This.Enabled  = .T.
		Else
			This.Enabled = .F.
		Endif
	ENDPROC

	PROCEDURE cntToolInfo.oHotKeyControls.onclearhotkey
		* Remove the hotkey for the tool and update the list.
		
		local lcPRGName
		lcPRGName = This.Parent.Parent.cPRGName
		Thisform.oThor.RemoveToolHotKey(lcPRGName)
		Thisform.Refresh()
		
		
	ENDPROC

	PROCEDURE cntToolInfo.oHotKeyControls.onkeypressed
		* Update the list.
		
		
	ENDPROC

	PROCEDURE cntToolInfo.oHotKeyControls.onpreupdate
		* Add a record to ToolHotKeyAssignments if necessary.
		
		local lcPRGName
		lcPRGName = This.Parent.Parent.cPRGName
		Thisform.oThor.AddToolHotKey(lcPRGName)
		
	ENDPROC

	PROCEDURE cntToolInfo.oHotKeyControls.Refresh
		If Not Empty (This.Parent.Parent.cPRGName)
			This.cHotKeyDescription	= HotKeyDefinitions.Descript
			This.Enabled			= .T.
			This.lOnKeyLabelOnly = This.Parent.Parent.oTool.OnKeyLabelOnly
		
		Else
			This.cHotKeyDescription	= ''
			This.Enabled			= .F.
		Endif
		DoDefault()
		
	ENDPROC

	PROCEDURE cntToolInfo.oToolInfo.edtToolInfo.When
		*
	ENDPROC

	PROCEDURE cntToolInfo.oToolInfo.lblLink.Refresh
		*** JRN 2023-08-23 : feature moved to 'Documentation and Settings'
		This.Enabled = .F.
		This.Visible = .F.
		
	ENDPROC

	PROCEDURE cntToolInfo.oToolInfo.Refresh
		This.cPRGName = This.Parent.Parent.cPRGName
		
		
	ENDPROC

	PROCEDURE cntToolInfo.Refresh
		This.Visible =  This.Parent.lcntToolInfoVisible
		
	ENDPROC

ENDDEFINE

DEFINE CLASS toolkeysold AS basecontainer OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdCreateTool" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOpenToolFolder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Thor_sfsplitterh1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.oHotKeyControls" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.cmdEditTool" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.oToolInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.chkStartup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntToolInfo.cmdRemoveTool" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="SELECTTOOLFORBROWSING1" UniqueID="" Timestamp="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: createtool
		*m: loadlist		&& Loads the ListView with tools
		*m: otool_assign
		*m: selectitem		&& Selects the specified item in the ListView
		*p: cprgname
		*p: ctoolfilter		&& A filter for tools
		*p: otool
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 15
		cprgname = 
		ctoolfilter = 
		Height = 260
		Name = "toolkeysold"
		otool = .NULL.
		Width = 630
		_memberdata = <VFPData>
			<memberdata name="cprgname" display="cPRGName"/>
			<memberdata name="otool" display="oTool"/>
			<memberdata name="otool_assign" display="oTool_Assign"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdCreateTool' AS basecommandbutton WITH ;
		Anchor = 12, ;
		Caption = "\<Create Tool", ;
		Height = 23, ;
		Left = 333, ;
		Name = "cmdCreateTool", ;
		TabIndex = 9, ;
		Top = 236, ;
		Width = 96
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOpenToolFolder' AS basecommandbutton WITH ;
		Anchor = 12, ;
		Caption = "\<Open Tool Folder", ;
		Height = 23, ;
		Left = 466, ;
		Name = "cmdOpenToolFolder", ;
		TabIndex = 9, ;
		Top = 236, ;
		Width = 127
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntToolInfo' AS basecontainer WITH ;
		Anchor = 13, ;
		Height = 235, ;
		Left = 278, ;
		Name = "cntToolInfo", ;
		Top = 0, ;
		Width = 351
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="container" />

	ADD OBJECT 'cntToolInfo.chkStartup' AS basecheckbox WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		Caption = "Run at startup?", ;
		Left = 6, ;
		Name = "chkStartup", ;
		Top = 32
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntToolInfo.cmdEditTool' AS edittoolbutton WITH ;
		Anchor = 8, ;
		Left = 275, ;
		Name = "cmdEditTool", ;
		TabIndex = 5, ;
		Top = 1
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntToolInfo.cmdRemoveTool' AS basecommandbutton WITH ;
		Anchor = 8, ;
		Caption = "Remove Tool", ;
		Height = 23, ;
		Left = 255, ;
		Name = "cmdRemoveTool", ;
		TabIndex = 9, ;
		Top = 28, ;
		Width = 95
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntToolInfo.oHotKeyControls' AS hotkeycontrols WITH ;
		Anchor = 0, ;
		calias = ToolHotKeyAssignments, ;
		Left = 6, ;
		Name = "oHotKeyControls", ;
		TabIndex = 3, ;
		Top = 1, ;
		cmdGetHotKey.Name = "cmdGetHotKey", ;
		lblHotKey.Name = "lblHotKey", ;
		txtHotKey.Name = "txtHotKey", ;
		cmdClear.Name = "cmdClear"
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'cntToolInfo.oToolInfo' AS toolinfo WITH ;
		Anchor = 15, ;
		calias = ToolHotKeyAssignments, ;
		Height = 177, ;
		Left = 6, ;
		Name = "oToolInfo", ;
		TabIndex = 4, ;
		Top = 54, ;
		Width = 344, ;
		edtToolInfo.Anchor = 15, ;
		edtToolInfo.BackStyle = 0, ;
		edtToolInfo.Height = 160, ;
		edtToolInfo.IntegralHeight = .F., ;
		edtToolInfo.Left = 0, ;
		edtToolInfo.Name = "edtToolInfo", ;
		edtToolInfo.ReadOnly = .T., ;
		edtToolInfo.ScrollBars = 2, ;
		edtToolInfo.SelectOnEntry = .F., ;
		edtToolInfo.Top = 0, ;
		edtToolInfo.Width = 343, ;
		lblLink.Anchor = 4, ;
		lblLink.Left = 0, ;
		lblLink.Name = "lblLink", ;
		lblLink.Top = 161, ;
		lblVideo.Left = 215, ;
		lblVideo.Name = "lblVideo", ;
		lblVideo.Top = 161, ;
		lblOptions.Name = "lblOptions", ;
		lblPlugIns.Name = "lblPlugIns"
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'SELECTTOOLFORBROWSING1' AS selecttoolforbrowsing WITH ;
		Height = 260, ;
		Left = 0, ;
		Name = "SELECTTOOLFORBROWSING1", ;
		Top = 0, ;
		Width = 268, ;
		txtcNewFilter.Height = 22, ;
		txtcNewFilter.Left = 40, ;
		txtcNewFilter.Name = "txtcNewFilter", ;
		txtcNewFilter.Top = 1, ;
		txtcNewFilter.Width = 118, ;
		Baselabel1.Left = 3, ;
		Baselabel1.Name = "Baselabel1", ;
		Baselabel1.Top = 5, ;
		oTree.Height = 228, ;
		oTree.Left = 1, ;
		oTree.Name = "oTree", ;
		oTree.Top = 30, ;
		oTree.Width = 265
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />

	ADD OBJECT 'Thor_sfsplitterh1' AS thor_sfsplitterh WITH ;
		Anchor = 13, ;
		cobject1name = SELECTTOOLFORBROWSING1, ;
		cobject2name = cntToolInfo, ;
		Height = 259, ;
		Left = 268, ;
		lshowgripper = .T., ;
		Name = "Thor_sfsplitterh1", ;
		nobject1minsize = 150, ;
		nobject2minsize = 150, ;
		Top = 1, ;
		Visible = .T., ;
		Width = 10, ;
		ZOrderSet = 2, ;
		GRIPPER.GRIPPERDOT1.Name = "GRIPPERDOT1", ;
		GRIPPER.GRIPPERDOT1.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT1.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT1.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT2.Name = "GRIPPERDOT2", ;
		GRIPPER.GRIPPERDOT2.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT2.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT2.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT3.Name = "GRIPPERDOT3", ;
		GRIPPER.GRIPPERDOT3.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT3.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT3.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT4.Name = "GRIPPERDOT4", ;
		GRIPPER.GRIPPERDOT4.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT4.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT4.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT5.Name = "GRIPPERDOT5", ;
		GRIPPER.GRIPPERDOT5.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT5.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT5.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.Name = "GRIPPER"
		*< END OBJECT: ClassLib="thor_sf_splitter.vcx" BaseClass="container" />
	
	PROCEDURE createtool
		*==============================================================================
		* Method:			CreateTool
		* Purpose:			Creates a template PRG for a tool
		* Author:			Doug Hennig
		* Copyright:		(c) 2011 Stonefield Systems Group Inc.
		* Last revision:	05/21/2011 / JRN
		* Parameters:		none
		* Returns:			none
		* Environment in:	_System.vcx exists in the VFP FFC folder
		* Environment out:	a PRG specified by the user is created with template code.
		*==============================================================================
		
		Local loPEME_Tools AS Object
		Local loThorInfo AS 'ThorInfo' OF  'Thor_Utils'
		Local lcCode, lcFile, lcFolder, lcTemplateFile, lcTemplateFolder 
		
		****************************************************************
		lcFolder = Thisform.oTools.Tag
		Do Form CreateTool With lcFolder, Thisform.FontSize, Thisform.oThor To lcFile
		If Empty (lcFile)
			Return
		EndIf
		
		If '|' $ lcFile
			lcTemplateFolder = Addbs (lcFolder) + ccMyTemplates
			lcTemplateFile = lcTemplateFolder + '\' + Substr(lcFile, At('|', lcFile) + 1)
			lcFile = Left(lcFile, At('|', lcFile) - 1)
		Else
			lcTemplateFile = ''
		EndIf 	
		
		****************************************************************
		
		*!*	lcCD   = Sys(5) + Curdir()
		*!*	loFile = Newobject ('_ComDlg', Home() + 'FFC\_System.vcx')
		*!*	loFile.AddFilter ('Program file (*.prg)', '*.prg')
		*!*	loFile.lSaveDialog		 = .T.
		*!*	loFile.cInitialDirectory = Thisform.oTools.Tag
		*!*	loFile.ShowDialog()
		*!*	Cd (lcCD)
		*!*	lcFile = Addbs (loFile.cFilePath) + loFile.cFileTitle
		
		Do Case
			Case Empty (lcFile)
			Case Upper (Juststem (lcFile)) # Upper (ccTOOLNAMEPREFIX)
				Messagebox (ccTOOL_PREFIX_ERROR, MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
			Case File (lcFile)
				Messagebox (Strtran (ccALREADY_EXISTS, '%1', lcFile),  ;
					  MB_OK + MB_ICONSTOP, ccTHOR_CAPTION)
			Otherwise
				*** JRN 2011-04-18 : Get sample code for new PRG from ThorInfo
				loThorInfo = Newobject ('ThorInfo', 'Thor_Utils')
				If Empty(lcTemplateFile )
					lcCode	   = loThorInfo.GetSampleToolCode()
				Else
					lcCode = FileToStr(lcTemplateFile)
				EndIf 
				Strtofile (lcCode, lcFile)
				Modify Command (lcFile) Nowait
				*** JRN 2011-05-05 : Move / resize window
				loPEME_Tools = Execscript (_Screen.cThorDispatcher, 'class= tools from pemeditor')
				If 'O' = Vartype (loPEME_Tools)
					loPEME_Tools.AddMRUFile (lcFile)
					_oPEMEditor.oUtils.oIDEx.MoveWindow()
				Endif
		
		Endcase
		
	ENDPROC

	PROCEDURE loadlist		&& Loads the ListView with tools
		*==============================================================================
		* Method:			LoadList
		* Purpose:			Loads the ListView with tools
		* Author:			Doug Hennig
		* Last revision:	04/23/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	Thisform.oTools is a collection of ThorInfo objects
		* Environment out:	the ListView has been loaded with the registered tools
		*==============================================================================
		
		local lnItems, ;
			loTool, ;
			laItems[1], ;
			lcKey, ;
			lnI, ;
			lcPRGName, ;
			loItem
		
		* First put the tools into an array so we can sort it as desired.
		
		*** DH 04/23/2011: added support for filter
		lcFilter = upper(This.cToolFilter)
		lnItems  = 0
		Do while lnItems = 0
			for each loTool in Thisform.oTools
			*** DH 04/23/2011: support filter
				if empty(lcFilter) or ;
					lcFilter $ upper(loTool.Prompt + loTool.Summary + loTool.Description + loTool.Category + loTool.Source)
					lnItems = lnItems + 1
					dimension laItems[lnItems, 6]
					*** JRN 4/20/2011 : Use .Summary, if possible
					laItems[lnItems, 1] = loTool.Source + ': ' + ;
						strextract(Evl(loTool.Summary,loTool.Description), '', chr(13), 1, 2)
					laItems[lnItems, 2] = loTool.Prompt
					laItems[lnItems, 3] = loTool.PRGName
					laItems[lnItems, 4] = loTool.StatusBarText
					laItems[lnItems, 5] = loTool.Source + str(loTool.Sort) + Evl(loTool.Summary, loTool.Description)
					laItems[lnItems, 6] = loTool
				endif empty(lcFilter) ...
			next loTool
			If lnItems = 0
				lcFilter = ''
			EndIf 
		EndDo 
		asort(laItems, 5)
		
		* Save the selected item if the list is being reloaded.
		
		if vartype(This.oList.SelectedItem) = 'O'
			lcKey = This.oList.SelectedItem.Key
		endif vartype(This.oList.SelectedItem) = 'O'
		
		* Now load the list.
		
		with This.oList.ListItems
			.Clear()
			for lnI = 1 to lnItems
				lcPRGName = laItems[lnI, 3]
				loItem    = .Add(, lcPRGName, laItems[lnI, 1])
				loItem.Tag = laItems[lnI, 6] 
				= seek(upper(lcPRGName), 'ToolHotKeyAssignments', 'PRGName')
				= seek(ToolHotKeyAssignments.HotKeyID, 'HotKeyDefinitions', 'ID')
				loItem.SubItems(1) = trim(HotKeyDefinitions.Descript)
		
				= seek(upper(lcPRGName), 'StartUpTools', 'PRGName')
				loItem.SubItems(2) = IIF(StartUpTools.Startup, 'Yes', '')
			next lnI
		endwith
		
		* Reselect the former item.
		
		if empty(lcKey)
			This.SelectItem(This.oList.ListItems.Item(1))
		else
			This.SelectItem(lcKey)
		endif empty(lcKey)
		
	ENDPROC

	PROCEDURE otool_assign
		Lparameters toTool
		Local lcPRGName
		
		This.oTool = toTool
		
		If VarType (toTool) = 'O'
			lcPRGName	  = toTool.PRGName
		Else
			lcPRGName = ''
		Endif
		
		This.cPRGName = lcPRGName
		
		= Seek (Upper (lcPRGName), 'ToolHotKeyAssignments', 'PRGName')
		= Seek (ToolHotKeyAssignments.HotKeyID, 'HotKeyDefinitions', 'ID')
		= Seek (Upper (lcPRGName), 'StartUpTools', 'PRGName')
		
		This.cntToolInfo.Refresh()
		
	ENDPROC

	PROCEDURE selectitem		&& Selects the specified item in the ListView
		*==============================================================================
		* Method:			SelectItem
		* Purpose:			Selects the specified item in the ListView
		* Author:			Doug Hennig
		* Last revision:	03/31/2011
		* Parameters:		tuItem - a node or a node key
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		Lparameters loTool
		
		With This
			.oTool    = loTool
		
			If Not Thisform.lRefreshTools
				.cntToolInfo.Refresh()
			Endif Not Thisform.lRefreshTools
		Endwith
		
	ENDPROC

	PROCEDURE cmdCreateTool.Click
		This.Parent.CreateTool()
		
	ENDPROC

	PROCEDURE cmdCreateTool.Init
		This.Caption = ccCREATE_TOOL
		dodefault()
		
	ENDPROC

	PROCEDURE cmdOpenToolFolder.Click
		Local lcPath
		
		lcPath = '"' + Thisform.oTools.Tag + 'My Tools\"'
		Run /N "explorer" &lcPath
		return
	ENDPROC

	PROCEDURE cmdOpenToolFolder.Init
		This.Caption = ccOPEN_TOOL_FOLDER
		dodefault()
		
	ENDPROC

	PROCEDURE cntToolInfo.chkStartup.Init
		This.Caption = ccSTARTUPCAPTION
	ENDPROC

	PROCEDURE cntToolInfo.chkStartup.InteractiveChange
		Local lcPRGName
		
		lcPRGName = This.Parent.Parent.cPRGName
		If Seek (Upper (lcPRGName), 'StartUpTools', 'PRGName')
			Replace Startup With This.Value In StartUpTools
		Else
			Insert Into StartUpTools (PRGName, Startup) Values (lcPRGName, This.Value)
		Endif
		
		
		
	ENDPROC

	PROCEDURE cntToolInfo.chkStartup.Refresh
		If Not Empty (This.Parent.Parent.cPRGName)
			This.Value	 = StartUpTools.Startup
			This.Enabled = .T.
		Else
			This.Value	 = .F.
			This.Enabled = .F.
		Endif
		
		DoDefault()
		
	ENDPROC

	PROCEDURE cntToolInfo.cmdEditTool.Refresh
		*!*	if vartype(This.Parent.oList.SelectedItem) = 'O'
		*!*		This.cPRGName = This.Parent.oList.SelectedItem.Tag.FullFileName
		*!*	endif vartype(This.Parent.oList.SelectedItem) = 'O'
		If Not Empty (This.Parent.Parent.cPRGName)
			This.cPRGName = This.Parent.Parent.oTool.FullFileName
			This.Enabled  = .T.
		Else
			This.Enabled = .F.
		Endif
	ENDPROC

	PROCEDURE cntToolInfo.cmdEditTool.RightClick
		*** DH 2018-04-01: new URL
		* tools home page = https://github.com/VFPX/Thor/blob/master/Docs/Thor_tools_object.md
		Local loTools
		loTools = Execscript (_Screen.cThorDispatcher, 'Class= tools from pemeditor')
		loTools.EditSourceX (This.cPRGName)
	ENDPROC

	PROCEDURE cntToolInfo.cmdRemoveTool.Click
		Local lcPrgName
		lcPrgName = This.Parent.Parent.cPRGName
		If Not Empty (lcPrgName)
			If Messagebox ('Remove this tool (' + lcPrgName + ')?', 35, 'Remove this tool?', 0) = 6
				If Thisform.oThor.RemoveTool (lcPrgName)
					Messagebox ('Tool removed', 64, 'Removed', 0)
				Else
					Messagebox ('Unable to remove tool', 16, 'Failure', 0)
				Endif
			Endif
		Endif
		
	ENDPROC

	PROCEDURE cntToolInfo.oHotKeyControls.onclearhotkey
		* Remove the hotkey for the tool and update the list.
		
		local lcPRGName
		lcPRGName = This.Parent.Parent.cPRGName
		Thisform.oThor.RemoveToolHotKey(lcPRGName)
		
	ENDPROC

	PROCEDURE cntToolInfo.oHotKeyControls.onkeypressed
		* Update the list.
		
		
	ENDPROC

	PROCEDURE cntToolInfo.oHotKeyControls.onpreupdate
		* Add a record to ToolHotKeyAssignments if necessary.
		
		local lcPRGName
		lcPRGName = This.Parent.Parent.cPRGName
		Thisform.oThor.AddToolHotKey(lcPRGName)
		
	ENDPROC

	PROCEDURE cntToolInfo.oHotKeyControls.Refresh
		If Not Empty (This.Parent.Parent.cPRGName)
			This.cHotKeyDescription	= HotKeyDefinitions.Descript
			This.Enabled			= .T.
		Else
			This.cHotKeyDescription	= ''
			This.Enabled			= .F.
		Endif
		
		DoDefault()
		
	ENDPROC

	PROCEDURE cntToolInfo.oToolInfo.edtToolInfo.When
		*
	ENDPROC

	PROCEDURE cntToolInfo.oToolInfo.Refresh
		This.cPRGName = This.Parent.Parent.cPRGName
		
		
	ENDPROC

	PROCEDURE cntToolInfo.Refresh
		This.Visible =  Not Empty (This.Parent.cPRGName)
		
	ENDPROC

ENDDEFINE
