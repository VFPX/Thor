*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thor_utils.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS findexe AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "thor.h"
	*<DefinedPropArrayMethod>
		*m: find
		*m: updateexename
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Name = "findexe"
		_memberdata = <VFPData>
			<memberdata name="find" display="Find"/>
			<memberdata name="updateexename" display="UpdateEXEName"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE find
		Lparameters lcFileName
		
		Local lcFile As String ;
			, llKeepTrying As Boolean ;
			, lnResponse As Number
		If File (lcFileName)
			Return Fullpath (lcFileName)
		Endif
		
		lnResponse = Messagebox (['] + lcFileName + [' not found.  Search for it?], 4 + 32)
		If lnResponse <> 6
			Return ''
		Endif
		
		llKeepTrying = .T.
		Do While llKeepTrying
			Try
				lcFile = Locfile (lcFileName)
				If Upper (Right (lcFile, Len (lcFileName))) == Upper (lcFileName)
					llKeepTrying = .F.
				Else
					Messagebox ('Not found: searching for ' + lcFileName, 16)
				Endif
			Catch
				lcFile		 = ''
				llKeepTrying = .F.
			Endtry
		Enddo
		
		Return lcFile
		
	ENDPROC

	PROCEDURE updateexename
		Lparameters tcPRGFile, tcNewEXE
		
		Local lcBAKFile As String ;
			, lcNewPRGText As String ;
			, lcPRGFile As String ;
			, lcPRGText As String ;
			, lnLen As Number
		
		lcPRGFile = Forceext(tcPRGFile, 'PRG')
		lcPRGText = Filetostr(lcPRGFile)
		
		lcBAKFile = Forceext(lcPRGFile, 'BKK')
		Erase (lcBAKFile)
		Strtofile(lcPRGText, lcBAKFile, 0)
		
		lnLen		 = At(ccCR, lcPRGText)
		lcNewPRGText = [#Define ccExecutable '] + tcNewEXE + ['] + Substr(lcPRGText, lnLen)
		
		Erase (lcPRGFile)
		Strtofile(lcNewPRGText, Forceext(lcPRGFile, 'PRG'), 0)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS hotkey AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "thor_ui.h"
	*<DefinedPropArrayMethod>
		*m: createmacro		&& Creates the binary code for a single macro
		*m: findhotkeybyscancode		&& Finds the hot key by the scan code
		*m: gethotkeydescription		&& Gets the descriptive name for the hotkey
		*m: getkeycode		&& Returns the 2-byte macro key code for the specified key
		*m: getkeystate		&& Sets lShift, lCtrl, and lAlt based on the current key state
		*m: getmodifiersvalue		&& Gets the state of the modifiers as a binary value
		*m: getscancode
		*m: getshifts
		*m: isvalid		&& Returns .T. if the hotkey is valid
		*p: ckey		&& The hot key name
		*p: lalt		&& .T. if Alt is used
		*p: lctrl		&& .T. if Ctrl is used
		*p: lshift		&& .T. if Shift is used
		*p: nscancode		&& The scan code for the key
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		ckey = 
		lalt = .F.
		lctrl = .F.
		lshift = .F.
		Name = "hotkey"
		nscancode = 0
		Width = 17
		_memberdata = <VFPData>
			<memberdata name="lshift" display="lShift"/>
			<memberdata name="lctrl" display="lCtrl"/>
			<memberdata name="lalt" display="lAlt"/>
			<memberdata name="nscancode" display="nScanCode"/>
			<memberdata name="findhotkeybyscancode" display="FindHotKeyByScanCode"/>
			<memberdata name="ckey" display="cKey"/>
			<memberdata name="getkeystate" display="GetKeyState"/>
			<memberdata name="isvalid" display="IsValid"/>
			<memberdata name="gethotkeydescription" display="GetHotKeyDescription"/>
			<memberdata name="getmodifiersvalue" display="GetModifiersValue"/>
			<memberdata name="getkeycode" display="GetKeyCode"/>
			<memberdata name="createmacro" display="CreateMacro"/>
			<memberdata name="getscancode" display="GetScanCode"/>
			<memberdata name="getshifts" display="GetShifts"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE createmacro		&& Creates the binary code for a single macro
		*==============================================================================
		* Method:			CreateMacro
		* Purpose:			Creates the binary code for a single macro
		* Author:			Doug Hennig
		* Last revision:	03/23/2011
		* Parameters:		tcMacroName - the name of the macro
		*					tcCommand   - the command to execute
		* Returns:			the binary code for the macro
		* Environment in:	see This.GetKeyCode for requirements
		* Environment out:	none
		* Notes:
		* To create a macro file, use code like this:
		*
		*	lcMacros = chr(0xFF) + chr(0x79) + ;
				replicate(chr(32), 13) + chr(0) + ;
				chr(1) + chr(0) + ;
				CreateMacro(KeyCode1, Modifier1, Name1, Code1) + ;
				CreateMacro(KeyCode2, Modifier2, Name2, Code2) + ;
				etc.
		*
		* where CHR(1) is the count of the number of macros in the file (if more than
		* 255, update following byte as well). Then use the following to create the
		* macro file and immediately load it so the macros are available for PLAY
		* MACRO:
		*
		* SAVE MACROS lcMacros TO SomeFile.FKY
		* RESTORE MACROS FROM SomeFile.FKY
		*==============================================================================
		
		lparameters tcMacroName, ;
			tcCommand
		local lcKeyCode, ;
			lcCode, ;
			lcMacro, ;
			lcMacros, ;
			lnI
		lcKeyCode = This.GetKeyCode()
		if not isnull(lcKeyCode)
		*** this ends with CHR(13) so it executes
			lcCode   = tcCommand + chr(13)
			lcMacro  = padr(trim(tcMacroName), 20, chr(0)) + ;
				chr(len(lcCode)) + chr(0) + ;
				lcKeyCode
			lcMacros = ''
			for lnI = 1 to len(lcCode)
				lcMacros = lcMacros + substr(lcCode, lnI, 1) + chr(0)
			next lnI
		else
			lcMacros = .NULL.
		endif not isnull(lcKeyCode)
		return lcMacros
		
	ENDPROC

	PROCEDURE findhotkeybyscancode		&& Finds the hot key by the scan code
		*==============================================================================
		* Method:			FindHotKeyByScanCode
		* Purpose:			Finds the hot key by the scan code
		* Author:			Doug Hennig
		* Last revision:	03/16/2011
		* Parameters:		none
		* Returns:			.T. if the hot key was found
		* Environment in:	HotKeys is open
		*					This.nScanCode is set to the scan code for the key
		* Environment out:	HotKeys is positioned to the record for the hot key if
		*						found or EOF if not
		*					This.cKey is set to the key name if found
		*==============================================================================
		
		llFound = seek(This.nScanCode, 'HotKeys', 'ScanCode')
		if llFound
			This.cKey = trim(HotKeys.Key)
		endif llFound
		return llFound
		
	ENDPROC

	PROCEDURE gethotkeydescription		&& Gets the descriptive name for the hotkey
		*==============================================================================
		* Method:			GetHotKeyDescription
		* Purpose:			Gets the descriptive name for the hotkey
		* Author:			Doug Hennig
		* Last revision:	03/17/2011
		* Parameters:		none
		* Returns:			the descriptive name for the hotkey
		* Environment in:	This.lShift, lCtrl, and lAlt are .T. if those modifier keys
		*						are used
		*					This.cKey contains the descriptive name of the key
		* Environment out:	none
		*==============================================================================
		
		local lcDescrip
		with This
			lcDescrip = iif(.lShift, ccSHIFT, '') + iif(.lCtrl, ccCTRL,  '') + ;
				iif(.lAlt, ccALT, '') + .cKey
		endwith
		return lcDescrip
		
	ENDPROC

	PROCEDURE getkeycode		&& Returns the 2-byte macro key code for the specified key
		*==============================================================================
		* Method:			GetKeyCode
		* Purpose:			Returns the 2-byte macro key code for the specified key
		* Author:			Doug Hennig
		* Last revision:	03/20/2011
		* Parameters:		none
		* Returns:			the 2-byte macro key code for the specified key or .NULL.
		*						if we can't create a macro key code
		* Environment in:	This.nScanCode, lShift, lCtrl, and lAlt are set
		*						appropriately
		*					HotKeys is open
		* Environment out:	see This.FindHotKeyByScanCode
		*==============================================================================
		
		local llFound, ;
			lcReturn
		
		* Find the record for the keypress.
		
		lnShiftAltCtrl = This.GetModifiersValue()
		llFound        = This.FindHotKeyByScanCode()
		do case
		
		* Return NULL if we can't find or create a macro for that key.
		
			case not llFound or ;
				(lnShiftAltCtrl = cnNO_MODIFIER and HotKeys.BareKey = -1) or ;
				(lnShiftAltCtrl = cnSHIFT and HotKeys.ShKey = -1) or ;
				(lnShiftAltCtrl = cnCTRL and HotKeys.CtKey = -1) or ;
				(lnShiftAltCtrl = cnALT and HotKeys.AltKey = -1) or ;
				(lnShiftAltCtrl = cnSHIFT + cnCTRL and HotKeys.ShCtKey = -1) or ;
				(lnShiftAltCtrl = cnSHIFT + cnALT and HotKeys.ShAltKey = -1) or ;
				(lnShiftAltCtrl = cnCTRL + cnALT and HotKeys.CtAltKey = -1) or ;
				(lnShiftAltCtrl = cnSHIFT + cnCTRL + cnALT and HotKeys.ShCtAltKey = -1)
				lcReturn = .NULL.
		
		* Return the appropriate key code for the key.
		
			case lnShiftAltCtrl = cnNO_MODIFIER
				lcReturn = chr(HotKeys.BareCode) + chr(HotKeys.BareKey)
			case lnShiftAltCtrl = cnSHIFT
				lcReturn = chr(HotKeys.ShCode) + chr(HotKeys.ShKey)
			case lnShiftAltCtrl = cnCTRL
				lcReturn = chr(HotKeys.CtCode) + chr(HotKeys.CtKey)
			case lnShiftAltCtrl = cnALT
				lcReturn = chr(HotKeys.AltCode) + chr(HotKeys.AltKey)
			case lnShiftAltCtrl = cnSHIFT + cnCTRL
				lcReturn = chr(HotKeys.ShCtCode) + chr(HotKeys.ShCtKey)
			case lnShiftAltCtrl = cnSHIFT + cnALT
				lcReturn = chr(HotKeys.AltCode) + chr(HotKeys.ShAltKey)
			case lnShiftAltCtrl = cnCTRL + cnALT
				lcReturn = chr(HotKeys.AltCode) + chr(HotKeys.CtAltKey)
			otherwise
				lcReturn = chr(HotKeys.AltCode) + chr(HotKeys.ShCtAltKey)
		endcase
		return Evl(lcReturn, '??')
		
		
	ENDPROC

	PROCEDURE getkeystate		&& Sets lShift, lCtrl, and lAlt based on the current key state
		*==============================================================================
		* Method:			GetKeyState
		* Purpose:			Sets lShift, lCtrl, and lAlt based on the current key state
		* Author:			Doug Hennig
		* Copyright:		(c) 2011 Stonefield Systems Group Inc.
		* Last revision:	03/16/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	none
		* Environment out:	This.lShift, lCtrl, and lAlt are set based on whether those
		*						keys are currently held down
		*==============================================================================
		
		with This
			.lShift = GetKeyState(VK_SHIFT)   > 65000
			.lCtrl  = GetKeyState(VK_CONTROL) > 65000
			.lAlt   = GetKeyState(VK_MENU)    > 65000
		endwith
		
	ENDPROC

	PROCEDURE getmodifiersvalue		&& Gets the state of the modifiers as a binary value
		*==============================================================================
		* Method:			GetModifiersValue
		* Purpose:			Gets the state of the modifiers as a binary value
		* Author:			Doug Hennig
		* Last revision:	03/17/2011
		* Parameters:		none
		* Returns:			the state of the modifiers as a binary value
		* Environment in:	This.lShift, lCtrl, and lAlt are set appropriately
		* Environment out:	none
		*==============================================================================
		
		local lnState
		with This
			lnState = iif(.lShift, cnSHIFT, cnNO_MODIFIER) + ;
				iif(.lCtrl, cnCTRL, cnNO_MODIFIER) + ;
				iif(.lAlt, cnALT, cnNO_MODIFIER)
		endwith
		return lnState
		
	ENDPROC

	PROCEDURE getscancode
		*==============================================================================
		* Method:			GetScanCode
		* Purpose:			Returns the scan code corresponding to a key code
		* Author:			Jim Nelson
		* Last revision:	06/17/2011 JRN
		* Parameters:		tnKeyCode
		* Returns:			ScanCode; 0 if not found
		* Environment in:	This.nScanCode, lShift, lCtrl, and lAlt are set
		*						appropriately
		*					HotKeys is open
		* Environment out:	Current record in HotKeys now aligned with the match
		*==============================================================================
		
		Lparameters tnKeyCode
		
		Select HotKeys
		Do Case
			Case This.lAlt
				Locate For altcode = tnKeyCode
			Case This.lCtrl
				Locate For Ctcode = IIF(tnKeyCode # 127, tnKeyCode, 8) 
			Case This.lShift
				Locate For ShCode = tnKeyCode
			Otherwise
				Locate For KeyCode = tnKeyCode
		Endcase
		
		If Found()
			Return ScanCode
		Else
			Return 0
		Endif
	ENDPROC

	PROCEDURE getshifts
		*==============================================================================
		* Method:			GetShifts
		* Purpose:			Returns shiftstate (sum of different shift keys)
		* Author:			Jim Nelson
		* Copyright:		(c) 2011 Stonefield Systems Group Inc.
		* Last revision:	06/17/2011 JRN
		* Parameters:		none
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		Return IIf (This.lShift, 1, 0)	;
			+ IIf (This.lCtrl, 2, 0)	;
			+ IIf (This.lAlt, 4, 0)
		
	ENDPROC

	PROCEDURE Init
		* Open the HotKeys table if necessary.
		
		if not used('HotKeys')
			use HotKeys in 0
		endif not used('HotKeys')
		
		* Declare Windows API functions we need.
		
		declare integer GetKeyState in Win32API integer vKey
		
	ENDPROC

	PROCEDURE isvalid		&& Returns .T. if the hotkey is valid
		*==============================================================================
		* Method:			IsValid
		* Purpose:			Returns .T. if the hotkey is valid
		* Author:			Doug Hennig
		* Copyright:		(c) 2011 Stonefield Systems Group Inc.
		* Last revision:	04/09/2011
		* Parameters:		tlOKL - .T. if this is used for ON KEY LABEL
		* Returns:			.T. if the hotkey is valid
		* Environment in:	This.nScanCode, lShift, lCtrl, and lAlt are set as
		*						necessary
		*					see This.FindHotKeyByScanCode for others
		* Environment out:	see This.FindHotKeyByScanCode
		*==============================================================================
		
		lparameters tlOKL
		with This
			llReturn = .FindHotKeyByScanCode()
			do case
				case not llReturn
				case tlOKL and ((.lShift and .lCtrl) or (.lShift and .lAlt) or ;
					(.lCtrl and .lAlt))
					&& don't allow combinations of modifiers for ON KEY LABEL
					llReturn = .F.
				case .lShift and .lCtrl and .lAlt
					llReturn = HotKeys.ShCtAltKey > 0
				case .lShift and .lCtrl
					llReturn = HotKeys.ShCtKey > 0
				case .lShift and .lAlt
					llReturn = HotKeys.ShAltKey > 0
				case .lCtrl and .lAlt
					llReturn = HotKeys.CtAltKey > 0
				case .lShift
					llReturn = HotKeys.ShKey > 0
				case .lCtrl
					llReturn = HotKeys.CtKey > 0
				case .lAlt
					llReturn = HotKeys.AltKey > 0
				otherwise
					llReturn = HotKeys.BareCode > 0
			endcase
		endwith
		return llReturn
		
	ENDPROC

ENDDEFINE

DEFINE CLASS idewindowsevents AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: eventhandler		&& Handles the Windows events we're bound to
		*m: findideclientwindow		&& Finds the client window of the IDE window with the specified caption
		*m: findidewindow		&& Finds an IDE window by caption
		*p: ccaption		&& The caption of the window to capture events for
		*p: noldproc		&& The former Windows event handler
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		ccaption = 
		Name = "idewindowsevents"
		noldproc = 0
		Width = 17
		_memberdata = <VFPData>
			<memberdata name="noldproc" display="nOldProc"/>
			<memberdata name="ccaption" display="cCaption"/>
			<memberdata name="findidewindow" display="FindIDEWindow"/>
			<memberdata name="findideclientwindow" display="FindIDEClientWindow"/>
			<memberdata name="eventhandler" display="EventHandler"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE eventhandler		&& Handles the Windows events we're bound to
		*==============================================================================
		* Method:			EventHandler
		* Purpose:			Handles the Windows events we're bound to
		* Author:			Doug Hennig
		* Last revision:	03/17/2011
		* Parameters:		hWnd   - the hWnd for the window the event is for
		*					Msg    - the event ID
		*					wParam - parameter about the event
		*					lParam - additional parameter about the event
		* Returns:			none
		* Environment in:	This.nOldProc has been set to the former Windows event
		*						handler
		*					the Windows API function CallWindowProc has been declared
		* Environment out:	the former Windows event handler has been called
		*==============================================================================
		
		lparameters hWnd, ;
			Msg, ;
			wParam, ;
			lParam
		return CallWindowProc(This.nOldProc, hWnd, Msg, wParam, lParam)
		
	ENDPROC

	PROCEDURE findideclientwindow		&& Finds the client window of the IDE window with the specified caption
		*==============================================================================
		* Method:			FindIDEClientWindow
		* Purpose:			Finds the client window of the IDE window with the
		*						specified caption
		* Author:			Doug Hennig
		* Last revision:	03/17/2011
		* Parameters:		tcCaption - the caption of the IDE window
		* Returns:			the window's hWnd if it was found or 0 if not
		* Environment in:	none
		* Environment out:	see This.FindIDEWindow
		*==============================================================================
		
		lparameters tcCaption
		local lnhWnd, ;
			lnwHandle, ;
			lnwChild
		lnhWnd = This.FindIDEWindow(tcCaption)
		if lnhWnd > 0
			lnwHandle = sys(2326, lnhWnd)
			lnwChild  = sys(2325, lnwHandle)
			lnhWnd    = sys(2327, lnwChild)
		endif lnhWnd > 0
		return lnhWnd
		
	ENDPROC

	PROCEDURE findidewindow		&& Finds an IDE window by caption
		*==============================================================================
		* Method:			FindIDEWindow
		* Purpose:			Finds an IDE window by caption
		* Author:			Doug Hennig
		* Last revision:	03/17/2011
		* Parameters:		tcCaption - the caption of the IDE window
		* Returns:			the window's hWnd if it was found or 0 if not
		* Environment in:	the Windows API functions FindWindowEx and GetWindowText
		*						have been declared
		* Environment out:	This.cCaption is set to tcCaption
		*==============================================================================
		
		lparameters tcCaption
		local lnhWnd, ;
			lnhChild, ;
			lcCaption
		This.cCaption = tcCaption
		lnhWnd        = _screen.hWnd
		lnhChild      = 0
		do while .T.
			lnhChild = FindWindowEx(lnhWnd, lnhChild, 0, 0)
			if lnhChild = 0
				exit
			endif lnhChild = 0
			lcCaption = space(80)
			GetWindowText(lnhChild, @lcCaption, len(lcCaption))
			lcCaption = upper(left(lcCaption, at(chr(0), lcCaption) - 1))
			if lcCaption = upper(tcCaption)
				exit
			endif lcCaption = upper(tcCaption)
		enddo while .T.
		return lnhChild
		
	ENDPROC

	PROCEDURE Init
		#define GWL_WNDPROC				-4
		
		declare integer GetWindowLong in Win32API ;
			integer hWnd, integer nIndex
		declare integer CallWindowProc in Win32API ;
			integer lpPrevWndFunc, integer hWnd, integer Msg, integer wParam, ;
			integer lParam
		declare integer FindWindowEx in Win32API;
			integer, integer, string, string
		declare integer GetWindowText in Win32API ;
			integer, string @, integer
		This.nOldProc = GetWindowLong(_screen.hWnd, GWL_WNDPROC)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS thorinfo AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "thor.h"
	*<DefinedPropArrayMethod>
		*m: addquotes
		*m: addthorproperty
		*m: appname_assign
		*m: clear		&& Blanks out all properties
		*m: fullappname_assign
		*m: getsampleselfregistercode
		*m: getsampletoolcode
		*m: register		&& Creates a PRG and registers it with Thor, using the values of the properties in this class.
		*p: appid		&& AppID of the VFPX project the tool belongs to
		*p: appname
		*p: author
		*p: bloglink
		*p: blogname
		*p: canrunatstartup
		*p: category
		*p: changeloglink
		*p: changelogname
		*p: classdefinitions
		*p: classes		&& List of classes to be published for this APP, separated by commas.  e.g.,  'thorinfo of thor_utils'
		*p: code		&& Code  that will be run for this Tool. May be multiple lines, separated by CRs
		*p: definestatements
		*p: description		&& The tool's full description; may be as long as needed, and may include CRs, etc.  Also used for .Summary if .Summary is blank.  REQUIRED.
		*p: foldername
		*p: forumlink
		*p: forumname
		*p: fullappname
		*p: fullfilename
		*p: internalsort
		*p: link		&& A link to a Web page for the tool
		*p: onkeylabelonly
		*p: optionclasses		&& The name of the main APP file, without the path (e.g., GoFish4.App)
		*p: optiontool
		*p: pluginclasses
		*p: plugins
		*p: prgname		&& The name of the PRG to run the tool
		*p: privatecopy
		*p: prompt		&& The default prompt for the tool in menus.  REQUIRED
		*p: sort		&& The sort order; used to sort tools that all have the same Source.
		*p: source		&& The tool's source (e.g., 'PEM Editor' or 'GoFish4')
		*p: statusbartext		&& The status bar text for the menu item for the tool.  If empty, .Summary or the first line of .Description is used.
		*p: subcategory		&& The name of the main APP file, without the path (e.g., GoFish4.App)
		*p: summary		&& A one-line summary for the tool.  If left blank, the first line from .Description is used.
		*p: updateprg
		*p: version		&& The version number
		*p: versionfileurl
		*p: versionlocalfilename
		*p: videolink
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		appid = 
		appname = 
		author = 
		bloglink = 
		blogname = 
		canrunatstartup = .T.
		category = 
		changeloglink = 
		changelogname = 
		classdefinitions = 
		classes = 
		code = 
		definestatements = 
		description = 
		foldername = 
		forumlink = 
		forumname = 
		fullappname = 
		fullfilename = 
		internalsort = 
		link = 
		Name = "thorinfo"
		onkeylabelonly = .F.
		optionclasses = 
		optiontool = .F.
		pluginclasses = 
		plugins = .F.
		prgname = 
		privatecopy = 0
		prompt = 
		sort = 0
		source = 
		statusbartext = 
		subcategory = 
		summary = 
		updateprg = .F.
		version = 
		versionfileurl = 
		versionlocalfilename = 
		videolink = 
		Width = 17
		_memberdata = <VFPData>
			<memberdata name="prompt" display="Prompt"/>
			<memberdata name="description" display="Description"/>
			<memberdata name="source" display="Source"/>
			<memberdata name="version" display="Version"/>
			<memberdata name="sort" display="Sort"/>
			<memberdata name="link" display="Link"/>
			<memberdata name="statusbartext" display="StatusBarText"/>
			<memberdata name="summary" display="Summary"/>
			<memberdata name="getsampletoolcode" display="GetSampleToolCode"/>
			<memberdata name="getsampleselfregistercode" display="GetSampleSelfRegisterCode"/>
			<memberdata name="author" display="Author"/>
			<memberdata name="category" display="Category"/>
			<memberdata name="subcategory" display="SubCategory"/>
			<memberdata name="subcategory_assign" display="SubCategory_Assign"/>
			<memberdata name="prgname" display="PRGName"/>
			<memberdata name="fullfilename" display="FullFileName"/>
			<memberdata name="addquotes" display="AddQuotes"/>
			<memberdata name="classes" display="Classes"/>
			<memberdata name="clear" display="Clear"/>
			<memberdata name="code" display="Code"/>
			<memberdata name="foldername" display="FolderName"/>
			<memberdata name="fullappname" display="FullAppName"/>
			<memberdata name="register" display="Register"/>
			<memberdata name="versionlocalfilename" display="VersionLocalFileName"/>
			<memberdata name="versionfileurl" display="VersionFileURL"/>
			<memberdata name="updateprg" display="UpdatePRG"/>
			<memberdata name="internalsort" display="InternalSort"/>
			<memberdata name="videolink" display="VideoLink"/>
			<memberdata name="optionclasses" display="OptionClasses"/>
			<memberdata name="optionclasses_assign" display="OptionClasses_Assign"/>
			<memberdata name="pluginclasses" display="PlugInClasses"/>
			<memberdata name="classdefinitions" display="ClassDefinitions"/>
			<memberdata name="onkeylabelonly" display="OnKeyLabelOnly"/>
			<memberdata name="optiontool" display="OptionTool"/>
			<memberdata name="addthorproperty" display="AddThorProperty"/>
			<memberdata name="blogname" display="BlogName"/>
			<memberdata name="bloglink" display="BlogLink"/>
			<memberdata name="forumname" display="ForumName"/>
			<memberdata name="forumlink" display="ForumLink"/>
			<memberdata name="changeloglink" display="ChangeLogLink"/>
			<memberdata name="changelogname" display="ChangeLogName"/>
			<memberdata name="appname" type="property" display="AppName"/>
			<memberdata name="appname_assign" display="AppName_Assign"/>
			<memberdata name="fullappname_assign" display="FullAppName_Assign"/>
			<memberdata name="canrunatstartup" display="CanRunAtStartUp"/>
			<memberdata name="definestatements" display="DefineStatements"/>
			<memberdata name="privatecopy" display="PrivateCopy"/>
			<memberdata name="plugins" display="PlugIns"/>
			<memberdata name="appid" display="AppID"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE addquotes
		Lparameters tcText
		
		Local lcText 
		
		If 'C' # Vartype(tcText)
			Return ['']
		EndIf
		
		lcText = Alltrim(tcText)
		
		If Len (lcText) > 250
			lcText = QuotesAroundLongText (Left (lcText, 250)) + ';' + Chr(13) + Space(9) + '+' + QuotesAroundLongText (Substr (lcText, 251))
			Return lcText
		Endif
		
		lcText = Strtran (lcText, ccLF, [])
		lcText = Strtran (lcText, ['], [' + "'" + '])
		lcText = Strtran (lcText, ccCR, [' + Chr(13) + '])
		lcText = ['] + lcText + [']
		lcText = Strtran (lcText, ['' + ], [])
		lcText = Strtran (lcText, [ + ''], [])
		Return lcText
		
		
	ENDPROC

	PROCEDURE addthorproperty
		#Define ccSkipThisMarker '*&*&'
		#Define cnNameWidth 	18
		#Define ccIndentation 	ccTab + ccTab
		
		Lparameters tcPropertyName, tcDescription, txDefault
		
		Local lcComments, lcName, lcResult, lxValue
		lxValue	   = Getpem(This, tcPropertyName)
		lcName	   = Padr(tcPropertyName, cnNameWidth)
		lcComments = Iif(Empty(tcDescription), '', ' &' + '& ' + tcDescription)
		
		Do Case
			Case 'L' = Vartype(lxValue)
				If lxValue # txDefault
					lcResult =  '.' + lcName + ' = ' + Transform(lxValue) + lcComments
				Else
					Return ccSkipThisMarker
				Endif
		
			Case Empty(lxValue)
				Return ccSkipThisMarker
		
			Case 'N' = Vartype(lxValue)
				lcResult =  '.' + lcName + ' = ' + Transform(lxValue) + lcComments
		
			Case ccTab $ lxValue			;
					Or ccCR $ lxValue		;
					Or ccLF $ lxValue		;
					Or ['] $ lxValue
				lcResult = '#@@@#Text to .' + tcPropertyName + ' NoShow' + lcComments		;
					+ ccCRLF + lxValue														;
					+ ccCRLF + '#@@@#EndText'
		
			Case Len(lxValue) > 250
				lcResult = '#@@@#Text to .' + tcPropertyName + ' NoShow' + lcComments		;
					+ ccCRLF + This.AddQuotes(lxValue)										;
					+ ccCRLF + '#@@@#EndText'
		
			Otherwise
				lcResult = '.' + lcName + [ = '] + Trim(lxValue, 1, ' ', ccTab) + ['] + lcComments
		
		Endcase
		
		Return ccIndentation + lcResult
		
		
	ENDPROC

	PROCEDURE appname_assign
		Lparameters tAPPName
		
		Local lcExec, lnI
		
		With This
			.APPName	 = tAPPName
			If Empty (This.FullAppName)
				.FullAppName = ''
				.FolderName	 = ''
		
				If Not Empty (tAPPName)
					For lnI = 1 To 100
						lcExec = Sys(16, lnI)
						Do Case
							Case Empty (lcExec)
								Exit
							Case Upper (.APPName) $ Upper (lcExec)
								.FullAppName = lcExec
								.FolderName	 = Justpath (lcExec)
								Exit
						Endcase
					Endfor && lnI = 1 to 100
				Endif && not Empty(This.APPName)
			Endif
		Endwith && this
		
		
	ENDPROC

	PROCEDURE clear		&& Blanks out all properties
		With This
			.AppName		  = ''
			.Author			  = ''
			.Category		  = ''
			.ClassDefinitions = ''
			.Classes		  = ''
			.Code			  = ''
			.Description	  = ''
			.FolderName		  = ''
			.FullAppName	  = ''
			.FullFileName	  = ''
			.InternalSort	  = ''
			.Link			  = ''
			.OnKeyLabelOnly	  = .F.
			.OptionClasses	  = ''
			.OptionTool		  = ''
			.PRGName		  = ''
			.Prompt			  = ''
			.Sort			  = 0
			.Source			  = ''
			.StatusBarText	  = ''
			.SubCategory	  = ''
			.Summary		  = ''
			.Version		  = ''
		Endwith
		
	ENDPROC

	PROCEDURE fullappname_assign
		Lparameters tFullAppName
		
		With This
			.FullAppName = tFullAppName
			If Empty (This.AppName)
				.AppName	= Justfname (tFullAppName)
				.FolderName	= Justpath (tFullAppName)
			Endif
		Endwith
		
	ENDPROC

	PROCEDURE getsampleselfregistercode
		Local lcCode
		
		Text To lcCode Noshow Textmerge
		Try
			loThorInfo = ExecScript(_screen.cThorDispatcher,'Thor Register=')
		Catch
			loThorInfo = .Null.
		EndTry
		
		If IsNull(loThorInfo)
			Return .F.
		EndIf 
		
		With loThorInfo
			* Required
			.Prompt		   = 'Prompt for the tool' && used when tool appears in a menu
			.Description   = 'Description for the tool' && may be lengthy, including CRs, etc
			.PRGName       = 'Thor_Tool_??????' && a unique name for the tool; note the required prefix
		
			.AppName       = 'The name of the executable' && no path, but include the extension; for example, GoFish4.App
			* Note that this creates This.FullAppName, which determines the full path of the APP
			* and also This.FolderName
			
			lcFolderName  = .FolderName
			lcFullAppName = .FullAppName
			
			<<'Text to .Code noshow textmerge'>>
		*	Put your executable code for the tool here.  It may be as long as needed, or just a single line.
		*	Within this code, you can refer to the installed APP (with its full path), by using '<<This.FullAppName>>'
		*	and the full path by using '<<This.FolderName>>'
		*	Notice the use of quotes, in case the folder name has spaces.
		*For example:
		    Do '|lcFullAppName|'
			<<'EndText'>>
			
			* Optional
			.StatusBarText = 'Status bar text for the menu item' 
			.Summary       = 'One-line summary for the tool' && if empty, first line of .Description is used
			.Classes       = "List of classes to be published for this APP" &&, separated by commas.  e.g.,  'thorinfo of thor_utils'
			
			* For public tools, such as PEM Editor, etc.
			.Source		   = 'Name of the tool' && e.g., 'PEM Editor'
			.Version	   = 'Version number' && e.g., 'Version 7, May 18, 2011'
			.Sort		   = 100 && the sort order for all items from the same .Source
			.Link          = 'http://www.mywebsite.com'
			
			.Register()
		
		EndWith
		Endtext
		
		lcCode = Strtran(lcCode, '|lcFullAppName|', '<<lcFullAppName>>')
		Return lcCode
	ENDPROC

	PROCEDURE getsampletoolcode
		Local lcCode
		
		text to lcCode noshow
		Lparameters lxParam1
		
		****************************************************************
		****************************************************************
		* Standard prefix for all tools for Thor, allowing this tool to
		*   tell Thor about itself.
		
		If Pcount() = 1						  ;
				And 'O' = Vartype (lxParam1)  ;
				And 'thorinfo' == Lower (lxParam1.Class)
		
			With lxParam1
			
				* Required
				.Prompt		   = 'Prompt for the tool' && used in menus
				
				* Optional
				@@@Text to .Description NoShow && a description for the tool
		Enter a description for the tool here		
				@@@EndText 
				.StatusBarText = ''  
				.CanRunAtStartUp = .T.
		
				* These are used to group and sort tools when they are displayed in menus or the Thor form
				.Source		   = '' && where did this tool come from?  Your own initials, for instance
				.Category      = '' && creates categorization of tools; defaults to .Source if empty
				.Sort		   = 0 && the sort order for all items from the same Category
				
				* For public tools, such as PEM Editor, etc.
				.Version	   = '' && e.g., 'Version 7, May 18, 2011'
				.Author        = ''
				.Link          = '' && link to a page for this tool
				.VideoLink     = '' && link to a video for this tool
				
			Endwith
		
			Return lxParam1
		Endif
		
		If Pcount() = 0
			Do ToolCode
		Else
			Do ToolCode With lxParam1
		Endif
		
		Return
		
		****************************************************************
		****************************************************************
		* Normal processing for this tool begins here.                  
		Procedure ToolCode
			Lparameters lxParam1
		
		EndProc 
		
		endtext
		
		
		Return Strtran(lcCode, '@@@', '')
		
		
	ENDPROC

	PROCEDURE register		&& Creates a PRG and registers it with Thor, using the values of the properties in this class.
		* Note use of '#@@@#' for multi-layers Text/EndText
		
		Lparameters tlRunThor
		
		Local lcCode, lcExec, lcExecutable, lcFolder, lcFullAPPName, lcOldCode, lcPRG, llReplace, lnI
		
		lcExecutable  = This.Code
		
		*** JRN 2011-04-27 : AppName assigned, but not found?
		If(Not Empty(This.APPName)) And Empty(This.FolderName)
			Return .F.
		Endif
		
		Text To lcCode Noshow Textmerge
		Lparameters lxParam1
		
		****************************************************************
		****************************************************************
		* Standard prefix for all tools for Thor, allowing this tool to
		*   tell Thor about itself.
		
		If Pcount() = 1						 		;
				And 'O' = Vartype (lxParam1)  		;
				And PemStatus(lxParam1, 'Class', 5) ;
				And 'thorinfo' = Lower (lxParam1.Class)
		
			With lxParam1
		
				* Required
		<<This.AddThorProperty('Prompt',			[used when tool appears in a menu])>>
		<<This.AddThorProperty('Description')>>
		<<This.AddThorProperty('PRGName',			[a unique name for the tool; note the required prefix])>>
		
				* Optional
		<<This.AddThorProperty('StatusBarText')>>
		<<This.AddThorProperty('Summary',			[if empty, first line of .Description is used])>>
		<<This.AddThorProperty('AppID',				[])>>
		<<This.AddThorProperty('AppName',			[no path, but include the extension; thus GoFish4.App])>>
		<<This.AddThorProperty('FullAppName',		[full path to APP])>> 
		<<This.AddThorProperty('FolderName',		[folder name for APP])>>
		<<This.AddThorProperty('Classes', 			[separated by commas.  e.g.,  'thorinfo of thor_utils'])>>
		<<This.AddThorProperty('OptionClasses')>> 
		<<This.AddThorProperty('OptionTool')>> 
		<<This.AddThorProperty('PlugInClasses')>> 
		<<This.AddThorProperty('CanRunAtStartup',,.T.)>> 
		
				* For public tools, such as PEM Editor, etc.
		<<This.AddThorProperty('Category')>>
		<<This.AddThorProperty('SubCategory',		[Deprecated; use .Category instead with '|' as delimiter])>>
		<<This.AddThorProperty('Source',			[Deprecated; use .Category instead])>>
		<<This.AddThorProperty('Version',			[e.g., 'Version 7, May 18, 2011'])>>
		<<This.AddThorProperty('Author')>> 
		<<This.AddThorProperty('Sort',				[the sort order for all items from the same .Source])>>
		<<This.AddThorProperty('Link')>>
		<<This.AddThorProperty('BlogName')>>
		<<This.AddThorProperty('BlogLink')>>
		<<This.AddThorProperty('ForumName')>>
		<<This.AddThorProperty('ForumLink')>>
		<<This.AddThorProperty('PlugInClasses')>>
		<<This.AddThorProperty('PlugIns')>>
			Endwith
		
			Return lxParam1
		Endif
		
		If Pcount() = 0
			Do ToolCode
		Else
			Do ToolCode With lxParam1
		Endif
		
		Return
		
		****************************************************************
		****************************************************************
		* Normal processing for this tool begins here.                  
		Procedure ToolCode
		    Lparameters lxParam1
		<<Strtran(lcExecutable, Chr(13), Chr(13) + Space(4))>>
		EndProc 
		
		Endtext
		
		If Not Empty(This.DefineStatements)
			lcCode = This.DefineStatements + Chr(13) + Chr(10) + Chr(13) + Chr(10) + lcCode 
		EndIf
		
		If Not Empty(This.ClassDefinitions)
			lcCode = lcCode + Chr(13) + Chr(10) + Chr(13) + Chr(10) + This.ClassDefinitions
		EndIf
		
		lcFolder = Execscript(_Screen.cThorDispatcher, 'Tool Folder=')
		lcCode   = '* Registered with Thor: ' + Ttoc(datetime()) + Chr(13) + Chr(10) + lcCode
		
		lcCode = Strtran(lcCode, '#@@@#', '')
		lcCode = Strtran(lcCode, ccCR + '*&*&', '')
		lcCode = Strtran(lcCode, ccCRLF + '*&*&', '')
		
		*** JRN 2023-03-23 : Use _Screen.cThorFolder if possible
		Local lcThorFolder
		lcThorFolder = _Screen.cThorFolder
		lcCode = Strtran (m.lcCode, ['] + m.lcThorFolder, [_Screen.cThorFolder + '], 1, 99, 1)
		lcCode = Strtran (m.lcCode, ["] + m.lcThorFolder, [_Screen.cThorFolder + "], 1, 99, 1)
		lcCode = Strtran (m.lcCode, '[' + m.lcThorFolder, '_Screen.cThorFolder + [', 1, 99, 1)
		* ================================================================================ 
		
		lcPRG	 = Addbs(lcFolder) + Forceext(This.PRGName, '.PRG')
		llReplace = .T.
		
		If File(lcPRG)
			lcOldCode = Filetostr(lcPRG)
			If lcCode = '*'											;
					And lcOldCode = '*'								;
					And Substr(lcCode, At(Chr[13], lcCode)) ==		;
					Substr(lcOldCode, At(Chr[13], lcOldCode))
				llReplace = .F.
			Endif
		Endif
		
		If llReplace
			Strtofile(lcCode, lcPRG, 0)
		Endif
		
		If tlRunThor
			Execscript(_Screen.cThorDispatcher, 'Run')
		Endif
		
		Return
		
	ENDPROC

ENDDEFINE
