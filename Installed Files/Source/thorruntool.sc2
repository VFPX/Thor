*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thorruntool.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "thor_ui.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*<PropValue>
		DataSource = .NULL.
		Height = 0
		Left = 0
		Name = "Dataenvironment"
		Top = 0
		Width = 0
	*</PropValue>

ENDDEFINE

DEFINE CLASS frmthor AS baseform OF "basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdRunThor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRefresh" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFolder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Toolkeys1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oImageList" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addpemeditortools
		*m: edittool		&& Edits the specified tool
		*m: gethotkeydescription
		*m: help
		*m: loadtree		&& Loads the TreeView
		*m: notthorinternalmenu
		*m: refreshtools		&& Refreshes the tools
		*m: runthor		&& Runs Thor to update the hotkeys and menus
		*m: setfontsize
		*p: cthorfolder
		*p: lrefreshselecttooltreeview
		*p: lrefreshtools		&& Flags that we're refreshing tools
		*p: nfontsize
		*p: noptionssplitterleft
		*p: oselecttool
		*p: othor		&& A reference to a Thor_Engine object
		*p: otools		&& A reference to a collection of tools
	*</DefinedPropArrayMethod>

	*<PropValue>
		BindControls = .F.
		Caption = "Run Tool"
		cfoxuserid = ThorRunTool
		cfoxusername = ThorRunTool
		cthorfolder = 
		DataSession = 2
		DoCreate = .T.
		Height = 300
		Icon = thor16.ico
		lrefreshselecttooltreeview = .F.
		lrefreshtools = .F.
		MinButton = .F.
		MinHeight = 200
		MinWidth = 200
		Name = "frmThor"
		nfontsize = 9
		noptionssplitterleft = 0
		oselecttool = .NULL.
		othor = .NULL.
		otools = .NULL.
		Visible = .T.
		Width = 630
		_memberdata = <VFPData>
			<memberdata name="otools" display="oTools"/>
			<memberdata name="opentables" display="OpenTables"/>
			<memberdata name="ctablesfolder" display="cTablesFolder"/>
			<memberdata name="othor" display="oThor"/>
			<memberdata name="refreshtools" display="RefreshTools"/>
			<memberdata name="lrefreshtools" display="lRefreshTools"/>
			<memberdata name="cthorfolder" display="cThorFolder"/>
			<memberdata name="runthor" display="RunThor"/>
			<memberdata name="edittool" display="EditTool"/>
			<memberdata name="setfontsize" display="SetFontSize"/>
			<memberdata name="lrefreshselecttooltreeview" display="lRefreshSelectToolTreeView"/>
			<memberdata name="help" display="Help"/>
			<memberdata name="oselecttool" display="oSelectTool"/>
			<memberdata name="gethotkeydescription" display="GetHotKeyDescription"/>
			<memberdata name="addpemeditortools" display="AddPEMEditorTools"/>
			<memberdata name="loadtree" display="LoadTree"/>
			<memberdata name="nfontsize" display="nFontSize"/>
			<memberdata name="notthorinternalmenu" display="NotThorInternalMenu"/>
			<memberdata name="noptionssplitterleft" display="nOptionsSplitterLeft"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdRefresh' AS basecommandbutton WITH ;
		Alignment = 4, ;
		Anchor = 4, ;
		Caption = "", ;
		Left = 8, ;
		Name = "cmdRefresh", ;
		Picture = refresh2.bmp, ;
		TabIndex = 2, ;
		Top = 275, ;
		Width = 23
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRunThor' AS basecommandbutton WITH ;
		Alignment = 4, ;
		Anchor = 4, ;
		Caption = "", ;
		Left = 33, ;
		Name = "cmdRunThor", ;
		Picture = thor16.png, ;
		TabIndex = 3, ;
		Top = 275, ;
		Width = 23
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblFolder' AS baselabel WITH ;
		Alignment = 0, ;
		Anchor = 4, ;
		Caption = "Folder", ;
		Left = 69, ;
		Name = "lblFolder", ;
		Top = 278
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblVersion' AS baselabel WITH ;
		Alignment = 1, ;
		Anchor = 12, ;
		Caption = "Version", ;
		Left = 577, ;
		Name = "lblVersion", ;
		Top = 278
		*< END OBJECT: ClassLib="basecontrols.vcx" BaseClass="label" />

	ADD OBJECT 'oImageList' AS olecontrol WITH ;
		Height = 26, ;
		Left = 488, ;
		Name = "oImageList", ;
		Top = 92, ;
		Width = 36
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7////+/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////1IAbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAIKt9CR80BAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////v////7///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8jfyQskYXREbFqAMDwKDYoIUM0EggAAADtAwAA7QMAAIB+4eYAAAYAIAAAAAAAAADAwMAA//9MAAHvzasAAAUAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAUAD/////BQAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	ADD OBJECT 'Toolkeys1' AS toolkeys WITH ;
		BackColor = 255,255,255, ;
		BackStyle = 1, ;
		Height = 261, ;
		Left = 6, ;
		Name = "Toolkeys1", ;
		Top = 6, ;
		cmdCreateTool.Left = 331, ;
		cmdCreateTool.Name = "cmdCreateTool", ;
		cmdCreateTool.Top = 273, ;
		cmdCreateTool.Visible = .F., ;
		cmdOpenToolFolder.Left = 464, ;
		cmdOpenToolFolder.Name = "cmdOpenToolFolder", ;
		cmdOpenToolFolder.Top = 273, ;
		cmdOpenToolFolder.Visible = .F., ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT1.Name = "GRIPPERDOT1", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT1.SHAPEDARK.Name = "SHAPEDARK", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT1.SHAPELIGHT.Name = "SHAPELIGHT", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT1.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT2.Name = "GRIPPERDOT2", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT2.SHAPEDARK.Name = "SHAPEDARK", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT2.SHAPELIGHT.Name = "SHAPELIGHT", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT2.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT3.Name = "GRIPPERDOT3", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT3.SHAPEDARK.Name = "SHAPEDARK", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT3.SHAPELIGHT.Name = "SHAPELIGHT", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT3.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT4.Name = "GRIPPERDOT4", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT4.SHAPEDARK.Name = "SHAPEDARK", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT4.SHAPELIGHT.Name = "SHAPELIGHT", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT4.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT5.Name = "GRIPPERDOT5", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT5.SHAPEDARK.Name = "SHAPEDARK", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT5.SHAPELIGHT.Name = "SHAPELIGHT", ;
		THOR_SFSPLITTERH1.GRIPPER.GRIPPERDOT5.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		THOR_SFSPLITTERH1.GRIPPER.Name = "GRIPPER", ;
		THOR_SFSPLITTERH1.Name = "THOR_SFSPLITTERH1", ;
		cntToolInfo.chkStartup.Alignment = 0, ;
		cntToolInfo.chkStartup.Name = "chkStartup", ;
		cntToolInfo.cmdEditTool.Anchor = 4, ;
		cntToolInfo.cmdEditTool.Left = 143, ;
		cntToolInfo.cmdEditTool.Name = "cmdEditTool", ;
		cntToolInfo.cmdEditTool.Top = 206, ;
		cntToolInfo.cmdRemoveTool.Anchor = 4, ;
		cntToolInfo.cmdRemoveTool.Left = 239, ;
		cntToolInfo.cmdRemoveTool.Name = "cmdRemoveTool", ;
		cntToolInfo.cmdRemoveTool.Top = 206, ;
		cntToolInfo.Height = 260, ;
		cntToolInfo.Name = "cntToolInfo", ;
		cntToolInfo.oHotKeyControls.CMDCLEAR.Name = "CMDCLEAR", ;
		cntToolInfo.oHotKeyControls.cmdGetHotKey.Name = "cmdGetHotKey", ;
		cntToolInfo.oHotKeyControls.LBLHOTKEY.Name = "LBLHOTKEY", ;
		cntToolInfo.oHotKeyControls.Name = "oHotKeyControls", ;
		cntToolInfo.oHotKeyControls.txtHotKey.Name = "txtHotKey", ;
		cntToolInfo.oToolInfo.edtToolInfo.Height = 159, ;
		cntToolInfo.oToolInfo.edtToolInfo.Name = "edtToolInfo", ;
		cntToolInfo.oToolInfo.edtToolInfo.Width = 339, ;
		cntToolInfo.oToolInfo.Height = 177, ;
		cntToolInfo.oToolInfo.lblLink.Name = "lblLink", ;
		cntToolInfo.oToolInfo.lblLink.Top = 161, ;
		cntToolInfo.oToolInfo.lblVideo.Left = 211, ;
		cntToolInfo.oToolInfo.lblVideo.Name = "lblVideo", ;
		cntToolInfo.oToolInfo.lblVideo.Top = 161, ;
		cntToolInfo.oToolInfo.Name = "oToolInfo", ;
		cntToolInfo.oToolInfo.Width = 340, ;
		cntToolInfo.Top = 0, ;
		SELECTTOOLFORBROWSING1.Baselabel1.Name = "Baselabel1", ;
		SELECTTOOLFORBROWSING1.cmdApply.Name = "cmdApply", ;
		SELECTTOOLFORBROWSING1.cmdApply.Top = 0, ;
		SELECTTOOLFORBROWSING1.CMDCLEAR.Name = "CMDCLEAR", ;
		SELECTTOOLFORBROWSING1.CMDCLEAR.Top = 0, ;
		SELECTTOOLFORBROWSING1.Height = 261, ;
		SELECTTOOLFORBROWSING1.Name = "SELECTTOOLFORBROWSING1", ;
		SELECTTOOLFORBROWSING1.oTree.Height = 229, ;
		SELECTTOOLFORBROWSING1.oTree.Left = 1, ;
		SELECTTOOLFORBROWSING1.oTree.Name = "oTree", ;
		SELECTTOOLFORBROWSING1.oTree.Top = 30, ;
		SELECTTOOLFORBROWSING1.oTree.Width = 251, ;
		SELECTTOOLFORBROWSING1.txtcNewFilter.Height = 22, ;
		SELECTTOOLFORBROWSING1.txtcNewFilter.Left = 45, ;
		SELECTTOOLFORBROWSING1.txtcNewFilter.Name = "txtcNewFilter", ;
		SELECTTOOLFORBROWSING1.txtcNewFilter.Top = 1
		*< END OBJECT: ClassLib="thor_ui.vcx" BaseClass="container" />
	
	PROCEDURE addpemeditortools
		Lparameters toTree, lcParentKey, lnMenuID, raTools, lcFilter
		
		Local laMenuTools[1], lcHotKey, lcKey, lcKeystroke, lcMenuStatusBar, lcPRGName, lcPrompt
		Local lcStatusBar, llSeparator, lnHotKeyID, lnI, lnID, lnIndex, lnSubMenuID, loNode
		
		Select  MenuTools.Prompt					   ;
			  , Separator							   ;
			  , SubMenuID							   ;
			  , PRGName								   ;
			  , MenuTools.Id						   ;
			  , MenuDefinitions.HotKeyID			   ;
			From MenuTools							   ;
				Left Join MenuDefinitions			   ;
					On SubMenuID = MenuDefinitions.Id  ;
			Where MenuID = lnMenuID					   ;
			Order By MenuTools.sortorder			   ;
			Into Array laMenuTools
		
		For lnI = 1 To _Tally
			lcPrompt	= Alltrim (laMenuTools (lnI, 1))
			llSeparator	= laMenuTools (lnI, 2)
			lnSubMenuID	= laMenuTools (lnI, 3)
			lcPRGName	= Alltrim (laMenuTools (lnI, 4))
			lnID		= laMenuTools (lnI, 5)
			lnHotKeyID	= laMenuTools (lnI, 6)
		
			Do Case
				Case llSeparator
					*	loNode	   = toTree.Nodes.Add (lcParentKey, 4, lcParentKey + '\' + Str (lnID), Replicate('-', 30))
				Case lnSubMenuID # 0
					lcKey	 = lcParentKey + '\' + Chrtran (lcPrompt, '/\', '__')
					lcHotKey = Thisform.GetHotKeyDescription (lnHotKeyID)
					loNode	 = toTree.Nodes.Add (lcParentKey, 4, lcKey,	 ;
						  lcPrompt  + Iif (Empty (lcHotKey), '', ' (' + lcHotKey + ')'), ccIMAGE_MENU)
					This.AddPEMEditorTools (toTree, lcKey, lnSubMenuID, @raTools, lcFilter)
					loNode.Expanded = Not Empty (lcFilter)
				Otherwise
					If Empty (lcFilter) Or 0 # Ascan (raTools, lcPRGName, 6, -1, -1, 15)
						lcKey	= lcParentKey + '\' + Str (lnID)
						= Seek (Upper (lcPRGName), 'ToolHotKeyAssignments', 'PRGName')
						lcHotKey = Thisform.GetHotKeyDescription (ToolHotKeyAssignments.HotKeyID)
						loNode	= toTree.Nodes.Add (lcParentKey, 4, lcKey,	;
							  lcPrompt + Iif (Empty (lcHotKey), '', ' (' + lcHotKey + ')'), ccIMAGE_TOOL)
						lnIndex	= Thisform.oTools.GetKey (Upper (lcPRGName))
						If lnIndex > 0
							loNode.Tag = Thisform.oTools (lnIndex)
						Endif
					Endif
			Endcase
		Endfor
		
		If  toTree.Nodes (lcParentKey).Children = 0
			toTree.Nodes.Remove (lcParentKey)
		Endif
		
	ENDPROC

	PROCEDURE Destroy
		* Run Thor to update all hotkeys and menus.
		
		_Screen.oThorUI = .Null.
		This.oSelectTool = .Null.
		
		* Close all tables.
		
		close tables all
		dodefault()
		
	ENDPROC

	PROCEDURE edittool		&& Edits the specified tool
		*==============================================================================
		* Method:			EditTool
		* Purpose:			Edits the specified tool
		* Author:			Doug Hennig
		* Last revision:	04/23/2011
		* Parameters:		tcPRGName - the name of the PRG to edit
		* Returns:			none
		* Environment in:	This.oThor contains a reference to a ThorEngine object
		* Environment out:	if the PRG is found, it's opened in an editor window
		*==============================================================================
		
		Lparameters tcPRGName
		Local lcFile, loPEME_Tools
		lcFile = This.oThor.FindFile (tcPRGName)
		If Empty (lcFile)
			Messagebox (Strtran (ccCANT_FIND, '%1', tcPRGName), MB_OK + MB_ICONSTOP,  ;
				  ccTHOR_CAPTION)
		Else
			Execscript (_Screen.cThorDispatcher, 'Thor_Proc_EditProc', lcFile)
		Endif Empty (lcFile)
		
	ENDPROC

	PROCEDURE gethotkeydescription
		Lparameters tnHotKeyID
		
		If Seek (tnHotKeyID, 'HotKeyDefinitions', 'ID')
			Return Trim (HotKeyDefinitions.Descript)
		Else
			Return ''
		Endif
		
	ENDPROC

	PROCEDURE help
		Local loLink
		loLink = Newobject('_ShellExecute', Home() + 'FFC\_Environ.vcx')
		loLink.ShellExecute(ThorHelpURL)
		
	ENDPROC

	PROCEDURE Init
		Lparameters toTools,  ;
			tcThorFolder
		With This
		
			With This.oImageList
				.ListImages.Add(1, ccIMAGE_MENU,  LoadPicture('Menus.ico'))
				.ListImages.Add(2, ccIMAGE_TOOL,  LoadPicture('Programs.ico'))
				.ListImages.Add(3, ccIMAGE_POPUP, LoadPicture('Popup.ico'))
			Endwith
		
			* Create a Thor_Engine object and open its tables.
		
			.oThor = Newobject ('Thor_Engine', 'Thor.vcx', '', tcThorFolder + 'Thor\')
			.oThor.OpenTables()
		
			* Set the caption.
		
			.lblVersion.Caption	= ccTHORVERSION
			.lblFolder.Caption  = Lower(tcThorFolder)
		
			* Save the passed parameters.
		
			.oTools		 = toTools
			.cThorFolder = tcThorFolder
		
			*!* * Removed 6/10/2012 / JRN
			*!* * Don't allow the form to be sized smaller than the default.
		
			*!* .MinHeight = .Height
			*!* .MinWidth  = .Width
		
			* Activate the first page so the TreeView loads.
			.nFontSize = .oThor.GetOption ('FontSize')
			.SetFontSize(.nFontSize)
		
			.BindControls = .T.
		
		Endwith
		DoDefault()
		
	ENDPROC

	PROCEDURE loadtree		&& Loads the TreeView
		Lparameters toTree, tcFilter
		
		Local laPrev[1], laThis[1], laTools[1], lcCategory, lcFilter, lcHotKey, lcKey, lcPRGName
		Local lcParentKey, lcPrev, lcPreviousCategory, lcPrompt, lcSortKey, lcSource, lcSubCategory, lcThis
		Local lnI, lnJ, lnK, lnMax1, lnMax2, lnSort, lnStart, lnToolCount, loNode, loTool, loTools
		
		toTree.Nodes.Clear()
		loTools		= Thisform.oTools
		lnToolCount	= 0
		lcFilter	= Upper (tcFilter)
		
		Do While lnToolCount = 0
			For lnI = 1 To loTools.Count
				loTool		  = loTools.Item (lnI)
				lcSource	  = Evl (Trim (loTool.Source), '(No Source)')
				lcCategory	  = Evl (Trim (loTool.Category), lcSource)
				lcSubCategory = Trim (loTool.SubCategory)
				lnSort    = Evl(loTool.Sort, 9999)
				lcSortKey	  = loTool.InternalSort
				lcPRGName	  = loTool.PRGName
		
				If (Empty (lcFilter))  ;
						Or lcFilter $ Upper (lcSortKey + lcSource + loTool.Summary + loTool.Description)
					lnToolCount = lnToolCount + 1
					Dimension laTools (lnToolCount, 6)
					laTools (lnToolCount, 1) = lnI
					laTools (lnToolCount, 2) = lcSource
					laTools (lnToolCount, 3) = lcCategory
					laTools (lnToolCount, 4) = lcSubCategory
					laTools (lnToolCount, 5) = lcSortKey
					laTools (lnToolCount, 6) = lcPRGName
				Endif
			Endfor
			If lnToolCount = 0
				Messagebox ([No matches to '] + tcFilter + [' found.  Showing all tools.], 16)
				lcFilter = ''
			Endif
		Enddo && while lnToolCount = 0
		
		Asort (laTools, 5)
		lcPreviousCategory = ''
		
		For lnI = 1 To lnToolCount
		
			loTool	   = loTools.Item (laTools (lnI, 1))
			lcSource   = laTools (lnI, 2)
			lcCategory = laTools (lnI, 3)
		
			*!* * Removed 2/3/2012 
			*!* If lcSource == 'Thor'
			*!* 	Loop
			*!* Endif
		
			If Not lcCategory == lcPreviousCategory
				lnMax1 = Alines (laPrev, lcPreviousCategory, 5, '|')
				lnMax2 = Alines (laThis, lcCategory, 5, '|')
				If lnI = 1
					lnJ = 1
				Else
					lnStart	= 1 + Min (lnMax1, lnMax2)
					lcKey	= ''
					For lnJ = 1 To Min (lnMax1, lnMax2)
						lcPrev = laPrev[lnJ]
						lcThis = laThis[lnJ]
						If Not Upper (lcPrev) == Upper (lcThis)
							lnStart = lnJ
							Exit
						Endif
						lcKey = Upper(lcKey + Iif (lnJ > 1, '\', '') + lcThis)
					Endfor
				Endif
				For lnK = lnJ To lnMax2
					If lnK = 1
						lcKey			= Upper(laThis[1])
						loNode			= toTree.Nodes.Add (, 1, lcKey, laThis[1], ccIMAGE_MENU)
						loNode.Expanded	= Not Empty (lcFilter)
						loNode.Bold		= .T.
					Else
						lcParentKey		= Upper(lcKey)
						lcKey			= Upper(lcParentKey + '\' + Chrtran(laThis[lnK], '.,;\/', '-----'))
						loNode			= toTree.Nodes.Add (lcParentKey, 4, lcKey, laThis[lnK], ccIMAGE_MENU)
						loNode.Expanded	= Not Empty (lcFilter)
					Endif
				Endfor
			Endif
		
			lcPrompt  = loTool.Prompt
			lcPRGName = loTool.PRGName
			= Seek (Upper (lcPRGName), 'ToolHotKeyAssignments', 'PRGName')
			lcHotKey = Thisform.GetHotKeyDescription (ToolHotKeyAssignments.HotKeyID)
			loNode	   = toTree.Nodes.Add (lcKey, 4, lcKey + '\' + lcPRGName  ;
				  , lcPrompt + Iif (Empty (lcHotKey), '', ' (' + lcHotKey + ')'),  ccIMAGE_TOOL)
			loNode.Tag = loTool
		
			lcPreviousCategory = lcCategory
		
		Endfor && lnI = 1 To lnToolCount
		
		
		
	ENDPROC

	PROCEDURE notthorinternalmenu
		Do Case
			Case Trim (MenuDefinitions.PopupName) == 'Thor_Internal'
				Return .F.
			Case Trim (MenuDefinitions.PopupName) == ccRunAllTools
				Return .F.
			Otherwise
				Return .T.
		Endcase
	ENDPROC

	PROCEDURE refreshtools		&& Refreshes the tools
		*==============================================================================
		* Method:			RefreshTools
		* Purpose:			Refreshes the tools
		* Author:			Doug Hennig
		* Last revision:	03/31/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	This.oTools.Tag contains the tools folder
		* Environment out:	the tools collection has been recreated and controls on the
		*						form refreshed
		*==============================================================================
		
		with This
			.oTools = .oThor.GetToolsCollection(.oTools.Tag)
			.lRefreshTools = .T.
			.lRefreshSelectToolTreeView = .T.
			.Refresh()
			.lRefreshTools = .F.
			messagebox(ccTOOLS_REFRESHED, MB_OK, ccTHOR_CAPTION)
		endwith
		
	ENDPROC

	PROCEDURE runthor		&& Runs Thor to update the hotkeys and menus
		*==============================================================================
		* Method:			RunThor
		* Purpose:			Runs Thor to update the hotkeys and menus
		* Author:			Doug Hennig
		* Last revision:	04/09/2011
		* Parameters:		none
		* Returns:			none
		* Environment in:	This.cThorFolder contains the Thor folder
		* Environment out:	Thor_Run has been instantiated and its Run method called
		*==============================================================================
		
		local lcApp, ;
			lcFolder, ;
			loRunThor
		lcApp	  = This.cThorFolder + 'Thor.App'
		lcFolder  = This.cThorFolder + 'Thor\'
		loRunThor = newobject ('Thor_Run', 'thor_run.vcx', '', lcApp, lcFolder)
		loRunThor.Run(.T.) && but no startups
		
		* Display a message if we're supposed to.
		
		if This.oThor.GetOption('UpdateMessage')
			messagebox (ccRUN_THOR_DONE, MB_OK, ccTHOR_CAPTION, 3000)
		endif This.oThor.GetOption('UpdateMessage')
		
	ENDPROC

	PROCEDURE setfontsize
		Lparameters tnFontSize
		
		Local lnFontsize
		lnFontsize = Nvl (tnFontSize, 8)
		With This
			.FontSize = lnFontsize
			.SetAll ('FontSize', lnFontsize)
			Thisform.Toolkeys1.SELECTTOOLFORBROWSING1.oTree.Font.Size  = lnFontsize
		Endwith
		
	ENDPROC

	PROCEDURE cmdRefresh.Click
		Thisform.RefreshTools()
		
	ENDPROC

	PROCEDURE cmdRefresh.Init
		This.ToolTipText = ccTOOL_TOOLTIP
		DoDefault()
		
	ENDPROC

	PROCEDURE cmdRunThor.Click
		Local lnRecno
		lnRecno = Recno ('MenuDefinitions')
		
		Thisform.RunThor()
		
		Try
			Goto (lnRecno) In MenuDefinitions
		Catch
		
		Endtry
		
		
	ENDPROC

	PROCEDURE cmdRunThor.Init
		This.ToolTipText = ccTHOR_TOOLTIP
		DoDefault()
		
	ENDPROC

ENDDEFINE
