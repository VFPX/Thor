*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thor_proc_scopeprocessor.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS baseform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: editsourcefile
		*m: getallsettings
		*m: getcolumnfilters
		*m: getrelativepath
		*m: lockwindow
		*m: refreshresults
		*m: savedraginfo
		*m: selectresults
		*m: setcolumnfilter
		*m: setcolumnfilters
		*m: setsortorder
		*p: ccolumnfilter
		*p: ccolumnfilters
		*p: ccolumninfo
		*p: chomedir
		*p: cpanelfilter
		*p: csortorder
		*p: ladddescendants
		*p: lformaddobject
		*p: lsearchclass
		*p: ncolumnfiltercount
		*p: ndockable
		*p: osettings
		*p: otools
		*a: acolumnfilters[1,0]
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Caption = "Form"
		ccolumnfilter = 
		ccolumnfilters = 
		ccolumninfo = 
		chomedir = 
		cpanelfilter = 
		csortorder = |COLFILENAME|
		DoCreate = .T.
		ladddescendants = .F.
		Left = 0
		lformaddobject = .F.
		lsearchclass = .F.
		Name = "baseform"
		ncolumnfiltercount = 0
		ndockable = 1
		osettings = .NULL.
		otools = .NULL.
		Top = 0
		_memberdata = <VFPData>
			<memberdata name="lockwindow" display="LockWindow"/>
			<memberdata name="savedraginfo" display="SaveDragInfo"/>
			<memberdata name="chomedir" display="cHomeDir"/>
			<memberdata name="lsearchclass" display="lSearchClass"/>
			<memberdata name="getrelativepath" display="GetRelativePath"/>
			<memberdata name="setsortorder" display="SetSortOrder"/>
			<memberdata name="csortorder" display="cSortOrder"/>
			<memberdata name="refreshresults" display="RefreshResults"/>
			<memberdata name="selectresults" display="SelectResults"/>
			<memberdata name="ccolumnfilter" display="cColumnFilter"/>
			<memberdata name="getcolumnfilters" display="GetColumnFilters"/>
			<memberdata name="setcolumnfilter" display="SetColumnFilter"/>
			<memberdata name="setcolumnfilters" display="SetColumnFilters"/>
			<memberdata name="acolumnfilters" display="aColumnFilters"/>
			<memberdata name="ccolumnfilters" display="cColumnFilters"/>
			<memberdata name="ncolumnfiltercount" display="nColumnFilterCount"/>
			<memberdata name="getallsettings" display="GetAllSettings"/>
			<memberdata name="osettings" display="oSettings"/>
			<memberdata name="otools" display="oTools"/>
			<memberdata name="ccolumninfo" display="cColumnInfo"/>
			<memberdata name="ndockable" display="nDockable"/>
			<memberdata name="lformaddobject" display="lFormAddObject"/>
			<memberdata name="ladddescendants" display="lAddDescendants"/>
			<memberdata name="cpanelfilter" display="cPanelFilter"/>
			<memberdata name="editsourcefile" display="EditSourceFile"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE editsourcefile
		Lparameters lcFileName, lcClass, lcMethod, lnStartRange, lnEndRange
		
		Local lcVCXName, loFileContextMenu
		lcVCXName = This.ClassLibrary
		
		loFileContextMenu = Execscript(_Screen.cThorDispatcher, 'Thor_Proc_NewSessionObject', 'basecontextmenu', lcVCXName)
		loFileContextMenu.EditSourceX(lcFileName, lcClass, lcMethod, lnStartRange, lnEndRange)
		
	ENDPROC

	PROCEDURE getallsettings
	ENDPROC

	PROCEDURE getcolumnfilters
		#Define CRLF Chr[13]+ Chr[10]
		
		Local lcColumnFilters, lnI
		lcColumnFilters = ''
		For lnI = 1 To This.nColumnFilterCount
			lcColumnFilters = lcColumnFilters +				;
				This.Acolumnfilters[lnI, 1] + CRLF +		;
				This.Acolumnfilters[lnI, 2] + CRLF +		;
				This.Acolumnfilters[lnI, 3] + CRLF
		Endfor
		
		Return lcColumnFilters
		
	ENDPROC

	PROCEDURE getrelativepath
		Lparameters tcFileName, lcFolder
		
		Local lcFileName, lcRelative, lcRelativeName
		lcFileName = Trim(tcFileName)
		lcRelative = Sys(2014, lcFileName, lcFolder)
		
		Do Case
			Case lcRelative = '..\..\..\'
				Return lcFileName
		
			Case Occurs('\', lcRelative) >= Occurs('\', lcFileName)
				Return lcFileName
		
			Case lcRelative = '..\..\'
				Return '..\..\' + Substr(lcFileName, Len(lcFileName) - Len(lcRelative) + 7)
		
			Case lcRelative = '..\'
				Return '..\' + Substr(lcFileName, Len(lcFileName) - Len(lcRelative) + 4)
		
			Otherwise
				Return Substr(lcFileName, Len(lcFileName) - Len(lcRelative) + 1)
		
		Endcase
		
		
	ENDPROC

	PROCEDURE lockwindow
		* From Doug Hennig's Win32API session at SW Fox 2012
		
		Lparameters tlLock,			;
			tnHWnd
		Local lnHWnd
		Declare Integer LockWindowUpdate In Win32API		;
			Integer nHandle
		Do Case
			Case Not tlLock
				lnHWnd = 0
			Case Pcount() = 1
				Declare Integer GetDesktopWindow In Win32API
				lnHWnd = GetDesktopWindow()
			Otherwise
				lnHWnd = tnHWnd
		Endcase
		LockWindowUpdate(lnHWnd)
		Return
	ENDPROC

	PROCEDURE refreshresults
		*** JRN 2010-03-26 : get our results
		Local lcSafety
		
		If Used('crsr_Results')
		
			This.SelectResults('crsr_Temp')
		
			lcSafety = Set('Safety')
			Set Safety Off
		
			Select crsr_Results
			Delete Tag All
			Set Filter To
			Zap
			Append From(Dbf('crsr_Temp'))
			Set Safety &lcSafety
		
		Else
		
			This.SelectResults('crsr_Results')
			
		Endif
		
		Goto top 
		This.Refresh()
		
		
	ENDPROC

	PROCEDURE savedraginfo
		Local lcBaseClass, lcClass, lcFile, lcPath
		
		With This
			If .lSearchClass																;
					And Used ('crsr_Results')												;
					And Between (Recno ('crsr_Results'), 1, Reccount ('crsr_Results'))		;
					And Not Empty(crsr_Results.BaseClass)
		
				lcClass				  = Alltrim (crsr_Results.Class)
				lcBaseClass			  = Alltrim (crsr_Results.BaseClass)
				.oDragDrop.cClass	  = lcClass
				.oDragDrop.cBaseClass = lcBaseClass
				.oDragDrop.cFileName  = Alltrim (crsr_Results.FullName)
		
				Text to .cmdClassIcon.ToolTipText Noshow TextMerge
		Drag class '<<lcClass>>' to drop onto your form or class.
		
		You can also press the Shift or Ctrl key and drag a row directly from the grid.
		
		If PEM.Editor is open, you can drop this class onto the PEM Editor form and the class will be added as a child of the current object if possible, else as a sibling.
				EndText
				lcPath = Justpath(Justpath(.ClassLibrary)) + '\images\'
				lcFile = lcPath + Evl (lcBaseClass, '') + '.bmp'
				If File (lcFile)
					.imgClassIcon.Picture = lcFile
				Else
					* ?lcFile
				Endif
			Else
				.oDragDrop.cClass		  = ''
				.oDragDrop.cBaseClass	  = ''
				.oDragDrop.cFileName	  = ''
				.cmdClassIcon.ToolTipText = ''
			Endif
		
			.cmdClassIcon.Refresh()
		
		Endwith
		
		
		
	ENDPROC

	PROCEDURE selectresults
		Lparameters lcCursorName
		
		Local laSortFields[1], lcExtraFields, lcPanelFilter, lcSelection, lcSortField, lcSortFields
		Local nLines
		
		*** JRN 2010-03-26 : determine the fields to sort on
		lcSortFields  = ''
		lcExtraFields = ''
		nLines		  = Alines(laSortFields, Upper(This.cSortOrder), .T., '|')
		
		For Each lcSortField In laSortFields
			Do Case
				Case lcSortField == 'COLCLASS'
					lcSortFields  = lcSortFields + ', sortclass'
					lcExtraFields = lcExtraFields + ', Upper (class) as sortclass'
				Case lcSortField == 'COLFILENAME'
					lcSortFields  = lcSortFields + ', sortfname'
					lcExtraFields = lcExtraFields + ', Upper (FileName) as sortfname'
				Case lcSortField == 'COLFOLDER'
					lcSortFields  = lcSortFields + ', sortfolder'
					lcExtraFields = lcExtraFields + ', Upper (Folder) as sortfolder'
				Case lcSortField == 'COLPARENTCLASS'
					lcSortFields  = lcSortFields + ', sortparent'
					lcExtraFields = lcExtraFields + ', Upper (Parent) as sortparent'
				Case lcSortField == 'COLCLASSLOC'
					lcSortFields  = lcSortFields + ', sortparloc'
					lcExtraFields = lcExtraFields + ', Upper (ClassLoc) as sortparloc'
				Case lcSortField == 'COLBASECLASS'
					lcSortFields  = lcSortFields + ', sortbase'
					lcExtraFields = lcExtraFields + ', Upper (BaseClass) as sortbase'
				Case lcSortField == 'COLTIMESTAMP'
					lcSortFields = lcSortFields + ', timestamp desc'
				Case lcSortField == 'COLSIZE'
					lcSortFields = lcSortFields + ', size desc'
				Case lcSortField == 'COLEXT'
					lcSortFields  = lcSortFields + ', sortext'
					lcExtraFields = lcExtraFields + ', Upper (JustExt(FileName)) as sortext'
			Endcase
		Endfor
		
		lcSortFields = Substr(lcSortFields, 2)
		Do Case
			Case Vartype(Thisform.oPanelProperties) # 'O'
				lcPanelFilter = This.cPanelFilter 
			Case Thisform.oPanelProperties.lUsePanel
				lcPanelFilter = Thisform.oPanelProperties.cPanelFilter
			Otherwise
				lcPanelFilter = ''
		Endcase
		
		Do Case
			Case Empty(Thisform.cColumnFilter) And Empty(lcPanelFilter)
				lcSelection = ''
			Case Empty(Thisform.cColumnFilter)
				lcSelection = 'Where ' + lcPanelFilter
			Case Empty(lcPanelFilter)
				lcSelection = 'Where ' + Thisform.cColumnFilter
			Otherwise
				lcSelection = 'Where ' + lcPanelFilter + ' and '  + Thisform.cColumnFilter
		Endcase
		
		Select  *							;
				&lcExtraFields				;
			From crsr_SearchResults			;
				&lcSelection				;
			Order By &lcSortFields			;
			Into Cursor(lcCursorName) Readwrite
		
	ENDPROC

	PROCEDURE setcolumnfilter
		Lparameters lcPrompt, lcField
		
		Private paSelectFilter, pcFilter, pnOption
		Local lcBodyMarkup, lcColumnFilter, lcFilter, lcMoreMarkup, lnColumnFilterCount, lnI, loForm
		
		loForm		  = Execscript(_Screen.cThorDispatcher, 'Class= DynamicFormDeskTop')
		
		With loForm
			.Caption	 = 'Set Filter'
			.MinButton	 = .F.
			.MaxButton	 = .F.
			.MinHeight	 = 100
			.BorderStyle = 2
		
			.cHeading			= 'Filter on ' + lcPrompt
			.cSaveButtonCaption	= 'Apply'
		Endwith
		
		pcFilter = ''
		
		Text To lcBodyMarkup Noshow Textmerge
			pcFilter 	.class 				= 'TextBox'
						.caption			= 'Filter:'
						.Width				= 200
		Endtext
		
		lnColumnFilterCount = Thisform.nColumnFilterCount
		
		If lnColumnFilterCount # 0
			Dimension paSelectFilter[lnColumnFilterCount]
			paSelectFilter = .T.
			For lnI = 1 To lnColumnFilterCount
				Text To lcMoreMarkup Noshow Textmerge
			| paSelectFilter[<<lnI>>]
						.caption	= '"<<Trim(Thisform.aColumnFilters[lnI, 3])>>" $ <<Thisform.aColumnFilters[lnI, 2]>>  '
						.width		= 200
				Endtext
				lcBodyMarkup = lcBodyMarkup + lcMoreMarkup
			Endfor
			Text To lcMoreMarkup Noshow Textmerge
			|
						.class 				= 'DF_ResultButton'
						.caption			= 'Remove filter'
			Endtext
			lcBodyMarkup = lcBodyMarkup + lcMoreMarkup
		Endif
		
		loForm.cBodyMarkup = lcBodyMarkup
		loForm.Show(1, Thisform)
		
		******************************************************
		
		lcFilter = '*' + Lower(Trim(pcFilter)) + '*'
		lcFilter = 'Like("' + lcFilter + '", Lower(' + lcField  + '))'
		
		Do Case
			Case Vartype(loForm) # 'O'
				Return && Cancel
			Case Lower(loForm.cReturn) = 'cancel'
				Return && Cancel
			Case Lower(loForm.cReturn) = 'remove filter'
				lnColumnFilterCount = 0
			Otherwise
				For lnI = lnColumnFilterCount To 1 Step - 1
					If Not paSelectFilter[lnI]
						Adel(Thisform.aColumnFilters, lnI)
						lnColumnFilterCount = lnColumnFilterCount - 1
					Endif
				Endfor
				If Not Empty(pcFilter)
					lnColumnFilterCount = lnColumnFilterCount + 1
					Dimension Thisform.aColumnFilters[lnColumnFilterCount, 3]
					Thisform.aColumnFilters[lnColumnFilterCount, 1]	= lcFilter
					Thisform.aColumnFilters[lnColumnFilterCount, 2]	= lcPrompt
					Thisform.aColumnFilters[lnColumnFilterCount, 3]	= pcFilter
				Endif
		Endcase
		
		lcColumnFilter = Iif(lnColumnFilterCount = 0, '', Thisform.aColumnFilters[1, 1])
		For lnI = 2 To lnColumnFilterCount
			lcColumnFilter = lcColumnFilter + ' and ' + Thisform.aColumnFilters[lnI, 1]
		Endfor
		
		Thisform.nColumnFilterCount	= lnColumnFilterCount
		Thisform.cColumnFilter		= lcColumnFilter
		Thisform.RefreshResults()
		
	ENDPROC

	PROCEDURE setcolumnfilters
		Lparameters lcColumnFilters
		
		Local lcColumnFilters, lnCount, lnI
		If Empty(lcColumnFilters)
			Return
		Endif
		
		lnCount = Alines(Thisform.aColumnFilters, lcColumnFilters, 5)
		Dimension This.aColumnFilters[lnCount / 3, 3]
		
	ENDPROC

	PROCEDURE setsortorder
		Lparameters lcColumnName
		
		Local lnPos
		lcColumnName = Upper(lcColumnName)
		With This
			.cSortOrder	= Strtran(.cSortOrder, '|' + lcColumnName + '|', '|')
			.cSortOrder	= '|' + lcColumnName + .cSortOrder
			lnPos = At('|', .cSortOrder, 4)
			If lnPos > 0
				.cSortOrder = Left(.cSortOrder, lnPos)
			Endif
		
			.cmdClassSearch.SetFocus()
			Doevents
			
			.RefreshResults()
			.grdResults.SetFocus()
			
		Endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cbofinder AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: refreshitems
		*p: _memberdata
	*</DefinedPropArrayMethod>

	*<PropValue>
		Height = 24
		Name = "cbofinder"
		Width = 100
		_memberdata = <VFPData>
			<memberdata name="refreshitems" display="RefreshItems"/>
		</VFPData>
	*</PropValue>

ENDDEFINE

DEFINE CLASS chkfinder AS checkbox 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: ccontrolsource
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Alignment = 0
		Caption = "Check1"
		ccontrolsource = 
		Height = 17
		Name = "chkfinder"
		Value = .F.
		Width = 60
		_memberdata = <VFPData>
			<memberdata name="ccontrolsource" display="cControlSource"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE InteractiveChange
		Local lcControlSource
		
		lcControlSource = This.cControlSource
		If Not Empty(lcControlSource)
			&lcControlSource = This.Value 
		Endif
		
	ENDPROC

	PROCEDURE Refresh
		Local lcControlSource
		
		lcControlSource = This.cControlSource
		If Not Empty(lcControlSource)
			This.Value =  &lcControlSource
		Endif
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdfinder AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		Caption = "Command1"
		Height = 27
		Name = "cmdfinder"
		Width = 84
	*</PropValue>

ENDDEFINE

DEFINE CLASS custdragdrop AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addinmethod
		*m: dragdrop		&& Occurs when a drag-and-drop operation is completed.
		*m: dragover		&& Occurs when a control is being dragged over a target object.
		*m: formaddobject
		*m: mousedown		&& Occurs when the user presses the mouse button.
		*m: removetext1fromcolumn
		*p: cbaseclass
		*p: cclass
		*p: cfilename
		*p: lbrowser
		*p: ldragdrop
		*p: lerror
		*p: lformaddobject
		*p: lignoreerrors
		*p: natpos
		*p: nmousebutton
		*p: nshift
		*p: osource
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		cbaseclass = 
		cclass = 
		cfilename = 
		lbrowser = .T.
		ldragdrop = .F.
		lerror = .F.
		lformaddobject = .F.
		lignoreerrors = .F.
		Name = "custdragdrop"
		natpos = 0
		nmousebutton = 0
		nshift = 0
		osource = .NULL.
		_memberdata = <VFPData>
			<memberdata name="dragdrop" display="DragDrop"/>
			<memberdata name="dragover" display="DragOver"/>
			<memberdata name="formaddobject" display="FormAddObject"/>
			<memberdata name="savedraginfo" display="SaveDragInfo"/>
			<memberdata name="cbaseclass" display="cBaseClass"/>
			<memberdata name="cclass" display="cClass"/>
			<memberdata name="cfilename" display="cFileName"/>
			<memberdata name="lbrowser" display="lBrowser"/>
			<memberdata name="ldragdrop" display="lDragDrop"/>
			<memberdata name="lerror" display="lError"/>
			<memberdata name="lformaddobject" display="lFormAddObject"/>
			<memberdata name="lignoreerrors" display="lIgnoreErrors"/>
			<memberdata name="natpos" display="nAtPos"/>
			<memberdata name="nmousebutton" display="nMouseButton"/>
			<memberdata name="nshift" display="nShift"/>
			<memberdata name="osource" display="oSource"/>
			<memberdata name="mousedown" display="MouseDown"/>
			<memberdata name="removetext1fromcolumn" display="RemoveText1FromColumn"/>
			<memberdata name="addinmethod" display="AddInMethod"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE addinmethod
		Lparameters tcMethodName
		
		Return .f.
		
	ENDPROC

	PROCEDURE dragdrop		&& Occurs when a drag-and-drop operation is completed.
		LPARAMETERS oSource, nXCoord, nYCoord, loThis
		LOCAL lnResult,lnLastShift
		
		IF NOT this.lBrowser
			IF ISNULL(this.oItem.oAction)
				RETURN
			ENDIF
			this.oItem.oAction.DragDrop(oSource,nXCoord,nYCoord)
			RETURN
		ENDIF
		*** JRN 2010-04-18 : do nothing!
		IF .T. && TYPE("oSource")#"O" OR this.lReadOnly OR oSource.parent.Name==this.Name OR ;
				NOT LEFT(oSource.parent.Name,12)=="classbrowser" OR ;
				oSource.parent.cFileName==this.cFileName OR ;
				NOT RIGHT(oSource.parent.cFileName,4)==".vcx"
			this.oSource=.NULL.
			RETURN .F.
		ENDIF
		oSource.DragIcon=""
		this.oSource=oSource
		IF this.AddInMethod(PROGRAM())
			this.oSource=.NULL.
			RETURN
		ENDIF
		this.AddClass
		this.oSource=.NULL.
		SET MESSAGE TO
		
		
	ENDPROC

	PROCEDURE dragover		&& Occurs when a control is being dragged over a target object.
		LPARAMETERS oSource, nXCoord, nYCoord, nState, loThis
		LOCAL lcDragIcon
		
		IF TYPE("nState")#"N" OR nState=2 OR TYPE("oSource.parent")#"O" OR ;
				NOT LEFT(oSource.parent.Name,12)=="classbrowser"
			RETURN .F.
		ENDIF
		DO CASE
			CASE nState=1
				oSource.DragIcon=oSource.parent.cDragIcon
				SET MESSAGE TO
			CASE this.lBrowser AND (this.lReadOnly OR oSource.parent.Name==this.Name OR ;
					oSource.parent.cFileName==this.cFileName OR ;
					NOT RIGHT(oSource.parent.cFileName,4)==".vcx")
				oSource.DragIcon="c:\dev\browser\nodrop.cur"
			CASE NOT oSource.parent.lBrowser
				lcDragIcon="c:\dev\browser\dragmove.cur"
			OTHERWISE
				lcDragIcon=IIF(oSource.parent.nShift=2,"dragcopy.cur","dragmove.cur")
				oSource.DragIcon="c:\dev\browser\"+lcDragIcon
				SET MESSAGE TO IIF(oSource.parent.nShift=2,M_DROP_TO_COPY_LOC,M_DROP_TO_MOVE_LOC)+ ;
						[ (]+oSource.parent.cClass+[) ]+M_FROM_LOC+[ "]+oSource.parent.cFileName+ ;
						[" ]+M_TO_LOC+[ "]+this.cFileName+["]
		ENDCASE
		oSource.Refresh
		
		
	ENDPROC

	PROCEDURE formaddobject
		*** JRN 2010-04-19 : from Class Browser, with only minor modifications, as noted
		* all comments are mine, including code that has been commented out
		Lparameters toObject, tnXCoord, tnYCoord, tlActivateForm, tlDesignMode, tlNoShow, tlNoErrors, tlBuilder, toForm
		Local laMembers, laMembersObj, laMouseObj[1], lcBaseClass, lcBaseClass2, lcClass, lcCode, lcFileName
		Local lcFontName, lcKeyBoard, lcMWindow, lcObjName, lcParentObjName, lcParentObjProperty
		Local lcTargetBaseClass, llAddToCommand, llAddToNew, llAddToScreen, llAutoAddForm, llBuilder
		Local llIgnoreErrors, llPixelMode, lnCol, lnColOffset, lnCount, lnCount2, lnFontSize, lnFormCount
		Local lnLastSelect, lnMCol, lnMRow, lnMemberCount, lnRow, lnRowOffset, lnScaleMode
		Local oNewObject, oTemp, tnRow
		
		this.lFormAddObject=.T.
		*!*	IF this.lBrowser
		*!*		IF NOT this.lVCXSCXMode OR this.lFileMode OR this.lSCXMode
		*!*			RETURN .F.
		*!*		ENDIF
			lcClass		= This.cClass
			lcBaseClass	= This.cBaseClass
			lcFileName	= This.cFileName
			*!*	ELSE
		*!*		IF ISNULL(this.oItem) OR NOT PEMSTATUS(this.oItem,"cBaseClass",5)
		*!*			RETURN .F.
		*!*		ENDIF
		*!*		lcClass=LOWER(this.oItem.cClass)
		*!*		lcBaseClass=LOWER(this.oItem.cBaseClass)
		*!*		lcFileName=LOWER(this.oItem.cFileName)
		*!*	ENDIF
		IF this.nAtPos=-.1
			this.nAtPos=-.2
		ENDIF
		llAddToScreen=.F.
		llAddToCommand=.F.
		llAddToNew=.F.
		IF VARTYPE(toObject)#"O"
			DO CASE
				CASE VARTYPE(toObject)#"C"
					RETURN .F.
				CASE LOWER(ALLTRIM(toObject))=="_screen"
					llAddToScreen=.T.
				CASE LOWER(ALLTRIM(toObject))=="command"
					llAddToCommand=.T.
				CASE LOWER(ALLTRIM(toObject))=="new"
					llAddToNew=.T.
				OTHERWISE
					RETURN .F.
			ENDCASE
			toObject=_screen
		ELSE
			IF toObject=_screen
				llAddToScreen=.T.
			ELSE
				DO WHILE .T.
					IF PEMSTATUS(toObject,"AddObject",5) OR VARTYPE(toObject.Parent)#"O" OR ;
							VARTYPE(toObject.Parent.BaseClass)#"C"
						EXIT
					ENDIF
					toObject=toObject.Parent
				ENDDO
			ENDIF
		ENDIF
		lcTargetBaseClass=LOWER(toObject.BaseClass)
		llAutoAddForm=(lcTargetBaseClass=="form" AND VARTYPE(tnXCoord)#"N")
		IF lcTargetBaseClass=="form" AND VARTYPE(toForm)#"O"
			toForm=toObject
		ENDIF
		IF lcTargetBaseClass=="pageframe" AND NOT lcTargetBaseClass=="page"
			FOR lnCount = 1 TO toObject.PageCount
				IF lnCount=toObject.ActivePage
					toObject=toObject.Pages[lnCount]
					lcTargetBaseClass=LOWER(toObject.BaseClass)
					EXIT
				ENDIF
			ENDFOR
		ENDIF
		llPixelMode=(VARTYPE(toForm)=="O" AND TYPE("toForm.ScaleMode")=="N" AND ;
				toForm.ScaleMode=3)
		lnScaleMode=3
		IF VARTYPE(tnXCoord)=="N" AND TYPE("toForm.ScaleMode")=="N" AND NOT llPixelMode
			lnScaleMode=toForm.ScaleMode
			IF NOT PEMSTATUS(toForm,"ScaleMode",0)
				lnScaleMode=-1
			ENDIF
			toForm.ScaleMode=3
			llPixelMode=.T.
			llAutoAddForm=.F.
		ENDIF
		IF llPixelMode
			IF TYPE("toForm.FontName")=="C"
				lcFontName=toForm.FontName
				lnFontSize=toForm.FontSize
			ELSE
				oTemp=CREATEOBJECT("Textbox")
				lcFontName=oTemp.FontName
				lnFontSize=oTemp.FontSize
				oTemp=.NULL.
			ENDIF
		ENDIF
		lcMWindow=" "
		lnRow=0
		lnCol=0
		lnRowOffset=0
		lnColOffset=0
		DO CASE
			CASE llAddToScreen OR llAddToCommand OR llAddToNew
				lcMWindow=""
			CASE llAutoAddForm AND tlDesignMode
				lcMWindow=LOWER(toObject.Caption)
			CASE PARAMETERS()<3 AND NOT llAutoAddForm AND NOT tlDesignMode
				lnCount=-1
				DO WHILE .T.
					lnCount=lnCount+1
					lcParentObjName="toObject"+REPLICATE(".parent",lnCount)
					IF TYPE(lcParentObjName)#"O"
						EXIT
					ENDIF
					lcBaseClass2=LOWER(EVALUATE(lcParentObjName+".BaseClass"))
					IF lcBaseClass2=="form"
						lcMWindow=EVALUATE(lcParentObjName+".Name")
						lcParentObjProperty=lcParentObjName+".ScaleMode"
						llPixelMode=(TYPE(lcParentObjProperty)#"N" OR ;
								EVALUATE(lcParentObjProperty)=3)
						EXIT
					ENDIF
					lcParentObjProperty=lcParentObjName+".Top"
					IF TYPE(lcParentObjProperty)#"N"
						LOOP
					ENDIF
					lnRowOffset=lnRowOffset-EVALUATE(lcParentObjProperty)
					lcParentObjProperty=lcParentObjName+".Left"
					lnColOffset=lnColOffset-EVALUATE(lcParentObjProperty)
					lcParentObjProperty=lcParentObjName+".BaseClass"
					IF LOWER(EVALUATE(lcParentObjProperty))=="pageframe"
						lnRowOffset=-OBJTOCLIENT(toObject,1)
						lnColOffset=-OBJTOCLIENT(toObject,2)
					ENDIF
				ENDDO
			CASE llAutoAddForm
				lcMWindow=LOWER(toObject.Name)
		ENDCASE
		IF VARTYPE(tnYCoord)=="N"
			lnRow=tnYCoord
		ELSE
			IF NOT lcMWindow==" " AND llAutoAddForm AND WEXIST(lcMWindow)
				lnRow=MROW(lcMWindow)
				IF lnRow<0
					RETURN .F.
				ENDIF
				IF llPixelMode
					lnRow=lnRow*FONTMETRIC(1,lcFontName,lnFontSize)
				ENDIF
				lnRow=lnRow+lnRowOffset
			ENDIF
		ENDIF
		IF VARTYPE(tnXCoord)=="N"
			lnCol=tnXCoord
		ELSE
			IF NOT lcMWindow==" " AND llAutoAddForm AND WEXIST(lcMWindow)
				lnCol=MCOL(lcMWindow)
				IF lnCol<0
					RETURN .F.
				ENDIF
				IF llPixelMode
					lnCol=lnCol*FONTMETRIC(6,lcFontName,lnFontSize)
				ENDIF
				lnCol=lnCol+lnColOffset
			ENDIF
		ENDIF
		DIMENSION laMembers[1]
		laMembers=""
		lnMemberCount=AMEMBERS(laMembers,toObject,2)
		FOR lnCount2 = 1 TO lnMemberCount
			laMembers[lnCount2]=LOWER(laMembers[lnCount2])+" "
		ENDFOR
		lnCount=0
		DO WHILE .T.
			lnCount=lnCount+1
			lcObjName=lcClass+ALLTRIM(STR(lnCount))
			IF ASCAN(laMembers,LOWER(lcObjName)+" ")=0
				EXIT
			ENDIF
		ENDDO
		DIMENSION laMembers[1]
		laMembersObj=""
		lnMemberCount=AMEMBERS(laMembers,toObject,1)
		FOR lnCount2 = 1 TO (2*lnMemberCount)
			laMembers[lnCount2]=LOWER(laMembers[lnCount2])+" "
		ENDFOR
		DO WHILE .T.
			IF ASCAN(laMembers,LOWER(lcObjName)+" ")=0
				EXIT
			ENDIF
			lnCount=lnCount+1
			lcObjName=lcClass+ALLTRIM(STR(lnCount))
		ENDDO
		llIgnoreErrors=this.lIgnoreErrors
		this.lIgnoreErrors=tlNoErrors
		lcObjName=PROPER(lcObjName)
		lnFormCount=IIF(lcTargetBaseClass=="formset",toObject.FormCount,0)
		IF llAddToCommand OR llAddToNew OR (llAddToScreen AND ;
				(lcBaseClass=="formset" OR lcBaseClass=="form" OR ;
				lcBaseClass=="toolbar" OR lcBaseClass=="custom"))
			lcObjName="o"+PROPER(lcObjName)
			DO WHILE .T.
				IF TYPE(lcObjName)=="U"
					EXIT
				ENDIF
				lnCount=lnCount+1
				lcObjName="o"+PROPER(lcClass+ALLTRIM(STR(lnCount)))
			ENDDO
			IF llAddToCommand
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				lcKeyboard=[{Ctrl+F2}{Ctrl+END}]+lcObjName+ ;
						[=NEWOBJECT("]+lcClass+[","]+lcFileName+["){ENTER}]
				KEYBOARD (lcKeyboard) PLAIN
				this.lIgnoreErrors=llIgnoreErrors
				RETURN
			ENDIF
			oNewObject=NEWOBJECT(lcClass,lcFileName)
			IF VARTYPE(oNewObject)#"O" OR ISNULL(oNewObject)
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				oNewObject=.NULL.
				this.lError=.F.
				this.lIgnoreErrors=llIgnoreErrors
				RETURN .F.
			ENDIF
			IF llAddToNew
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				this.lError=.F.
				this.lIgnoreErrors=llIgnoreErrors
				RETURN oNewObject
			ENDIF
			PUBLIC (lcObjName)
			lcCode=lcObjname+[=oNewObject]
			&lcCode
			IF NOT lcBaseClass=="formset" AND TYPE("oNewObject.ScaleMode")=="N"
				IF oNewObject.ScaleMode=0
					oTemp=IIF(lcBaseClass=="form",oNewObject,_screen)
					lnRow=lnRow/FONTMETRIC(1,oTemp.FontName,oTemp.FontSize)
					lnCol=lnCol/FONTMETRIC(6,oTemp.FontName,oTemp.FontSize)
					oTemp=.NULL.
				ENDIF
				oNewObject.Top=lnRow
				oNewObject.Left=lnCol
			ENDIF
			lnLastSelect=SELECT()
		*!*	IF this.lBrowser
		*!*		this.RefreshRecNo
		*!*		SELECT (this.cAlias)
		*!*		IF NOT llAddToNew AND NOT tlNoShow AND ;
		*!*				ATC(CR_LF+"Visible = .F.",CR_LF+Properties)=0 AND ;
		*!*				PEMSTATUS(oNewObject,"Show",5) AND ;
		*!*				PEMSTATUS(oNewObject,"Show",3)=="Method"
		*!*			oNewObject.Show
		*!*		ENDIF
		*!*	ELSE
				IF PEMSTATUS(oNewObject,"Show",5) AND ;
						PEMSTATUS(oNewObject,"Show",3)=="Method"
					oNewObject.Show
				ENDIF
		*!*	ENDIF
			SELECT (lnLastSelect)
			this.oSource=oNewObject
			this.lError=.F.
			this.lIgnoreErrors=llIgnoreErrors
			IF this.AddInMethod(PROGRAM())
				this.oSource=.NULL.
				this.AutoRefresh
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				RETURN
			ENDIF
			this.oSource=.NULL.
			this.AutoRefresh
			DO CASE
				CASE lnScaleMode=-1
					toForm.ResetToDefault("ScaleMode")
				CASE lnScaleMode=0
					toForm.ScaleMode=0
			ENDCASE
			RETURN
		ELSE
			toObject.NewObject(lcObjName,lcClass,lcFileName)
		ENDIF
		oNewObject=.NULL.
		IF TYPE("toObject."+lcObjName)#"O"
			DO CASE
				CASE lnScaleMode=-1
					toForm.ResetToDefault("ScaleMode")
				CASE lnScaleMode=0
					toForm.ScaleMode=0
			ENDCASE
			this.lError=.F.
			this.lIgnoreErrors=llIgnoreErrors
			RETURN .F.
		ENDIF
		oNewObject=toObject.&lcObjName
		oNewObject.Name=lcObjName
		
		*{123} MJP -- 05/16/2013 12:01:21 PM - Begin
		This.RemoveText1FromColumn(lcTargetBaseClass, toObject, lcObjName)
		*} MJP -- 05/16/2013 12:01:21 PM - End
		
		IF PEMSTATUS(oNewObject, "Top", 5) and not PEMSTATUS(oNewObject, "Top", 1)
			oNewObject.Top=lnRow
		ENDIF
		IF PEMSTATUS(oNewObject, "Left", 5) and not PEMSTATUS(oNewObject, "Left", 1)
			oNewObject.Left=lnCol
		ENDIF
		IF tlDesignMode
			toObject.Refresh
		ELSE
			IF NOT tlNoShow AND TYPE("oNewObject.Visible")=="L"
				*!*	lnLastSelect=SELECT()
				*!*	IF this.lBrowser
				*!*		this.RefreshRecNo
				*!*		SELECT (this.cAlias)
				*!*		IF ATC(CR_LF+"Visible = .F.",CR_LF+Properties)=0 AND ;
				*!*				GETPEM(oNewObject.Class,"Visible")
				*!*			oNewObject.Visible=.T.
				*!*		ENDIF
				*!*	ELSE
				*!*		oNewObject.Visible=.T.
				*!*	ENDIF
				*!*	SELECT (lnLastSelect)
			ENDIF
			IF llAddToScreen
				_screen.Refresh
			ENDIF
		ENDIF
		this.lIgnoreErrors=llIgnoreErrors
		this.lError=.F.
		this.oSource=oNewObject
		*!*	IF this.AddInMethod(PROGRAM())
		*!*		DO CASE
		*!*			CASE lnScaleMode=-1
		*!*				toForm.ResetToDefault("ScaleMode")
		*!*			CASE lnScaleMode=0
		*!*				toForm.ScaleMode=0
		*!*		ENDCASE
		*!*		this.oSource=.F.
		*!*		this.oSource=.NULL.
		*!*		RETURN
		*!*	ENDIF
		this.oSource=.NULL.
		llBuilder=(tlBuilder AND ;
				((TYPE("oNewObject.BuilderX")=="C" AND NOT EMPTY(oNewObject.BuilderX)) OR ;
					(TYPE("oNewObject.Builder")=="C" AND NOT EMPTY(oNewObject.Builder))) AND ;
					NOT EMPTY(_builder) AND FILE(_builder))
		IF NOT tlNoShow AND tlActivateForm
			*!* ******************** Removed 5/11/2013 *****************
			*!* IF this.lBrowser AND this.Visible
			*!* 	this.cmdClassIcon.SetFocus
			*!* ENDIF
			oTemp=toObject
			DO WHILE NOT LOWER(oTemp.BaseClass)=="form"
				IF TYPE("oTemp.parent")#"O"
					EXIT
				ENDIF
				oTemp=oTemp.parent
			ENDDO
			IF LOWER(oTemp.BaseClass)=="form"
				oTemp.Show
			ENDIF
			oTemp=.NULL.
		ENDIF
		IF NOT tlDesignMode
			DO CASE
				CASE lnScaleMode=-1
					toForm.ResetToDefault("ScaleMode")
				CASE lnScaleMode=0
					toForm.ScaleMode=0
			ENDCASE
			IF llBuilder
				DOEVENTS
				DO (_builder) WITH (oNewObject)
			ENDIF
			RETURN oNewObject
		ENDIF
		IF lcTargetBaseClass=="formset"
			DO CASE
				CASE lnScaleMode=-1
					toForm.ResetToDefault("ScaleMode")
				CASE lnScaleMode=0
					toForm.ScaleMode=0
			ENDCASE
			IF lnFormCount=1
				DOEVENTS
				CLEAR TYPEAHEAD
				KEYBOARD "{Alt+M}C" PLAIN
			ENDIF
			IF llBuilder
				DOEVENTS
				DO (_builder) WITH (oNewObject)
			ENDIF
			RETURN oNewObject
		ENDIF
		lcMWindow=toObject.Name
		IF NOT WEXIST(lcMWindow)
			IF TYPE("toObject.Caption")#"C"
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				IF llBuilder
					DOEVENTS
					DO (_builder) WITH (oNewObject)
				ENDIF
				RETURN oNewObject
			ENDIF
			lcMWindow=toObject.Caption
			IF NOT WEXIST(lcMWindow)
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				IF llBuilder
					DOEVENTS
					DO (_builder) WITH (oNewObject)
				ENDIF
				RETURN oNewObject
			ENDIF
		ENDIF
		CLEAR TYPEAHEAD
		*** JRN 2010-04-19 : new code to attempt to click on the newly added object
		*!*	lnMRow = Mrow('',3)
		*!*	lnMCol = MCol('',3)
		*!*	Mouse At lnMRow + 4, lnMCol + 2 Pixels
		*!*	IF AMOUSEOBJ(laMouseObj) >= 4 				;
		*!*			AND VARTYPE(laMouseObj[2])=="O" 	;
		*!*			and laMouseObj(2) = oNewObject
		*!*		Mouse Click Shift Control
		*!*	Else
		*!*		?laMouseObj(2).Name, lnMRow, lnMCol
		*!*	ENDIF
		*!*	Mouse At lnMRow, lnMCol Pixels
		
		IF NOT llBuilder AND NOT EMPTY(lcMWindow)
			DOEVENTS
			IF llPixelMode
				MOUSE CLICK ;
						AT lnRow+4,lnCol+2 PIXELS ;
						WINDOW (lcMWindow)
			ELSE
				MOUSE CLICK ;
						AT lnRow+.25,lnCol+.5 ;
						WINDOW (lcMWindow)
			ENDIF
			DOEVENTS
		ENDIF
		DO CASE
			CASE lnScaleMode=-1
				toForm.ResetToDefault("ScaleMode")
			CASE lnScaleMode=0
				toForm.ScaleMode=0
		ENDCASE
		IF llBuilder
			DOEVENTS
			DO (_builder) WITH (oNewObject)
		EndIf
		
		RETURN oNewObject
		
	ENDPROC

	PROCEDURE mousedown		&& Occurs when the user presses the mouse button.
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, loThis
		
		Local laMouseObj[1], laSelObj[1], lcBaseClass, lcMWindow, llDesignMode, llDesignModeCheck
		Local llRunModeCheck, lnMCol, lnMRow, lnSeconds, lnXCoord, lnYCoord, loObject
		Local oForm, oNewObject, oObject
		
		lnMRow					= Mrow()
		lnMCol					= Mcol()
		lnSeconds				= Seconds()
		This.lDragDrop		= .F.
		This.nMouseButton	= Iif(Type('nButton') == 'N', nButton, 0)
		This.nShift			= nShift
		This.lFormAddObject	= .F.
		
		*!* ******************** Removed 5/11/2013 *****************
		*!* IF This.lBrowser AND NOT This.lVCXSCXMode
		*!* 	RETURN
		*!* ENDIF
		IF nButton=2
			DO WHILE ABS(SECONDS()-lnSeconds)<_dblclick
				IF NOT MDOWN()
					RETURN
				ENDIF
				*!* ******************** Removed 6/3/2013 *****************
				*!* IF ABS(MROW(This.Name,3)-lnMRow)>=loThis.Height OR ;
				*!* 		ABS(MCOL(This.Name,3)-lnMCol)>=loThis.Height
				*!* 	EXIT
				*!* ENDIF
			ENDDO
		ENDIF
		llDesignModeCheck=.T.
		llRunModeCheck=.F.
		*** JRN 2010-04-18 : commented out
		*!*	lcStatusBarText=loThis.StatusBarText
		*!*	loThis.StatusBarText=""
		lcBaseClass=This.cBaseClass
		*!*	loThis.DragIcon="c:\dev\browser\control.cur"
		*!*	This.cDragIcon=loThis.DragIcon
		*!*	IF This.lBrowser AND (This.lSCXMode OR This.lFileMode)
		*!*		llDesignModeCheck=.F.
		*!*		loThis.DragIcon="c:\dev\browser\nodrop.cur"
		*!*	ENDIF
		*!*	llError=This.lError
		*!*	This.lError=.F.
		This.nAtPos=-.1
		
		*** JRN 2010-04-18 : Finally!! loThis.Drag below!
		IF nButton>=0
			IF nButton # 2 and NOT MDOWN()
				This.lDragDrop=.F.
				RETURN
			ENDIF
			loThis.Drag
		ENDIF
		****************************************************************
		****************************************************************
		oObject=.NULL.
		lnXCoord=0
		lnYCoord=0
		oForm=.NULL.
		lcMWindow=LOWER(ALLTRIM(MWINDOW()))
		
		If Amouseobj (laMouseObj) >= 4 And Vartype (laMouseObj[2]) == 'O'
			oObject = laMouseObj[2]
			lnXCoord   = laMouseObj[3]
			lnYCoord   = laMouseObj[4]
			laMouseObj = .Null.
			If Amouseobj (laMouseObj, 1) >= 4
				oForm = laMouseObj[2]
			Endif
		
			* Inserted 07/20/2011 / JRN
			If Type ('_oPEMEditor.oUtils.oPEMEditor.oObject') = 'O'
				Local loObject
				loObject = oObject
				Do While .T.
					Do Case
						Case loObject = _oPEMEditor.oUtils.oPEMEditor
							oObject  = _oPEMEditor.oUtils.oPEMEditor.oObject
							lnXCoord = 0
							lnYCoord = 0
							oForm    = _oPEMEditor.oUtils.oPEMEditor.oTopOfForm
							Exit
						Case Type ('loobject.Parent') = 'O'
							loObject = loObject.Parent
						Otherwise
							Exit
					Endcase
				Enddo While .T.
			Endif Type ('_oPEMEditor.oUtils.oPEMEditor.oObject') = 'O'
		
		Endif 
			
		*** JRN 2010-04-18 : following lines not needed
		*!*	loThis.StatusBarText=lcStatusBarText
		*!*	IF NOT This.lBrowser AND (ISNULL(This.oItem) OR ISNULL(This.oItem.oAction))
		*!*		RETURN
		*!*	ENDIF
		IF TYPE("oObject")#"O" OR ISNULL(oObject)
			oObject=.NULL.
		ENDIF
		IF ISNULL(oObject)
			*!*	lnCount=LEN(M_PROJECT_MANAGER_LOC+" - ")
			*!*	IF LOWER(LEFT(lcMWindow,lnCount))==LOWER(M_PROJECT_MANAGER_LOC+" - ")
			*!*		IF This.lBrowser
			*!*			lcFileName=This.cFileName
			*!*		ELSE
			*!*			lcFileName=This.oItem.cFileName
			*!*		ENDIF
			*!*		IF EMPTY(lcFileName) OR NOT FILE(lcFileName)
			*!*			RETURN
			*!*		ENDIF
			*!*		lcProjectFile=LOWER(FORCEEXT(ALLTRIM(SUBSTR(lcMWindow,lnCount+1)),"pjx"))
			*!*		FOR lnCount = 1 TO _vfp.Projects.Count
			*!*			IF LOWER(JUSTFNAME(_vfp.Projects[lnCount].Name))==lcProjectFile
			*!*				_vfp.Projects[lnCount].Files.Add(lcFileName)
			*!*				EXIT
			*!*			ENDIF
			*!*		ENDFOR
			*!*		RETURN
			*!*	ENDIF
			RETURN
		ELSE
			DO WHILE .T.
				IF PEMSTATUS(oObject,"AddObject",5) OR TYPE("oObject.Parent")#"O" OR ;
						TYPE("oObject.Parent.BaseClass")#"C"
					EXIT
				ENDIF
				oObject=oObject.Parent
			ENDDO
		ENDIF
		IF NOT ISNULL(oForm) AND oForm=thisform
			RETURN
		ENDIF
		*** JRN 2010-04-18 : not needed
		*!*	IF NOT This.lBrowser
		*!*		This.oItem.oAction.DragDrop2(oObject,lnXCoord,lnYCoord)
		*!*		RETURN
		*!*	ENDIF
		*!*	IF This.lDragDrop OR ISNULL(oObject)
		*!*		This.lDragDrop=.F.
		*!*		This.lFormAddObject=.F.
		*!*		IF NOT lcMWindow=="command"
		*!*			RETURN
		*!*		ENDIF
		*!*	ENDIF
		*!*	IF EMPTY(lcMWindow)
		*!*		IF MROW(This.Name)>0 AND MCOL(This.Name)>0
		*!*			lcMWindow=This.Name
		*!*		ELSE
		*!*			FOR lnCount = _screen.FormCount TO 1 STEP -1
		*!*				oForm=_screen.Forms[lnCount]
		*!*				IF NOT oForm.Name==This.Name AND ;
		*!*						oForm.Class==This.Class AND ;
		*!*						LOWER(LEFT(oForm.Name,12))=="classbrowser" AND ;
		*!*						TYPE("oForm.cBrowserTable")#"U" AND ;
		*!*						MROW(oForm.Name)>0 AND MCOL(oForm.Name)>0
		*!*					lcMWindow=oForm.Name
		*!*					EXIT
		*!*				ENDIF
		*!*			ENDFOR
		*!*		ENDIF
		*!*	ENDIF
		*!*	loThis.DragIcon=This.cDragIcon
		*!*	IF This.lError OR This.nAtPos=-.2 OR NOT llDesignModeCheck
		*!*		This.cDragIcon=""
		*!*		This.lFormAddObject=.F.
		*!*		This.nAtPos=0
		*!*		IF llError
		*!*			This.lError=llError
		*!*		ENDIF
		*!*		RETURN
		*!*	ENDIF
		*!*	This.lError=llError
		*!*	This.cDragIcon=""
		*!*	This.nAtPos=0
		*!*	IF lcMWindow==LOWER(This.Name)
		*!*		This.lFormAddObject=.F.
		*!*		RETURN
		*!*	ENDIF
		llDesignMode=.F.
		DO CASE
			CASE lcMWindow=="command"
				oObject="command"
			CASE EMPTY(lcMWindow) AND oObject=_screen
				oObject="_screen"
			CASE TYPE("oObject.lFormAddObject")#"L" OR NOT oObject.lFormAddObject
				llDesignMode=.T.
				DIMENSION laSelObj[1]
				IF ASELOBJ(laSelObj,1)=0 OR (TYPE("oObject.BaseClass")=="C" AND ;
						(LOWER(oObject.BaseClass)=="container" OR ;
						LOWER(oObject.BaseClass)=="column" OR ;
						LOWER(oObject.BaseClass)=="page"))
					llRunModeCheck=.T.
				ELSE
					oObject=laSelObj[1]
					RELEASE laSelObj
					IF LOWER(oObject.BaseClass)=="form"
						IF TYPE("oObject.Caption")#"C" OR NOT lcMWindow==LOWER(ALLTRIM(oObject.Caption))
							llRunModeCheck=.T.
							thisform.lFormAddObject=.F.
						ENDIF
					ELSE
						IF NOT lcMWindow==LOWER(ALLTRIM(oObject.Name))
							llRunModeCheck=.T.
							thisform.lFormAddObject=.F.
						ENDIF
					ENDIF
					IF NOT llRunModeCheck AND (lcBaseClass=="form" OR lcBaseClass=="toolbar")
						oObject=oObject.parent
					ENDIF
				ENDIF
		ENDCASE
		IF llRunModeCheck AND NOT thisform.lFormAddObject
			llDesignMode=.F.
		ENDIF
		thisform.lFormAddObject=.F.
		
		*** JRN 2010-04-18 : modified slightly
		*RETURN This.FormAddObject(oObject,lnXCoord,lnYCoord,.T.,llDesignMode, ;
				(nShift=1),(NOT This.lDragDropErrors AND nShift#2),(nButton=2),oForm)
		oNewObject = This.FormAddObject(oObject,lnXCoord,lnYCoord,.T.,llDesignMode, ;
				(nShift=1),(nShift#2),(nButton=2),oForm)
		
		*** JRN 2010-04-30 : Update PEM Editor
		If Type('_oPEMEditor.oUtils') = 'O' and Vartype(_oPEMEditor.oUtils) = 'O'
			_oPEMEditor.oUtils.SetCurrentSelectedObject (oNewObject)
		EndIf 
		
		Return oNewObject
	ENDPROC

	PROCEDURE removetext1fromcolumn
		#Define ccPROMPT  'Remove the default Text1 control from this column?'
		
		Lparameters lcTargetBaseClass, toObject, lcObjName
		*{123} MJP -- 05/16/2013 12:01:21 PM - Begin
		*-- This code was leveraged from the VFP Toolbox source code.
		*-- If the object was just added to a column, check if the column contains
		*-- the default Text1 textbox.  If that textbox exists, ask the user if
		*-- they want to replace it with the object that was just added.  If yes,
		*-- remove Text1, and make the new object the current (default) control
		*-- for the column.
		*-- PLEASE NOTE that the Toolbox engine includes a property to indicate
		*-- whether the user should be prompted to remove Text1, and another
		*-- property to indicate whether the CurrentControl setting should be
		*-- changed.  Something like that could be done here if Finder needed to
		*-- be that configurable.
		Local lnCount2
		If m.lcTargetBaseClass == 'column'
			For lnCount2 = 1 To m.toObject.ControlCount
				If m.toObject.Controls(m.lnCount2).Name == 'Text1'
					*-- PLEASE NOTE: The prompt and caption used by Toolbox are
					*-- defined in a #DEFINE.  I would probably be a good idea to
					*-- do something similar here, rather than using explicit text.
					If Messagebox(ccPROMPT, 4 + 32 + 256, 'Finder' ) = 6	&& Yes
						toObject.RemoveObject( 'Text1' )
		
						*-- This property setting is wrapped in TRY..CATCH in the
						*-- Toolbox code, so do the same here.  I don't know what
						*-- might cause this to fail.
						Try
							toObject.CurrentControl = m.lcObjName
						Catch to loException
						Endtry
					Endif
					Exit
				Endif
			Endfor
		Endif
		*} MJP -- 05/16/2013 12:01:21 PM - End
		
	ENDPROC

ENDDEFINE

DEFINE CLASS custpanel AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getclassfilename
		*m: getvalues
		*m: setvalues
		*p: ccolumninfo
		*p: cpanel
		*p: cpanelfilter
		*p: cpanelkey
		*p: cpropertieslist
		*p: csortorder
		*p: lsubdirectories
		*p: lusepanel
		*p: npanelwidth
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		ccolumninfo = 
		cpanel = 
		cpanelfilter = 
		cpanelkey = 
		cpropertieslist = cPanel, cPanelFilter, cPanelKey, lUsePanel, nPanelWidth, cSortOrder, cColumnInfo, lSubDirectories
		csortorder = |COLFILENAME|
		lsubdirectories = .F.
		lusepanel = .T.
		Name = "custpanel"
		npanelwidth = 175
		_memberdata = <VFPData>
			<memberdata name="cpanel" display="cPanel"/>
			<memberdata name="cpanelfilter" display="cPanelFilter"/>
			<memberdata name="cpanelkey" display="cPanelKey"/>
			<memberdata name="npanelwidth" display="nPanelWidth"/>
			<memberdata name="setvalues" display="SetValues"/>
			<memberdata name="getvalues" display="GetValues"/>
			<memberdata name="cpropertieslist" display="cPropertiesList"/>
			<memberdata name="csortorder" display="cSortOrder"/>
			<memberdata name="ccolumninfo" display="cColumnInfo"/>
			<memberdata name="lsubdirectories" display="lSubDirectories"/>
			<memberdata name="lusepanel" display="lUsePanel"/>
			<memberdata name="getclassfilename" display="GetClassFileName"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE getclassfilename
		Lparameters tcClassLoc, tcPath
		
		*** JRN 02/24/2009 : per Doug ... handles cases of absolute paths and relative to current directory
		
		Do Case
			Case ':' $ tcClassLoc
				Return tcClassLoc
		
			Case File( Fullpath( m.tcClassLoc, m.tcPath ) )
				Return Fullpath(tcClassLoc, tcPath)
		
			Otherwise
				Return Fullpath( m.tcClassLoc )
		Endcase
		
	ENDPROC

	PROCEDURE getvalues
		#Define CRLF Chr[13] + Chr[10]
		
		Local laProperties[1], lcProperty, lcResult, lnCount, lnI
		lcResult = ''
		lnCount	 = Alines(laProperties, This.cPropertiesList , 5, ',')
		For lnI = 1 To lnCount
			lcProperty = laProperties[lnI]
			lcResult   = lcResult + lcProperty + ' = ' + Transform(Getpem(This, lcProperty)) + CRLF
		Endfor
		Return lcResult
	ENDPROC

	PROCEDURE setvalues
		Lparameters lcProperties
		
		Local laProperties[1], lcName, lcProperty, lcValue, lnCount, lnI, lnPos
		
		lnCount = Alines(laProperties, lcProperties, 5)
		For lnI = 1 To lnCount
			lcProperty = laProperties[lnI]
			lnPos	   = At('=', lcProperty)
			If lnPos > 0
				lcName	= Left(lcProperty, lnPos - 2)
				lcValue	= Substr(lcProperty, lnPos + 2)
				Do Case
					Case Not PemStatus(This, lcName, 5)
					
					Case Left(lcName, 1) = 'n'
						This.&lcName = Val(lcValue)
					Case Left(lcName, 1) = 'l'
						This.&lcName = Atc('.T.', lcValue) # 0
					Otherwise 
						This.&lcName = lcValue
				Endcase
			Endif && lnPos > 0
		Endfor && lnI = 1 To lnCount
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmscopefinder AS baseform OF "thor_proc_scopeprocessor.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chklProjectHomeDirectory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklPathAndClassLibs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklCurrentDirectory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklActiveProject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklSubDirectories" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBrowseDir" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBrowseProject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: chdirtoscope
		*m: cscope_assign
		*m: getdirfromscope
		*m: getscopetype
		*m: savemrulists
		*m: updatemrulist
		*p: ccaption
		*p: cdirectorymrus
		*p: cpathandclasslibs
		*p: cprojectmrus
		*p: cscope
		*p: cscreenproperty
		*p: lactiveproject
		*p: lcurrentdirectory
		*p: lpathandclasslibs
		*p: lprojecthomedirectory
		*p: lsubdirectories
		*p: nmrudisplaycount
		*p: oscope
	*</DefinedPropArrayMethod>

	*<PropValue>
		AllowOutput = .F.
		BindControls = .F.
		Caption = "Scope Processor"
		ccaption = 
		cdirectorymrus = 
		cpathandclasslibs = << Path or ClassLibs >>
		cprojectmrus = 
		cscope = 
		cscreenproperty = 
		DataSession = 2
		DoCreate = .T.
		FontSize = 8
		Height = 150
		lactiveproject = .F.
		ladddescendants = .T.
		lcurrentdirectory = .F.
		Left = 0
		lformaddobject = .F.
		lpathandclasslibs = .F.
		lprojecthomedirectory = .F.
		lsubdirectories = .T.
		MaxHeight = 150
		Name = "frmscopefinder"
		nmrudisplaycount = 6
		oscope = .NULL.
		ShowTips = .T.
		Top = 0
		Width = 429
		_memberdata = <VFPData>
			<memberdata name="csortorder" display="cSortOrder"/>
			<memberdata name="cscope" display="cScope"/>
			<memberdata name="lprojecthomedirectory" display="lProjectHomeDirectory"/>
			<memberdata name="lsubdirectories" display="lSubDirectories"/>
			<memberdata name="lstayopen" display="lStayOpen"/>
			<memberdata name="lcurrentdirectory" display="lCurrentDirectory"/>
			<memberdata name="clookfor" display="cLookFor"/>
			<memberdata name="cscope_assign" display="cScope_Assign"/>
			<memberdata name="otools" display="oTools"/>
			<memberdata name="ndockable" display="nDockable"/>
			<memberdata name="csearchengineclass" display="cSearchEngineClass"/>
			<memberdata name="osearchengine" display="oSearchEngine"/>
			<memberdata name="csearchengineclasslibrary" display="cSearchEngineClassLibrary"/>
			<memberdata name="refreshresults" display="RefreshResults"/>
			<memberdata name="selectresults" display="SelectResults"/>
			<memberdata name="setsortorder" display="SetSortOrder"/>
			<memberdata name="ccolumninfo" display="cColumnInfo"/>
			<memberdata name="restorecolumninfo" display="RestoreColumnInfo"/>
			<memberdata name="chomedir" display="cHomeDir"/>
			<memberdata name="search" display="Search"/>
			<memberdata name="getrelativepath" display="GetRelativePath"/>
			<memberdata name="clookfor_assign" display="cLookFor_Assign"/>
			<memberdata name="editsourcefile" display="EditSourceFile"/>
			<memberdata name="clookformrus" display="cLookForMRUs"/>
			<memberdata name="updatemrulist" display="UpdateMRUList"/>
			<memberdata name="searchinit" display="SearchInit"/>
			<memberdata name="cprojectmrus" display="cProjectMRUs"/>
			<memberdata name="cdirectorymrus" display="cDirectoryMRUs"/>
			<memberdata name="gridcontextmenu" display="GridContextMenu"/>
			<memberdata name="griddoubleclick" display="GridDoubleClick"/>
			<memberdata name="transferpropertiestoengine" display="TransferPropertiesToEngine"/>
			<memberdata name="savemrulists" display="SaveMRULists"/>
			<memberdata name="cfavoriteslist" display="cFavoritesList"/>
			<memberdata name="cskippedextensions" display="cSkippedExtensions"/>
			<memberdata name="lskipextensions" display="lSkipExtensions"/>
			<memberdata name="lskipfolders" display="lSkipFolders"/>
			<memberdata name="cskippedfolders" display="cSkippedFolders"/>
			<memberdata name="setoptions" display="SetOptions"/>
			<memberdata name="lsearching" display="lSearching"/>
			<memberdata name="highlightlookfor" display="HighlightLookFor"/>
			<memberdata name="ccolumnfilter" display="cColumnFilter"/>
			<memberdata name="setcolumnfilter" display="SetColumnFilter"/>
			<memberdata name="ngridrecno" display="nGridRecno"/>
			<memberdata name="osettings" display="oSettings"/>
			<memberdata name="getallsettings" display="GetAllSettings"/>
			<memberdata name="oclasssearchengine" display="oClassSearchEngine"/>
			<memberdata name="ofilesearchengine" display="oFileSearchEngine"/>
			<memberdata name="lsearchclass" display="lSearchClass"/>
			<memberdata name="lclasssearchasdefault" display="lClassSearchAsDefault"/>
			<memberdata name="savedraginfo" display="SaveDragInfo"/>
			<memberdata name="nmousebutton" display="nMouseButton"/>
			<memberdata name="lformaddobject" display="lFormAddObject"/>
			<memberdata name="createresultscursor" display="CreateResultsCursor"/>
			<memberdata name="openresultscursor" display="OpenResultsCursor"/>
			<memberdata name="cresultsfilename" display="cResultsFileName"/>
			<memberdata name="getresultsfilename" display="GetResultsFileName"/>
			<memberdata name="getdirfromscope" display="GetDirFromScope"/>
			<memberdata name="nmrudisplaycount" display="nMRUDisplayCount"/>
			<memberdata name="resourcefile" display="ResourceFile"/>
			<memberdata name="createmrucontextmenu" display="CreateMRUContextMenu"/>
			<memberdata name="addmrusubmenu" display="AddMRUSubMenu"/>
			<memberdata name="chdirtoscope" display="ChDirToScope"/>
			<memberdata name="ncolumnfiltercount" display="nColumnFilterCount"/>
			<memberdata name="acolumnfilters" display="aColumnFilters"/>
			<memberdata name="ccolumnfilters" display="cColumnFilters"/>
			<memberdata name="getcolumnfilters" display="GetColumnFilters"/>
			<memberdata name="setcolumnfilters" display="SetColumnFilters"/>
			<memberdata name="panelinit" display="PanelInit"/>
			<memberdata name="removepanel" display="RemovePanel"/>
			<memberdata name="addpanel" display="AddPanel"/>
			<memberdata name="panelwidthchanged" display="PanelWidthChanged"/>
			<memberdata name="togglefilter" display="ToggleFilter"/>
			<memberdata name="setpanelfilter" display="SetPanelFilter"/>
			<memberdata name="opanelproperties" display="oPanelProperties"/>
			<memberdata name="oclasspanelproperties" display="oClassPanelProperties"/>
			<memberdata name="ofilepanelproperties" display="oFilePanelProperties"/>
			<memberdata name="cclasspanelproperties" display="cClassPanelProperties"/>
			<memberdata name="cfilepanelproperties" display="cFilePanelProperties"/>
			<memberdata name="opanelproperties_access" display="oPanelProperties_Access"/>
			<memberdata name="osearchengine_access" display="oSearchEngine_Access"/>
			<memberdata name="selectpanelfilter" display="SelectPanelFilter"/>
			<memberdata name="csortorder_access" display="cSortOrder_Access"/>
			<memberdata name="csortorder_assign" display="cSortOrder_Assign"/>
			<memberdata name="ccolumninfo_access" display="cColumnInfo_Access"/>
			<memberdata name="ccolumninfo_assign" display="cColumnInfo_Assign"/>
			<memberdata name="cversion" display="cVersion"/>
			<memberdata name="lsearchingenabled" display="lSearchingEnabled"/>
			<memberdata name="highlightpreviousgridrow" display="HighlightPreviousGridRow"/>
			<memberdata name="descendants" display="Descendants"/>
			<memberdata name="csearchproperties" display="cSearchProperties"/>
			<memberdata name="whereused" display="WhereUsed"/>
			<memberdata name="height" display="Height"/>
			<memberdata name="width" display="Width"/>
			<memberdata name="lpathandclasslibs" display="lPathAndClassLibs"/>
			<memberdata name="getscopetype" display="GetScopeType"/>
			<memberdata name="cpathandclasslibs" display="cPathAndClassLibs"/>
			<memberdata name="savedockinfo" display="SaveDockInfo"/>
			<memberdata name="ldocked" display="lDocked"/>
			<memberdata name="ndockposition" display="nDockPosition"/>
			<memberdata name="cdockwindow" display="cDockWindow"/>
			<memberdata name="restoredocking" display="RestoreDocking"/>
			<memberdata name="showpathclasslibs" display="ShowPathClassLibs"/>
			<memberdata name="caption" display="Caption"/>
			<memberdata name="restoreallproperties" display="RestoreAllProperties"/>
			<memberdata name="multipleinstances" display="MultipleInstances"/>
			<memberdata name="getsettingsfilename" display="GetSettingsFileName"/>
			<memberdata name="getfinderscope" display="GetFinderScope"/>
			<memberdata name="cresultsfilename_access" display="cResultsFileName_Access"/>
			<memberdata name="cscreenproperty" display="cScreenProperty"/>
			<memberdata name="nfontsize" display="nFontSize"/>
			<memberdata name="setfontsize" display="SetFontSize"/>
			<memberdata name="oscope" display="oScope"/>
			<memberdata name="ccaption" display="cCaption"/>
			<memberdata name="lactiveproject" display="lActiveProject"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cboScope' AS cbofinder WITH ;
		Anchor = 10, ;
		DisabledForeColor = 0,0,0, ;
		DisplayCount = 25, ;
		FontSize = 8, ;
		Format = "", ;
		Height = 21, ;
		Left = 78, ;
		MaxLength = 254, ;
		Name = "cboScope", ;
		Style = 0, ;
		TabIndex = 7, ;
		Top = 58, ;
		Width = 330, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="combobox" />

	ADD OBJECT 'chklActiveProject' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "\<Active Project", ;
		ccontrolsource = ThisForm.lActiveProject, ;
		ControlSource = "", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 15, ;
		Name = "chklActiveProject", ;
		TabIndex = 8, ;
		Top = 6, ;
		Width = 90, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklCurrentDirectory' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "\<Current Dir.", ;
		ccontrolsource = ThisForm.lCurrentDirectory, ;
		ControlSource = "", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 164, ;
		Name = "chklCurrentDirectory", ;
		TabIndex = 9, ;
		Top = 6, ;
		Width = 81, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklPathAndClassLibs' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "\<Path/ClassLibs", ;
		ccontrolsource = ThisForm.lPathAndClassLibs, ;
		ControlSource = "", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 304, ;
		Name = "chklPathAndClassLibs", ;
		TabIndex = 9, ;
		ToolTipText = "Searches current path and, for Class Search, classlibs", ;
		Top = 6, ;
		Visible = .F., ;
		Width = 103, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklProjectHomeDirectory' AS chkfinder WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Home directory and sub-directories only", ;
		ccontrolsource = ThisForm.lProjectHomeDirectory, ;
		ControlSource = "Thisform.lProjectHomeDirectory", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 78, ;
		Name = "chklProjectHomeDirectory", ;
		TabIndex = 12, ;
		Top = 84, ;
		Visible = .F., ;
		Width = 211, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklSubDirectories' AS chkfinder WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Searc\<h sub-directories", ;
		ccontrolsource = ThisForm.lSubDirectories, ;
		ControlSource = "Thisform.lSubDirectories", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 78, ;
		Name = "chklSubDirectories", ;
		TabIndex = 13, ;
		Top = 84, ;
		Width = 129, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdBrowseDir' AS cmdfinder WITH ;
		Anchor = 0, ;
		Caption = "Browse \<Dir.", ;
		Default = .F., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 164, ;
		Name = "cmdBrowseDir", ;
		TabIndex = 11, ;
		Top = 29, ;
		Width = 80, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdBrowseProject' AS cmdfinder WITH ;
		Anchor = 0, ;
		Caption = "\<Browse Project", ;
		Default = .F., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 11, ;
		Name = "cmdBrowseProject", ;
		TabIndex = 10, ;
		Top = 29, ;
		Width = 97, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdCancel' AS cmdfinder WITH ;
		Anchor = 6, ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = -100, ;
		Name = "cmdCancel", ;
		TabIndex = 5, ;
		Top = -118, ;
		Width = 68, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGo' AS cmdfinder WITH ;
		Anchor = 0, ;
		AutoSize = .F., ;
		Caption = "Go", ;
		Default = .T., ;
		FontBold = .T., ;
		FontSize = 9, ;
		Height = 27, ;
		Left = 162, ;
		Name = "cmdGo", ;
		TabIndex = 11, ;
		Top = 114, ;
		Width = 58, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdScope' AS cmdfinder WITH ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 49, ;
		Name = "cmdScope", ;
		Picture = ..\images\folder.bmp, ;
		PicturePosition = 13, ;
		SpecialEffect = 2, ;
		TabIndex = 15, ;
		Top = 57, ;
		Width = 21, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblScope' AS lblfinder WITH ;
		Alignment = 1, ;
		Caption = "Sco\<pe:", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 5, ;
		Name = "lblScope", ;
		TabIndex = 6, ;
		Top = 62, ;
		Width = 40, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="thor_proc_scopeprocessor.vcx" BaseClass="label" />

	ADD OBJECT 'Line1' AS line WITH ;
		Anchor = 10, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line1", ;
		Top = 106, ;
		Width = 593
		*< END OBJECT: BaseClass="line" />
	
	PROCEDURE Activate
		Set Talk Off
		This.Refresh()
		
	ENDPROC

	PROCEDURE chdirtoscope
		Local lcScope
		lcScope	 = Thisform.cScope
		lcScopeType = Thisform.GetScopeType()
		
		Do Case
			Case lcScopeType = 'Project'
				Cd (Justpath(lcScope))
			Case lcScopeType = 'Folder'
				Cd (Justpath(lcScope))
		Endcase
		
		
	ENDPROC

	PROCEDURE cscope_assign
		Lparameters tcScope
		
		Local lcCaption, lcScope
		If Upper(This.cScope) == Upper(tcScope)
			Return
		Endif
		
		This.cScope	= tcScope
		lcScope		= Trim(This.oTools.DiskFileName(tcScope))
		If Right(lcScope, 1) = '\'
			lcScope = Left(lcScope, Len(lcScope) - 1)
		Endif
		
		lcCaption = Justfname(lcScope)
		If Empty(lcCaption)
			lcCaption = Justfname(Justpath(lcScope))
		Endif
		
		This.Caption = This.cCaption + ' - ' + lcCaption
		
		If Upper(Thisform.cboScope.DisplayValue) == Upper(tcScope)
			Return
		Endif
		
		Thisform.cboScope.DisplayValue = lcScope
		
	ENDPROC

	PROCEDURE Destroy
		This.SaveMRULists()
		This.oSettings.Save(Thisform)
		
		This.oSettings = Null
		This.oTools	   = Null
		
		
	ENDPROC

	PROCEDURE getallsettings
		Local lcProperties
		
		Text To lcProperties Noshow Pretext 15
		cScope
		lActiveProject
		lCurrentDirectory
		lPathAndClassLibs
		lProjectHomeDirectory
		lSubDirectories
		cProjectMRUs
		cDirectoryMRUs
		Endtext
		
		Return Chrtran(lcProperties, ' ', ',')
	ENDPROC

	PROCEDURE getdirfromscope
		Local lcScope, lcScopeType
		lcScope		= Thisform.cScope
		lcScopeType	= Thisform.GetScopeType()
		
		Do Case
			Case lcScopeType = 'Project'
				Return lcScope
			Case lcScopeType = 'Folder'
				Return Justpath(lcScope)
			Case lcScopeType = 'Path'
				Return Sys(5) + Curdir()
			Otherwise
				Return ''
		Endcase
		
	ENDPROC

	PROCEDURE getscopetype
		Local lcScope
		lcScope		  = Thisform.cScope
		Do Case
			Case This.lPathAndClassLibs
				Return 'Path'
			Case Upper(Justext(lcScope)) == 'PJX'
				Return 'Project'
			Case Directory(lcScope)
				Return 'Folder'
			Otherwise
				Return 'None'
		Endcase
		
		
	ENDPROC

	PROCEDURE Init
		Lparameters lcCaption
		
		With This
			.cCaption = Evl(lcCaption, This.Caption)
			.oTools	   = Execscript(_Screen.cThorDispatcher, 'Class= tools from pemeditor')
			.oSettings = Execscript(_Screen.cThorDispatcher, 'Class= ThorFormSettings', 'Scope Processor')
			.oSettings.Restore(Thisform, 'Height, Width, Top, Left')
			.oSettings.Restore(Thisform, .GetAllSettings())
			.cboScope.Requery()
		Endwith
		
	ENDPROC

	PROCEDURE Load
		Set Talk Off 
		DoDefault()
		
	ENDPROC

	PROCEDURE savemrulists
		Local lcScopeType
		
		With Thisform
			* --------------------------------------------------------------------------------
			lcScope = This.oTools.DiskFileName(Fullpath(.cScope))
			lcScopeType = Thisform.GetScopeType()
			Do Case
				Case lcScopeType = 'Project'
					.cProjectMRUs = .UpdateMRUList(.cProjectMRUs, lcScope)
				Case lcScopeType = 'Folder'
					.cDirectoryMRUs = .UpdateMRUList(.cDirectoryMRUs, lcScope)
			Endcase
			.cboScope.Requery()
		
		Endwith && Thisform
		
	ENDPROC

	PROCEDURE updatemrulist
		Lparameters lcMRUList, lcNewItem, lnMaxItems
		Local lcNewMRUs
		
		lcNewMRUs = lcNewItem + '|' + lcMRUList
		lcNewMRUs = Strtran(lcNewMRUs, '|' + lcNewItem + '|', '|', 1, 1, 1)
		lnMaxItems = Evl(lnMaxItems, Thisform.nMRUDisplayCount)
		If Occurs('|', lcNewMRUs) > lnMaxItems
			lcNewMRUs = Left(lcNewMRUs, At('|', lcNewMRUs, lnMaxItems))
		Endif
		
		Return lcNewMRUs 
	ENDPROC

	PROCEDURE cboScope.InteractiveChange
		Local lPathAndClassLibs
		If Upper(Thisform.cScope) == Upper(This.DisplayValue)
			Return
		Endif
		
		With Thisform
			.lActiveProject	   = .F.
			.lCurrentDirectory = .F.
			.lPathAndClassLibs = Trim(This.DisplayValue) == Thisform.cPathAndClassLibs
			.cScope			   = This.DisplayValue
		
			.chklActiveProject.Refresh()
			.chklCurrentDirectory.Refresh()
			.chklProjectHomeDirectory.Refresh()
			.chklSubDirectories.Refresh()
			.chklPathAndClassLibs.Refresh()
		
			.cmdScope.Refresh()
		Endwith
		
		
	ENDPROC

	PROCEDURE cboScope.Requery
		Local laLines[1], lcCurDir, lcProjectMRUs, lnCount, lnI
		
		This.Clear()
		lcCurDir = Curdir()
		
		* --------------------------------------------------------------------------------
		lcProjectMRUs = Thisform.cProjectMRUs
		For lnI = _vfp.Projects.Count To 1 Step - 1
			lcProjectMRUs = Thisform.UpdateMRUList(lcProjectMRUs, _vfp.Projects[lnI].Name)
		Endfor
		
		* --------------------------------------------------------------------------------
		This.AddItem('\ ----- Projects -----')
		lnCount = Alines(laLines, lcProjectMRUs, 5, '|')
		For lnI = 1 To Min(lnCount, Thisform.nMRUDisplayCount)
			This.AddItem(Thisform.oTools.DiskFileName(laLines[lnI]))
		Endfor
		
		* --------------------------------------------------------------------------------
		This.AddItem('\-')
		This.AddItem('\ ----- Folders -----')
		lnCount = Alines(laLines, Thisform.cDirectoryMRUs, 5, '|')
		For lnI = 1 To Min(lnCount, Thisform.nMRUDisplayCount)
			This.AddItem(Thisform.oTools.DiskFileName(laLines[lnI]))
		Endfor
		
		*!* ******************** Removed 1/31/2014 *****************
		*!* * --------------------------------------------------------------------------------
		*!* lnCount = Alines(laLines, Thisform.cFavoritesList, 5, '|', ';', Chr[13], Chr[10])
		*!* If lnCount > 0
		*!* 	This.AddItem('\-')
		*!* 	This.AddItem('\ ----- Favorites -----')
		*!* 	For lnI = 1 To lnCount
		*!* 		This.AddItem(Thisform.oTools.DiskFileName(Fullpath(laLines[lnI])))
		*!* 	Endfor
		*!* Endif
		
		This.AddItem('\-')
		This.AddItem(Thisform.cPathAndClassLibs)
		
	ENDPROC

	PROCEDURE cboScope.Valid
		Thisform.Refresh()
		
	ENDPROC

	PROCEDURE chklActiveProject.Refresh
		DoDefault()
		This.Enabled = _vfp.Projects.Count # 0
		
		
	ENDPROC

	PROCEDURE chklActiveProject.Valid
		If This.Value
			Thisform.lCurrentDirectory = .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			   = _vfp.Projects[1].Name
			Thisform.Refresh()
		Endif
		
	ENDPROC

	PROCEDURE chklCurrentDirectory.Valid
		If This.Value
			Thisform.lActiveProject	= .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			= Sys(5) + Curdir()
			Thisform.Refresh()
		Endif
		
	ENDPROC

	PROCEDURE chklPathAndClassLibs.Valid
		If This.Value
			Thisform.lActiveProject	   = .F.
			Thisform.lCurrentDirectory = .F.
			Thisform.cScope			   = Thisform.cPathAndClassLibs
			Thisform.Refresh()
		Endif
		
	ENDPROC

	PROCEDURE chklProjectHomeDirectory.Refresh
		This.Visible = Thisform.GetScopeType() = 'Project'
		 
	ENDPROC

	PROCEDURE chklSubDirectories.Refresh
		This.Visible = Thisform.GetScopeType() = 'Folder'
		
	ENDPROC

	PROCEDURE cmdBrowseDir.Click
		Local lcCurdir, lcFolder
		
		lcFolder = Getdir(Thisform.GetDirFromScope(), 'Select a folder to search', 'Finder', 1 + 16 + 32 + 64 + 512)
		
		If Not Empty(lcFolder)
			Thisform.lActiveProject	   = .F.
			Thisform.lCurrentDirectory = .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			   = lcFolder
			Thisform.Refresh()
		Endif
	ENDPROC

	PROCEDURE cmdBrowseProject.Click
		Local lcCurdir, lcProject
		
		lcCurdir = Sys(5) + Curdir()
		ThisForm.ChDirToScope()
		
		lcProject = Getfile('PJX', 'Project')
		Cd (lcCurdir)
		
		If Not Empty(lcProject)
			Thisform.lActiveProject	   = .F.
			Thisform.lCurrentDirectory = .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			   = lcProject
			Thisform.Refresh()
		Endif
	ENDPROC

	PROCEDURE cmdCancel.Click
		ThisForm.Release()
		
	ENDPROC

	PROCEDURE cmdGo.Click
		Thisform.Hide()
		
	ENDPROC

	PROCEDURE cmdGo.Refresh
		This.Visible = InList(Thisform.GetScopeType(), 'Project', 'Folder', 'Path')
		 
	ENDPROC

	PROCEDURE cmdScope.Click
		Local lcImageFolder, lcScope, lcScopeType, llEnabled
		lcScope		= Thisform.cScope
		lcScopeType	= Thisform.GetScopeType()
		Do Case
			Case lcScopeType = 'Project'
				Modify Project (lcScope) Nowait
			Case lcScopeType = 'Folder'
				Execscript(_Screen.cThorDispatcher, 'Thor_Proc_OpenExplorer', lcScope)
			Case lcScopeType = 'Path'
				Thisform.ShowPathClassLibs()
		Endcase
		
		
	ENDPROC

	PROCEDURE cmdScope.Refresh
		Local lcImageFolder, lcScope, lcScopeType, llEnabled
		lcScope		  = Thisform.cScope
		lcScopeType	  = Thisform.GetScopeType()
		lcImageFolder = Justpath(Justpath(This.ClassLibrary)) + '\Images\'
		Do Case
			Case lcScopeType = 'Project'
				llEnabled		 = File(lcScope)
				This.Picture	 = lcImageFolder + 'Project.bmp'
				This.ToolTipText = 'Click to open this project' + Chr(13) + 'Right-click to open Project folder in Explorer'
			Case lcScopeType = 'Folder'
				llEnabled		 = .T.
				This.Picture	 = lcImageFolder + 'Folder.bmp'
				This.ToolTipText = 'Click to open this folder in Explorer'
			Case lcScopeType = 'Path'
				llEnabled		 = .T.
				This.Picture	 = lcImageFolder + 'Event.bmp'
				This.ToolTipText = 'Click to display current Path and ClassLibs'
			Otherwise
				llEnabled = .F.
		Endcase
		
		This.Enabled = llEnabled
		This.Visible = llEnabled
		
	ENDPROC

	PROCEDURE cmdScope.RightClick
		Local lcImageFolder, lcScope, lcScopeType, llEnabled
		
		lcScope		= Thisform.cScope
		lcScopeType	= Thisform.GetScopeType()
		
		If lcScopeType = 'Project'
				Execscript(_Screen.cThorDispatcher, 'Thor_Proc_OpenExplorer', lcScope)
		Endif
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS lblfinder AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		Caption = "Label1"
		Height = 17
		Name = "lblfinder"
		Width = 40
	*</PropValue>

ENDDEFINE
